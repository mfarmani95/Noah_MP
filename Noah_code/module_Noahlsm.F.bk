module noahlsm_globals
  implicit none

! ==================================================================================================
!------------------------------------------------------------------------------------------!
! Physical Constants:                                                                      !
!------------------------------------------------------------------------------------------!

  REAL, PARAMETER :: GRAV   = 9.80616   !acceleration due to gravity (m/s2)
  REAL, PARAMETER :: SB     = 5.67E-08  !Stefan-Boltzmann constant (w/m2/k4)
  REAL, PARAMETER :: VKC    = 0.40      !von Karman constant
  REAL, PARAMETER :: TFRZ   = 273.16    !freezing/melting point (k)
  REAL, PARAMETER :: HSUB   = 2.8440E06 !latent heat of sublimation (j/kg)
  REAL, PARAMETER :: HVAP   = 2.5104E06 !latent heat of vaporization (j/kg)
  REAL, PARAMETER :: HFUS   = 0.3336E06 !latent heat of fusion (j/kg)
  REAL, PARAMETER :: CWAT   = 4.188E06  !specific heat capacity of water (j/m3/k)
  REAL, PARAMETER :: CICE   = 2.094E06  !specific heat capacity of ice (j/m3/k)
  REAL, PARAMETER :: CPAIR  = 1004.64   !heat capacity dry air at const pres (j/kg/k)
  REAL, PARAMETER :: TKWAT  = 0.6       !thermal conductivity of water (w/m/k)
  REAL, PARAMETER :: TKICE  = 2.2       !thermal conductivity of ice (w/m/k)
  REAL, PARAMETER :: TKAIR  = 0.023     !thermal conductivity of air (w/m/k)
  REAL, PARAMETER :: RAIR   = 287.04    !gas constant for dry air (j/kg/k)
  REAL, PARAMETER :: RW     = 461.269   !gas constant for  water vapor (j/kg/k)
  REAL, PARAMETER :: DENH2O = 1000.     !density of water (kg/m3)
  REAL, PARAMETER :: DENICE = 917.      !density of ice (kg/m3)

!------------------------------------------------------------------------------------------!
! From the VEGPARM.TBL tables, as functions of vegetation category.
! The tables themselves are in module_sf_noahlsm_param_init.  These
! scalar variables are set in subroutine REDPRM (which must be
! called before the call to SFLX), but the user may override those
! settings by resetting these variables after the call to REDPRM and 
! before the call to SFLX.
!------------------------------------------------------------------------------------------!
  REAL    :: RSMAX        !maximum stomatal resistance
  REAL    :: TOPT         !optimum transpiration air temperature.
!------------------------------------------------------------------------------------------!
! From the SOILPARM.TBL tables, as functions of soil category.
! The tables themselves are in module_sf_noahlsm_param_init.  These
! scalar variables are set in subroutine REDPRM (which must be 
! called before the call to SFLX), but the user may override those
! settings by resetting these variables after the call to REDPRM and
! before the call to SFLX.
!------------------------------------------------------------------------------------------!
! From the GENPARM.TBL file. These scalar variables are set in
! subroutine REDPRM (which must be called before the call to SFLX), but
! the user may override those settings by resetting these variables
! after the call to REDPRM and before the call to SFLX.  
!------------------------------------------------------------------------------------------!
  REAL    :: CSOIL   !vol. soil heat capacity [j/m3/K]
  REAL    :: ZBOT    !Depth (m) of lower boundary soil temperature
  REAL    :: CZIL    !Calculate roughness length of heat

  REAL    :: REFDK   !used in compute maximum infiltration rate (used in INFIL)
  REAL    :: REFKDT  !used in compute maximum infiltration rate (used in INFIL)
  REAL    :: FRZK    !used in compute maximum infiltration rate (used in INFIL)
! =====================================options for different schemes================================
! options for dynamic vegetation: 
! 1 -> off (together with OPT_ROOT = 2); 2 -> on (together with OPT_CRS = 1)

  INTEGER, PARAMETER :: DVEG    = 2   !

! options for canopy stomatal resistance
! 1-> Ball-Berry; 2->Jarvis

  INTEGER, PARAMETER :: OPT_CRS = 1    !(must 1 when DVEG = 2)

! options for soil moisture factor for stomatal resistance
! 1-> Noah (soil moisture) 
! 2-> CLM  (matric potential)
! 3-> SSiB (matric potential)

  INTEGER, PARAMETER :: OPT_BTR = 1    !(suggested 1)

! options for runoff and groundwater
! 1 -> TOPMODEL with groundwater (Niu et al. 2007 JGR) ;
! 2 -> TOPMODEL with an equilibrium water table (Niu et al. 2005 JGR) ;
! 3 -> original surface and subsurface runoff (free drainage)
! 4 -> BATS surface and subsurface runoff (free drainage)

  INTEGER, PARAMETER :: OPT_RUN = 1    !(suggested 1)

! options for surface layer drag coeff (CH & CM)
! 1->M-O ; 2->original Noah (Chen97)

  INTEGER, PARAMETER :: OPT_SFC = 1    !(1 or 2)

! options for supercooled liquid water (or ice fraction)
! 1-> no iteration (Niu and Yang, 2006 JHM); 2: Koren's iteration 

  INTEGER, PARAMETER :: OPT_FRZ = 1    !(1 or 2)

! options for frozen soil permeability
! 1 -> linear effects, more permeable (Niu and Yang, 2006, JHM)
! 2 -> nonlinear effects, less permeable (old)

  INTEGER, PARAMETER :: OPT_INF = 1    !(suggested 1)

! options for radiation transfer
! 1 -> modified two-stream (gap = F(solar angle, 3D structure ...)<1-FVEG)
! 2 -> two-stream applied to grid-cell (gap = 0)
! 3 -> two-stream applied to vegetated fraction (gap=1-FVEG)

  INTEGER, PARAMETER :: OPT_RAD = 1    !(suggested 1)

! options for ground snow surface albedo
! 1-> BATS; 2 -> CLASS

  INTEGER, PARAMETER :: OPT_ALB = 2    !(suggested 2)

! options for partitioning  precipitation into rainfall & snowfall
! 1 -> Jordan (1991); 2 -> BATS: when SFCTMP<TFRZ+2.2 ; 3-> SFCTMP<TFRZ
! 4 -> Behrangi et al. (2018): Q J R Meteorol Soc. 2018;144 (Suppl. 1):89â€“102

  INTEGER, PARAMETER :: OPT_SNF = 4    !(suggested 1)

! options for lower boundary condition of soil temperature
! 1 -> zero heat flux from bottom (ZBOT and TBOT not used)
! 2 -> TBOT at ZBOT (8m) read from a file (original Noah)

  INTEGER, PARAMETER :: OPT_TBOT = 2   !(suggested 2)

! options for snow/soil temperature time scheme (only layer 1)
! 1 -> semi-implicit; 2 -> full implicit (original Noah)

  INTEGER, PARAMETER :: OPT_STC = 1    !(suggested 1)

! options for soil carbon model
! 1 -> first-order decay; 2 -> 4 carbon pool model; 3 -> 6 carbon pool model

  INTEGER, PARAMETER :: OPT_SCM = 3    !(suggested 3)

! options for soil water retention
! 1 -> van Genutchen; 2 -> Clapp & Hornberger

  INTEGER, PARAMETER :: OPT_WATRET = 1    !(suggested 1;)

! options for soil water retention
! 1 -> dynamic root; 2 -> static, even root profile

  INTEGER, PARAMETER :: OPT_ROOT = 1
! ==================================================================================================
! runoff parameters used for SIMTOP and SIMGM:
  REAL, PARAMETER :: TIMEAN = 10.5   !gridcell mean topgraphic index (global mean)
  REAL, PARAMETER :: FSATMX = 0.38   !maximum surface saturated fraction (global mean)
! REAL :: FFF                        !runoff decay factor (m-1)
  REAL :: RSBMX                      !baseflow coefficient [mm/s]

! adjustable parameters for snow processes

  REAL, PARAMETER :: M      = 1.00   !melting factor (-) 
  REAL, PARAMETER :: Z0SNO  = 0.002  !snow surface roughness length (m) (0.0024)
  REAL, PARAMETER :: SSI    = 0.03   !liquid water holding capacity for snowpack (m3/m3) (0.03)
  REAL, PARAMETER :: SWEMX  = 1.00   !new snow mass to fully cover old snow (mm)
                                     !equivalent to 10 mm depth (density = 100 kg/m3)

! NOTES: things to add or improve
! 1. lake model: explicit representation of lake water storage, sunlight through lake
!    with different purity, turbulent mixing of surface laker water, snow on frozen lake, etc.
! 2. shallow snow wihtout a layer: melting energy
! 3. urban model to be added.
! 4. irrigation
!------------------------------------------------------------------------------------------!

END MODULE NOAHLSM_GLOBALS
! ------------------------------------------------------------------------
MODULE VEG_PARAMETERS

    IMPLICIT NONE

    INTEGER :: i
    INTEGER, PARAMETER :: MVT   = 27
    INTEGER, PARAMETER :: MBAND = 2

    REAL :: CH2OP(MVT)       !maximum intercepted h2o per unit lai+sai (mm)
    REAL :: DLEAF(MVT)       !characteristic leaf dimension (m)
    REAL :: Z0MVT(MVT)       !momentum roughness length (m)
    REAL :: HVT(MVT)         !top of canopy (m)
    REAL :: HVB(MVT)         !bottom of canopy (m)
    REAL :: DEN(MVT)         !tree density (no. of trunks per m2)
    REAL :: RC(MVT)          !tree crown radius (m)
    REAL :: SAIM(MVT,12)     !monthly stem area index, one-sided
    REAL :: LAIM(MVT,12)     !monthly leaf area index, one-sided
    REAL :: SLA(MVT)         !single-side leaf area per Kg [m2/kg]
    REAL :: DILEFC(MVT)      !coeficient for leaf stress death [1/s]
    REAL :: SCEXP (MVT)      !coeficient for leaf stress death [1/s]
    REAL :: DILEFW(MVT)      !coeficient for leaf stress death [1/s]
    REAL :: FRAGR(MVT)       !fraction of growth respiration  !original was 0.3 
    REAL :: LTOVRC(MVT)      !leaf turnover [1/s]

!    REAL :: C3PSN(MVT)       !photosynthetic pathway: 0. = c4, 1. = c3
    REAL :: KC25(MVT)        !co2 michaelis-menten constant at 25c (pa)
    REAL :: AKC(MVT)         !q10 for kc25
    REAL :: KO25(MVT)        !o2 michaelis-menten constant at 25c (pa)
    REAL :: AKO(MVT)         !q10 for ko25
    REAL :: VCMX25(MVT)      !maximum rate of carboxylation at 25c (umol co2/m**2/s)
    REAL :: AVCMX(MVT)       !q10 for vcmx25
    REAL :: BP(MVT)          !minimum leaf conductance (umol/m**2/s)
    REAL :: MP(MVT)          !slope of conductance-to-photosynthesis relationship
    REAL :: QE25(MVT)        !quantum efficiency at 25c (umol co2 / umol photon)
    REAL :: AQE(MVT)         !q10 for qe25
    REAL :: RMF25(MVT)       !leaf maintenance respiration at 25c (umol co2/m**2/s)
    REAL :: RMS25(MVT)       !stem maintenance respiration at 25c (umol co2/kg bio/s)
    REAL :: RMR25(MVT)       !root maintenance respiration at 25c (umol co2/kg bio/s)
    REAL :: ARM(MVT)         !q10 for maintenance respiration
    REAL :: FOLNMX(MVT)      !foliage nitrogen concentration when f(n)=1 (%)
    REAL :: TMIN(MVT)        !minimum temperature for photosynthesis (k)

    REAL :: XL(MVT)          !leaf/stem orientation index
    REAL :: RHOL(MVT,MBAND)  !leaf reflectance: 1=vis, 2=nir
    REAL :: RHOS(MVT,MBAND)  !stem reflectance: 1=vis, 2=nir
    REAL :: TAUL(MVT,MBAND)  !leaf transmittance: 1=vis, 2=nir
    REAL :: TAUS(MVT,MBAND)  !stem transmittance: 1=vis, 2=nir

    REAL :: CWPVT(MVT)       !empirical canopy wind parameter

    REAL :: WRRAT(MVT)       !wood to non-wood ratio
    REAL :: WDPOOL(MVT)      !wood pool (switch 1 or 0) depending on woody or not [-]
    REAL :: TDLEF(MVT)       !characteristic T for leaf freezing [K]
    REAL :: SRA(MVT)         != 10.0      !min specific root area [m2/kg]
    REAL :: OMR(MVT)         != 1.0E8     !root resistivity to water uptake [s]
    REAL :: MQX(MVT)         !=  3.0      !ratio of water storage to dry biomass [-]
!   REAL :: RTOMAX (MVT)     != 2.52      !max root turnover rate [g/m2/year]
    REAL :: RROOT (MVT)      != 0.2       !mean radius of fine roots [mm]

!  maximum intercepted h2o per unit lai+sai (mm)
    DATA CH2OP /27*0.1/

!  characteristic leaf dimension (m)
    DATA DLEAF /27*0.04/

! momentum roughness length (m)
    DATA Z0MVT /1.00,0.06,0.06,0.06,0.06,  0.15,0.06,0.06,0.06,0.86, &
                0.80,0.85,1.10,1.09,0.80,  0.00,0.06,0.05,0.00,0.04, &
                0.06,0.06,0.03,0.00,0.01,  0.00,0.00/

! top of canopy (m)
    DATA HVT   /15.0,0.50,0.50,0.50,0.50,  1.25,0.50,0.50,0.50,16.0, &
                16.0,18.0,20.0,20.0,16.0,  0.00,0.50,0.80,0.00,0.50, &
                0.80,0.80,0.50,0.00,0.10,  0.00,0.00/

! bottom of canopy (m)
    DATA HVB   /1.00,0.10,0.10,0.10,0.10,  0.15,0.05,0.10,0.10,5.00, &
                11.5,7.00,8.00,8.50,10.0,  0.00,0.05,0.10,0.00,0.10, &
                0.10,0.10,0.10,0.00,0.10,  0.00,0.00/

! canopy density
    DATA DEN   /0.01,25.0,25.0,25.0,25.0,  25.0,100.,10.0,10.0,0.02, &
                0.10,0.28,0.02,0.28,0.10,  0.01,10.0,0.10,0.01,1.00, &
                1.00,1.00,1.00,0.00,0.01,  0.01,0.01/

! canopy radius
    DATA RC    /1.00,0.08,0.08,0.08,0.08,  0.08,0.03,0.12,0.12,3.00, &
                1.40,1.20,3.60,1.20,1.40,  0.01,0.10,1.40,0.01,0.30, &
                0.30,0.30,0.30,0.00,0.01,  0.01,0.01/

! leaf reflectance: 1=vis, 2=nir
    DATA (RHOL(I,1),I=1,MVT) &
               /0.00,0.11,0.11,0.11,0.11,  0.11,0.11,0.07,0.10,0.10, &
                0.10,0.07,0.10,0.07,0.10,  0.00,0.11,0.10,0.00,0.10, &
                0.10,0.10,0.10,0.00,0.10,  0.00,0.00/

    DATA (RHOL(I,2),I=1,MVT) & 
               /0.00,0.58,0.58,0.58,0.58,  0.58,0.58,0.35,0.45,0.45, &
                0.45,0.35,0.45,0.35,0.45,  0.00,0.58,0.45,0.00,0.45, &
                0.45,0.45,0.45,0.00,0.45,  0.00,0.00/

! stem reflectance: 1=vis, 2=nir
    DATA (RHOS(I,1),I=1,MVT) & 
               /0.00,0.36,0.36,0.36,0.36,  0.36,0.36,0.16,0.16,0.16, &
                0.16,0.16,0.16,0.16,0.16,  0.00,0.36,0.16,0.00,0.16, &
                0.16,0.16,0.16,0.00,0.16,  0.00,0.00/

    DATA (RHOS(I,2),I=1,MVT) & 
               /0.00,0.58,0.58,0.58,0.58,  0.58,0.58,0.39,0.39,0.39, &
                0.39,0.39,0.39,0.39,0.39,  0.00,0.58,0.39,0.00,0.39, &
                0.39,0.39,0.39,0.00,0.39,  0.00,0.00/

! leaf transmittance: 1=vis, 2=nir
    DATA (TAUL(I,1),I=1,MVT) & 
               /0.00,0.07,0.07,0.07,0.07,  0.07,0.07,0.05,0.05,0.05, &
                0.05,0.05,0.05,0.05,0.05,  0.00,0.07,0.05,0.00,0.05, &
                0.05,0.05,0.05,0.00,0.05,  0.00,0.00/

    DATA (TAUL(I,2),I=1,MVT) &
               /0.00,0.25,0.25,0.25,0.25,  0.25,0.25,0.10,0.10,0.25, &
                0.25,0.10,0.25,0.10,0.25,  0.00,0.25,0.25,0.00,0.25, &
                0.25,0.25,0.25,0.00,0.25,  0.00,0.00/ 

! stem transmittance: 1=vis, 2=nir
    DATA (TAUS(I,1),I=1,MVT) &
          /0.000,0.220,0.220,0.220,0.220,  0.220,0.220,0.001,0.001,0.001, &
           0.001,0.001,0.001,0.001,0.001,  0.000,0.220,0.001,0.000,0.220, &
           0.001,0.001,0.001,0.000,0.001,  0.000,0.000/

    DATA (TAUS(I,2),I=1,MVT) &
          /0.000,0.380,0.380,0.380,0.380,  0.380,0.380,0.001,0.001,0.001, &
           0.001,0.001,0.001,0.001,0.001,  0.000,0.380,0.001,0.000,0.380, &
           0.001,0.001,0.001,0.000,0.001,  0.000,0.000/

! leaf/stem orientation index: valid range = -0.4 to 0.6
    DATA XL /0.000,-0.30,-0.30,-0.30,-0.30,  -0.30,-0.30,0.010,0.250,0.010, &
             0.250,0.010,0.010,0.010,0.250,  0.000,-0.30,0.250,0.000,-0.30, &
             0.250,0.250,0.250,0.000,0.250,  0.000,0.000/
                   
! empirical canopy wind parameter
    DATA CWPVT /27*3.0/

! photosynthetic pathway: c3 = 1, c4 = 0 (warm grass)
!    DATA C3PSN /27*1./

! co2 michaelis-menten constant at 25c (pa)
    DATA KC25 /27*30./

! q10 for kc25
    DATA AKC /27*2.1/

! o2 michaelis-menten constant at 25c (pa)
    DATA KO25 /27*30000./

! q10 for ko25
    DATA AKO /27*1.2/

! q10 for vcmx25
    DATA AVCMX /27*2.4/

! q10 for qe25
    DATA AQE /27*1.0/
!---------------------------------------------------------------------------------------------

! mean radius of fine roots [mm] = 0.2
    DATA RROOT  /0.20 , 0.20 , 0.20 , 0.20 , 0.20 ,  0.20 , 0.20 , 0.20 , 0.20 , 0.20 , &
                 0.20 , 0.20 , 0.20 , 0.20 , 0.20 ,  0.20 , 0.20 , 0.20 , 0.20 , 0.20 , &
                 0.20 , 0.20 , 0.20 , 0.20 , 0.20 ,  0.20 , 0.20 /

! ratio of plant water to dry biomass
!  DATA MQX    /  4.0,   9.0,   9.0,   9.0,   9.0,     5.0,   9.0,   4.0,   4.0,   4.0,&
!                 3.0,   3.0,   4.0,   3.0,   3.0,     3.0,   5.0,   3.0,   3.0,   5.0,&           
!                 3.0,   3.0,   3.0,   3.0,   3.0,     3.0,   3.0/
   DATA MQX    /  4.0,   7.0,   7.0,   7.0,   7.0,     4.0,   7.0,   3.0,   3.0,   3.0,&
                  2.0,   2.0,   3.0,   2.0,   2.0,     3.0,   4.0,   3.0,   3.0,   4.0,&           
                  2.0,   2.0,   3.0,   3.0,   3.0,     3.0,   3.0/

! min specific root area [m2/kg C] = 10.0
    DATA SRA    /50.0  , 50.0  , 50.0  , 50.0  , 50.0  ,    50.0  ,200.0  ,100.0  ,100.0  ,200.0  , &  
                 50.0  , 50.0  , 50.0  , 50.0  , 50.0  ,     0.0  , 50.0  , 25.0  ,  0.0  , 25.0  , &  
                 42.5  , 40.0  , 25.0  , 25.0  , 25.0  ,    25.0  , 25.0/

! leaf dying rate (1.e-6;original was 0.2e-6)
    DATA DILEFW /0.10, 0.00, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00, 0.00, 0.00, &  !MODIS
                 0.10, 0.10, 0.10, 0.00, 0.00,   0.00, 0.10, 0.10, 0.00, 0.10, &  !MODIS
                 0.10, 0.10, 0.10, 0.00, 0.10,   0.00, 0.00  /                    !MODIS

! root resistivity to water uptake [s] = 1.0E8
   DATA OMR    /2.0E09, 1.0E09, 4.0E10, 2.0E10, 5.0E10,    2.0E09, 2.0E09, 8.0E09, 3.0E10, 4.0E10, &
                1.5E09, 2.5E09, 2.0E10, 3.0E10, 2.0E10,    0.0E00, 3.0E09, 1.0E10, 0.0E00, 1.0E08, &
                4.0E10, 6.0E10, 2.0E08, 2.0E08, 2.0E08,    2.0E08, 2.0E08/
!  DATA OMR    /2.0E09, 6.0E09, 5.0E10, 2.0E10, 5.0E10,    5.0E09, 1.0E10, 1.0E10, 2.0E10, 4.0E10, &
!               6.0E09, 2.5E09, 2.0E10, 3.0E10, 2.0E10,    0.0E00, 3.0E09, 1.0E10, 0.0E00, 1.0E08, &
!               4.0E10, 6.0E10, 2.0E08, 2.0E08, 2.0E08,    2.0E08, 2.0E08/

! maximum rate of carboxylation at 25c (umol co2/m**2/s)
   DATA VCMX25/ 55.0 , 27.0, 28.0, 30.0, 30.0,   27.0,28.0,27.0,38.0,30.0, &
                21.0 , 30.0, 35.0, 25.0, 25.0,    0.0,30.0,38.0,0.00,30.0, &
                40.0 , 28.0, 45.0, 0.00, 45.0,    0.0,0.00/
!  DATA VCMX25/ 45.0 , 30.0, 28.0, 30.0, 30.0,   28.0,28.0,28.0,38.0,30.0, &
!               25.0 , 30.0, 35.0, 25.0, 25.0,    0.0,30.0,38.0,0.00,30.0, &
!               40.0 , 28.0, 45.0, 0.00, 45.0,    0.0,0.00/

! leaf dying rate (1.e-6;original was 0.2e-6)
  ! DATA DILEFC /15.00,12.00, 4.00, 0.20, 8.00,   4.00,15.00,25.00,10.00,12.00, &  !MODIS
  !              20.00, 0.20, 0.20, 4.00, 3.00,   0.00, 0.40,10.00, 0.00, 0.40, &  !MODIS
  !               8.00, 0.30, 0.30, 0.00, 0.30,   0.00, 0.00  /                    !MODIS
    DATA DILEFC /28.00,12.00, 4.00, 0.20,12.00,   4.00,20.00,35.00,20.00,15.00, &  !MODIS
                 20.00, 0.20, 0.20, 2.60, 4.00,   0.00, 0.40,12.00, 0.00, 0.40, &  !MODIS
                  8.00, 0.30, 0.30, 0.00, 0.30,   0.00, 0.00  /                    !MODIS

! temperature factor for leaf dying (1.e-6;original was 0.2e-6)
   !DATA SCEXP  /0.10, 0.08, 0.15, 0.10, 0.10,   0.08, 0.04, 0.030, 0.06, 0.04, &  !MODIS
   !             0.14, 0.10, 0.10, 0.06, 0.14,   0.10, 0.05, 0.050, 0.10, 0.10, &  !MODIS
   !             0.05, 0.10, 0.10, 0.10, 0.10,   0.00, 0.00  /                    !MODIS
    DATA SCEXP  /0.08, 0.08, 0.15, 0.10, 0.12,   0.08, 0.04, 0.035, 0.06, 0.04, &  !MODIS
                 0.16, 0.10, 0.10, 0.04, 0.16,   0.10, 0.05, 0.050, 0.10, 0.10, &  !MODIS
                 0.05, 0.10, 0.10, 0.10, 0.10,   0.00, 0.00  /                    !MODIS

! leaf death temperature [K]
    data TDLEF /278,273,278,278,273,   278,273,273,278,263, &
                276,268,278,262,276,   0,268,268,0,268, &
                263,268,268,0  ,268,   0,0/

! leaf turnover rate (1/s) ! original was 0.02 e-6
    DATA LTOVRC /1.2 ,0.5,0.90,1.20,0.40,   0.35,0.30,0.20,0.60,0.40, &   !MODIS
                 0.1 ,0.2,1.20,0.00,0.30,   0.00,1.00,0.50,0.00,1.20, &   !MODIS
                 1.2 ,1.0,1.00 ,0.0,1.00,   0.00,0.0/                     !MODIS
!   DATA LTOVRC /0.8 ,0.5,0.80,1.20,0.40,   0.35,0.45,0.20,0.60,0.40, &   !MODIS
!                0.1 ,0.2,1.20,0.00,0.30,   0.00,1.00,0.50,0.00,1.20, &   !MODIS
!                1.2 ,1.0,1.00 ,0.0,1.00,   0.00,0.0/                     !MODIS

! foliage maintenance respiration rate at 25c (umol co2 /m**2 /s)
    data RMF25 /1.80,1.00,0.25,0.50,1.40,   0.80,1.30,1.10,1.40,1.20, &
                0.50,0.10,0.10,0.20,0.40,   0.00,0.10,2.80,0.00,1.20, &
                0.50,1.20,3.00,0.00,3.00,   0.00,0.00/
!   data RMF25 /1.80,1.00,0.25,0.50,1.40,   0.80,1.20,1.10,1.00,1.00, &
!               0.50,0.10,0.10,0.80,0.40,   0.00,0.10,2.80,0.00,1.20, &
!               0.50,1.20,3.00,0.00,3.00,   0.00,0.00/

      ! 0.82 for warm grass

! leaf area per unit mass (m2/kg)
    DATA SLA  / 45, 60, 70, 70, 70,   50, 80, 80, 80, 80, &   !MODIS
               100, 50, 70, 40, 60,    0, 60, 80,  0, 80, &   !MODIS
                80, 80, 80,  0, 80,    0,  0 /

!   DATA SLA  / 40, 60, 70, 70, 70,   50, 60, 60, 60, 60, &   !MODIS
!              100, 50, 70, 50, 60,    0, 60, 80,  0, 80, &   !MODIS
!               80, 80, 80,  0, 80,    0,  0 /

! growth respiration fraction
    DATA FRAGR  /0.20, 0.20, 0.20, 0.20, 0.20,   0.20, 0.20, 0.20, 0.20, 0.20, &  !MODIS
                 0.20, 0.20, 0.20, 0.20, 0.20,   0.00, 0.20, 0.20, 0.20, 0.20, &  !MODIS
                 0.20, 0.20, 0.20, 0.00, 0.20,   0.00, 0.00  /                    !MODIS
!---------------------------------------------------------------------------------------------

! minimum temperature for photosynthesis (k)
    DATA TMIN  /268,268,268,268,268,  268,268,268,268,268, &
                273,268,273,265,268,    0,268,260,  0,268, &
                260,263,268,  0,268,    0,  0/

! minimum leaf conductance (umol/m**2/s)
    DATA BP /2000.,14*2000.,1.e15,7*2000.,1.e15,2000.,1.e15,1.e15/

! slope for conductance-to-photosynthesis relationship
    DATA MP /9.,9.,9.,9., 9.,  9.,9.,9.,9.,9., &  ! 5 - for warm grass
             9.,9.,9.,9., 9.,   9.,9.,18.,9.,9., &
             15.,12.,9.,9., 9.,   9.,9./
!   DATA MP /9.,9.,9.,9., 9.,  9.,7.,7.,9.,9., &  ! 5 - for warm grass
!            9.,9.,9.,8., 8.,   9.,9.,18.,9.,9., &
!            15.,9.,9.,9., 9.,   9.,9./

! quantum efficiency at 25c (umol co2 / umol photon) ! 0.04 for warm grass
    DATA QE25 /0.06,14*0.06,0.00,7*0.06,0.00,0.06,0.00,0.00/

! stem maintenance respiration at 25c (umol co2/kg biomass/s)
    DATA RMS25 /0.10,0.10,0.10,0.10,0.10,   0.10,0.10,0.10,0.10,0.32, &
                0.10,0.64,0.30,0.90,0.80,   0.00,0.10,0.10,0.00,0.10, &
                0.10,0.10,0.00,0.00,0.00,   0.00,0.00/

! root maintenance respiration at 25c (umol co2/kg biomass/s)
    DATA RMR25 /0.02,0.02,0.02,0.02,0.02,   0.02,0.02,0.00,0.00,0.02, &
                0.02,0.02,0.02,0.02,0.02,   0.02,0.02,0.02,0.00,0.02, &
                0.00,0.00,0.00,0.00,0.00,   0.00,0.00/

! q10 for maintenance respiration
    DATA ARM /27*2.0/

! foliage nitrogen concentration when f(n)=1 (-)
    DATA FOLNMX /1.00,14*1.5,0.00,7*1.5,0.00,1.5,0.00,0.00/

! wood pool (switch 1 or 0) depending on woody or not
    DATA WDPOOL/1.00,0.00,0.00,0.00,0.00,  0.00,0.00,1.00,1.00,1.00, &
                1.00,1.00,1.00,1.00,1.00,  0.00,0.00,1.00,0.00,0.00, &
                1.00,1.00,0.00,0.00,0.00,  0.00,0.00/

! wood to non-wood ratio                      ! 30.0
    DATA WRRAT /1.00,0.00,0.00,0.00,0.00,  0.00,0.00,3.00,3.00,3.00, &
                30.0,30.0,30.0,30.0,30.0,  0.00,0.00,30.0,0.00,0.00, &
                3.00,3.00,0.00,0.00,0.00,  0.00,0.00/

! monthly stem area index
    DATA (SAIM( 1,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM( 2,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM( 3,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM( 4,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM( 5,I),I=1,12) /0.0,0.0,0.0,0.0,0.1,0.2,0.3,0.5,0.4,0.1,0.0,0.0/
    DATA (SAIM( 6,I),I=1,12) /0.1,0.1,0.1,0.1,0.2,0.2,0.3,0.2,0.1,0.1,0.1,0.1/
    DATA (SAIM( 7,I),I=1,12) /0.3,0.3,0.3,0.3,0.3,0.4,0.8,1.3,1.1,0.4,0.4,0.4/
    DATA (SAIM( 8,I),I=1,12) /0.1,0.1,0.1,0.1,0.1,0.2,0.2,0.1,0.1,0.1,0.1,0.1/
    DATA (SAIM( 9,I),I=1,12) /0.2,0.2,0.2,0.2,0.2,0.3,0.5,0.8,0.5,0.2,0.2,0.2/
    DATA (SAIM(10,I),I=1,12) /0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1/
    DATA (SAIM(11,I),I=1,12) /0.4,0.4,0.4,0.4,0.4,0.4,0.9,1.2,1.6,1.4,0.6,0.4/
    DATA (SAIM(12,I),I=1,12) /0.3,0.3,0.3,0.4,0.4,0.7,1.3,1.2,1.0,0.8,0.6,0.5/
    DATA (SAIM(13,I),I=1,12) /0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5/
    DATA (SAIM(14,I),I=1,12) /0.4,0.4,0.4,0.3,0.4,0.5,0.5,0.6,0.6,0.7,0.6,0.5/
    DATA (SAIM(15,I),I=1,12) /0.2,0.2,0.2,0.2,0.2,0.4,0.4,0.5,0.5,0.6,0.5,0.3/
    DATA (SAIM(16,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM(17,I),I=1,12) /0.1,0.1,0.1,0.1,0.1,0.2,0.4,0.6,0.5,0.2,0.2,0.1/
    DATA (SAIM(18,I),I=1,12) /0.1,0.1,0.1,0.1,0.1,0.2,0.4,0.6,0.5,0.2,0.2,0.1/
    DATA (SAIM(19,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM(20,I),I=1,12) /0.1,0.1,0.1,0.1,0.1,0.2,0.2,0.3,0.3,0.2,0.2,0.1/
    DATA (SAIM(21,I),I=1,12) /0.1,0.1,0.1,0.1,0.1,0.2,0.2,0.3,0.3,0.2,0.2,0.1/
    DATA (SAIM(22,I),I=1,12) /0.1,0.1,0.1,0.1,0.1,0.2,0.2,0.3,0.3,0.2,0.2,0.1/
    DATA (SAIM(23,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM(24,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM(25,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM(26,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (SAIM(27,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/

! monthly leaf area index, one-sided
    DATA (LAIM( 1,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (LAIM( 2,I),I=1,12) /0.0,0.0,0.0,0.0,1.0,2.0,3.0,3.0,1.5,0.0,0.0,0.0/
    DATA (LAIM( 3,I),I=1,12) /0.4,0.5,0.6,0.7,1.2,3.0,3.5,1.5,0.7,0.6,0.5,0.4/
    DATA (LAIM( 4,I),I=1,12) /0.4,0.5,0.6,0.7,1.2,3.0,3.5,1.5,0.7,0.6,0.5,0.4/
    DATA (LAIM( 5,I),I=1,12) /0.4,0.5,0.6,0.7,1.2,3.0,3.5,1.5,0.7,0.6,0.5,0.4/
    DATA (LAIM( 6,I),I=1,12) /0.0,0.0,0.0,0.5,1.5,2.5,3.5,3.5,2.0,1.0,0.0,0.0/
    DATA (LAIM( 7,I),I=1,12) /0.4,0.5,0.6,0.7,1.2,3.0,3.5,1.5,0.7,0.6,0.5,0.4/
    DATA (LAIM( 8,I),I=1,12) /1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
    DATA (LAIM( 9,I),I=1,12) /1.0,1.0,1.0,1.5,2.0,2.5,3.0,2.5,1.5,1.0,1.0,1.0/
    DATA (LAIM(10,I),I=1,12) /1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
    DATA (LAIM(11,I),I=1,12) /0.0,0.0,0.3,1.2,3.0,4.7,4.5,3.4,1.2,0.3,0.0,0.0/
    DATA (LAIM(12,I),I=1,12) /0.0,0.0,0.0,0.6,1.2,2.0,2.6,1.7,1.0,0.5,0.2,0.0/
    DATA (LAIM(13,I),I=1,12) /4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5/
    DATA (LAIM(14,I),I=1,12) /1.6,1.6,1.6,1.6,5.3,5.5,5.3,5.3,4.2,2.2,2.2,2.2/
    DATA (LAIM(15,I),I=1,12) /1.0,1.0,1.0,1.0,2.3,3.5,4.3,3.3,2.2,1.2,1.2,1.2/
    DATA (LAIM(16,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (LAIM(17,I),I=1,12) /0.4,0.5,0.6,0.7,1.2,3.0,3.5,1.5,0.7,0.6,0.5,0.4/ 
    DATA (LAIM(18,I),I=1,12) /0.2,0.4,0.4,0.4,0.5,0.7,1.7,3.0,2.5,1.6,0.8,0.4/ 
    DATA (LAIM(19,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (LAIM(20,I),I=1,12) /0.0,0.0,0.0,0.2,0.5,1.0,2.0,1.0,0.5,0.2,0.0,0.0/
    DATA (LAIM(21,I),I=1,12) /0.0,0.0,0.0,0.2,0.5,1.0,2.0,1.0,0.5,0.2,0.0,0.0/
    DATA (LAIM(22,I),I=1,12) /0.0,0.0,0.0,0.2,0.5,1.0,2.0,1.0,0.5,0.2,0.0,0.0/ 
    DATA (LAIM(23,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/ 
    DATA (LAIM(24,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (LAIM(25,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (LAIM(26,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
    DATA (LAIM(27,I),I=1,12) /0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/

END MODULE VEG_PARAMETERS
! ==================================================================================================
! ==================================================================================================
MODULE RAD_PARAMETERS

    IMPLICIT NONE
 
    INTEGER I                ! loop index
    INTEGER, PARAMETER :: MSC   = 9
    INTEGER, PARAMETER :: MBAND = 2

    REAL :: ALBSAT(MSC,MBAND)   !saturated soil albedos: 1=vis, 2=nir
    REAL :: ALBDRY(MSC,MBAND)   !dry soil albedos: 1=vis, 2=nir
    REAL :: ALBICE(MBAND)       !albedo land ice: 1=vis, 2=nir
    REAL :: ALBLAK(MBAND)       !albedo frozen lakes: 1=vis, 2=nir
    REAL :: OMEGAS(MBAND)       !two-stream parameter omega for snow
    REAL :: BETADS              !two-stream parameter betad for snow
    REAL :: BETAIS              !two-stream parameter betad for snow
    REAL :: EG(2)               !emissivity

! saturated soil albedos: 1=vis, 2=nir
    DATA(ALBSAT(I,1),I=1,8)/0.15,0.11,0.10,0.09,0.08,0.07,0.06,0.05/
    DATA(ALBSAT(I,2),I=1,8)/0.30,0.22,0.20,0.18,0.16,0.14,0.12,0.10/

! dry soil albedos: 1=vis, 2=nir
    DATA(ALBDRY(I,1),I=1,8)/0.27,0.22,0.20,0.18,0.16,0.14,0.12,0.10/
    DATA(ALBDRY(I,2),I=1,8)/0.54,0.44,0.40,0.36,0.32,0.28,0.24,0.20/

! albedo land ice: 1=vis, 2=nir
    DATA (ALBICE(I),I=1,MBAND) /0.80, 0.55/

! albedo frozen lakes: 1=vis, 2=nir
    DATA (ALBLAK(I),I=1,MBAND) /0.60, 0.40/

! omega,betad,betai for snow
    DATA (OMEGAS(I),I=1,MBAND) /0.8, 0.4/
    DATA BETADS, BETAIS /0.5, 0.5/

! emissivity ground surface    
      DATA EG /0.97, 0.98/ ! 1-soil;2-lake

END MODULE RAD_PARAMETERS
! ==================================================================================================



MODULE NOAHLSM_ROUTINES
  USE NOAHLSM_GLOBALS
  IMPLICIT NONE

  public  :: SFLX
  public  :: REDPRM
  public  :: LSMZEN
  public  :: CALENDR

  private :: ATM
  private :: PHONOLOGY
  private :: ENERGY
  private ::       THERMOPROP
  private ::               CSNOW
  private ::               TDFCND
  private ::       RADIATION
  private ::               ALBEDO
  private ::                         SNOW_AGE
  private ::                         SNOWALB_BATS  
  private ::                         SNOWALB_CLASS
  private ::                         GROUNDALB
  private ::                         TWOSTREAM
  private ::               SURRAD
  private ::       VEGE_FLUX
  private ::               SFCDIF1                  
  private ::               SFCDIF2                
  private ::               STOMATA                  
  private ::               CANRES                  
  private ::               ESAT
  private ::               RAGRB
  private ::       BARE_FLUX
  private ::       TSNOSOI
  private ::               HRT
  private ::               HSTEP   
  private ::                         ROSR12
  private ::       PHASECHANGE
  private ::               FRH2O           

  private :: WATER
  private ::       CANWATER
  private ::       SNOWWATER
  private ::               SNOWFALL
  private ::               COMBINE
  private ::               DIVIDE
  private ::                         COMBO
  private ::               COMPACT
  private ::               SNOWH2O
  private ::       SOILWATER
  private ::               ZWTEQ
  private ::               INFIL
  private ::               SRT
  private ::                         WDFCND1        
  private ::                         WDFCND2       
!  private ::                         INFIL       
  private ::               SSTEP
  private ::       GROUNDWATER

  private :: CARBON
  private ::       CO2FLUX
!  private ::       BVOCFLUX
!  private ::       CH4FLUX

  public  :: ERROR

contains
!
! ==================================================================================================
  SUBROUTINE SFLX (ICE    ,IST    ,VEGTYP ,ISC    ,NSNOW  ,NSOIL  , & !in
                   ZSOIL  ,DT     ,Q2     ,SFCTMP ,UU     ,VV     , & !in
                   SOLDN  ,LWDN   ,PRCP   ,ZLVL   ,CO2AIR ,O2AIR  , & !in
                   COSZ   ,TBOT   ,FOLN   ,SFCPRS ,IMONTH ,IDAY   , & !in
                   SHDFAC ,LAT    ,Z0     ,VGM    ,SMCR   ,VGPSAT , & !in
                   IX     ,IY     ,         & !in
                   BEXP   ,DWSAT  ,DKSAT  ,F1     ,PSISAT ,QUARTZ , & !in
                   SMCDRY ,SMCMAX ,SMCREF ,SMCWLT ,HS     ,RGL    , & !in
                   RSMIN  ,NROOT  ,SLOPE  ,KDT    ,FRZX   ,         & !in
                   EAH    ,TAH    ,FWET   ,FICEOLD,QSNOW  ,SNEQVO , & !inout
                   ISNOW  ,ZSNSO  ,CANLIQ ,CANICE ,SNOWH  ,SNEQV  , & !inout
                   SNICE  ,SNLIQ  ,TV     ,TG     ,STC    ,SH2O   , & !inout
                   SMC    ,ZWT    ,WA     ,WT     ,WSLAKE ,LFMASS , & !inout
                   ROOTMS ,STMASS ,WOOD   ,SOC    ,WDOC   ,DDOC   , & !inout
                   MIC    ,WENZ   ,DENZ   ,SO2    ,LAI    ,SAI    , & !inout
                   ALBOLD ,CM     ,CH     ,SICE   ,MQ     ,KR     , & !inout
                   FROOT  ,RTMASS , & !inout
                   FSA    ,FSR    ,FIRA   ,FSH    ,SSOIL  ,FCEV   , & !out
                   FGEV   ,FCTR   ,TRAD   ,ECAN   ,ETRAN  ,EDIR   , & !out
                   RUNSRF ,RUNSUB ,APAR   ,PSN    ,SAV    ,SAG    , & !out
                   FSNO   ,NEE    ,GPP    ,NPP    ,T2M    ,FVEG   , & !out
                   QCO2   ,VMAX   ,KM     ,VMAXUP ,KMUP   ,EPSLON , & !out
                   QIN    ,NDVI   ,SWDOWN ,QROOT  ,SADR   ,PSI    , & !out
                   QSUBCAN,QSUBGRD,RS     ,RSURF  )  !out

! --------------------------------------------------------------------------------------------------
! Code history:
! Initial code: Guo-Yue Niu, Oct. 2007
! --------------------------------------------------------------------------------------------------
  USE VEG_PARAMETERS
  USE RAD_PARAMETERS
! --------------------------------------------------------------------------------------------------
  implicit none
! --------------------------------------------------------------------------------------------------
! input
  INTEGER                        , INTENT(IN)    :: IX     !grid index in e-w direction
  INTEGER                        , INTENT(IN)    :: IY     !grid index in n-s direction
  INTEGER                        , INTENT(IN)    :: IMONTH !month index
  INTEGER                        , INTENT(IN)    :: IDAY   !day index
  INTEGER                        , INTENT(IN)    :: ICE    !ice (ice = 1)
  INTEGER                        , INTENT(IN)    :: IST    !surface type 1->soil; 2->lake
  INTEGER                        , INTENT(IN)    :: VEGTYP !vegetation type 
  INTEGER                        , INTENT(IN)    :: ISC    !soil color type (1-lighest; 8-darkest)
  INTEGER                        , INTENT(IN)    :: NSNOW  !maximum no. of snow layers        
  INTEGER                        , INTENT(IN)    :: NSOIL  !no. of soil layers        
  REAL                           , INTENT(IN)    :: DT     !time step [sec]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN)    :: ZSOIL  !layer-bottom depth from soil surf (m)
  REAL                           , INTENT(IN)    :: Q2     !mixing ratio (kg/kg)
  REAL                           , INTENT(IN)    :: SFCTMP !surface air temperature [K]
  REAL                           , INTENT(IN)    :: UU     !wind speed in eastward dir (m/s)
  REAL                           , INTENT(IN)    :: VV     !wind speed in northward dir (m/s)
  REAL                           , INTENT(IN)    :: SOLDN  !downward shortwave radiation (w/m2)
  REAL                           , INTENT(IN)    :: PRCP   !precipitation rate (kg m-2 s-1)
  REAL                           , INTENT(IN)    :: LWDN   !downward longwave radiation (w/m2)
  REAL                           , INTENT(IN)    :: SFCPRS !pressure (pa)
  REAL                           , INTENT(INOUT) :: ZLVL   !reference height (m)
  REAL                           , INTENT(IN)    :: COSZ   !cosine solar zenith angle [0-1]
  REAL                           , INTENT(IN)    :: TBOT   !bottom condition for soil temp. [K]
  REAL                           , INTENT(IN)    :: FOLN   !foliage nitrogen (%) [1-saturated]
  REAL                           , INTENT(IN)    :: Z0     !roughness length (m)
  REAL                           , INTENT(IN)    :: SHDFAC !green vegetation fraction [0.0-1.0]
  REAL                           , INTENT(IN)    :: LAT    !latitude (radians)
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(IN)    :: FICEOLD!ice fraction at last timestep

  INTEGER ,INTENT(IN) :: NROOT        !rooting depth [as number of layers]
  REAL    ,INTENT(IN) :: RGL          !parameter used in radiation stress function
  REAL    ,INTENT(IN) :: RSMIN        !minimum canopy Resistance [s/m]
  REAL    ,INTENT(IN) :: HS           !parameter used in vapor pressure deficit function
  REAL    ,INTENT(IN) :: SMCDRY       !soil moisture where direct evap from top layer ends [m3/m3]
  REAL    ,INTENT(IN) :: F1           !soil thermal diffusivity/conductivity coef
  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: SMCWLT       !wilting point soil moisture (volumetric)
  REAL    ,INTENT(IN) :: SMCREF       !reference soil moisture (field capacity) (volumetric)
  REAL    ,INTENT(IN) :: PSISAT       !saturated soil matric potential
  REAL    ,INTENT(IN) :: BEXP         !B parameter
  REAL    ,INTENT(IN), DIMENSION(       1:NSOIL) :: DKSAT        !saturated soil hydraulic conductivity
  REAL    ,INTENT(IN) :: DWSAT        !saturated soil hydraulic diffusivity
  REAL    ,INTENT(IN) :: QUARTZ       !soil quartz content
  REAL    ,INTENT(IN) :: SLOPE        !slope index (0 - 1)
  REAL    ,INTENT(IN) :: KDT, FRZX
  REAL    ,INTENT(IN) :: VGM          !1.-1./n, van Genuchten n
  REAL    ,INTENT(IN) :: SMCR         !residual moisture [m3/m3]
  REAL    ,INTENT(IN) :: VGPSAT       !VG PSAT

! input/output : need arbitary intial values
  REAL                           , INTENT(INOUT) :: QSNOW  !snowfall [mm/s]
  REAL                           , INTENT(INOUT) :: FWET   !wetted or snowed fraction of canopy (-)
  REAL                           , INTENT(INOUT) :: SNEQVO !snow mass at last time step (mm)
  REAL                           , INTENT(INOUT) :: EAH    !canopy air vapor pressure (pa)
  REAL                           , INTENT(INOUT) :: TAH    !canopy air tmeperature (k)
  REAL                           , INTENT(INOUT) :: ALBOLD !snow albedo at last time step (CLASS type)
  REAL                           , INTENT(INOUT) :: CM     !momentum drag coefficient
  REAL                           , INTENT(INOUT) :: CH     !sensible heat exchange coefficient

  REAL                           , INTENT(INOUT) :: MQ     !water stored in living tissues [mm]
  REAL, DIMENSION(       1:NSOIL), INTENT(OUT)   :: SADR   !root surface area density [m2/m3]
  REAL                           , INTENT(INOUT) :: KR     !
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: FROOT  !root fraction [-]
  REAL                           , INTENT(INOUT) :: RTMASS !root mass [g/m2]

! prognostic variables
  INTEGER                        , INTENT(INOUT) :: ISNOW  !actual no. of snow layers [-]
  REAL                           , INTENT(INOUT) :: CANLIQ !intercepted liquid water (mm)
  REAL                           , INTENT(INOUT) :: CANICE !intercepted ice mass (mm)
  REAL                           , INTENT(INOUT) :: SNEQV  !snow water eqv. [mm]
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SMC    !soil moisture (ice + liq.) [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SICE   !soil ice content (m3/m3)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: ZSNSO  !layer-bottom depth from snow surf [m]
  REAL                           , INTENT(INOUT) :: SNOWH  !snow height [m]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNICE  !snow layer ice [mm]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNLIQ  !snow layer liquid water [mm]
  REAL                           , INTENT(INOUT) :: TV     !vegetation temperature (k)
  REAL                           , INTENT(INOUT) :: TG     !ground temperature (k)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC    !snow/soil temperature [k]
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SH2O   !liquid soil moisture [m3/m3]
  REAL                           , INTENT(INOUT) :: ZWT    !depth to water table [m]
  REAL                           , INTENT(INOUT) :: WA     !water storage in aquifer [mm]
  REAL                           , INTENT(INOUT) :: WT     !water in aquifer&saturated soil [mm]

! output
  REAL                           , INTENT(OUT)   :: FSA    !total absorbed solar radiation (w/m2)
  REAL                           , INTENT(OUT)   :: FSR    !total reflected solar radiation (w/m2)
  REAL                           , INTENT(OUT)   :: FIRA   !total net LW rad (w/m2)  [+ to atm]
  REAL                           , INTENT(OUT)   :: FSH    !total sensible heat (w/m2) [+ to atm]
  REAL                           , INTENT(OUT)   :: FCEV   !canopy evap heat (w/m2) [+ to atm]
  REAL                           , INTENT(OUT)   :: FGEV   !ground evap heat (w/m2) [+ to atm]
  REAL                           , INTENT(OUT)   :: FCTR   !transpiration heat (w/m2) [+ to atm]
  REAL                           , INTENT(OUT)   :: SSOIL  !ground heat flux (w/m2)   [+ to soil]
  REAL                           , INTENT(OUT)   :: TRAD   !surface radiative temperature (k)
  REAL                           , INTENT(OUT)   :: T2M    !2-meter air temperature (k)
  REAL                           , INTENT(OUT)   :: ECAN   !evaporation of intercepted water (mm/s)
  REAL                           , INTENT(OUT)   :: ETRAN  !transpiration rate (mm/s)
  REAL                           , INTENT(OUT)   :: EDIR   !soil surface evaporation rate (mm/s]
  REAL                           , INTENT(OUT)   :: RUNSRF !surface runoff [mm/s] 
  REAL                           , INTENT(OUT)   :: RUNSUB !baseflow (saturation excess) [mm/s]
  REAL                           , INTENT(OUT)   :: PSN    !total photosynthesis (umol co2/m2/s) [+]
  REAL                           , INTENT(OUT)   :: APAR   !photosyn active energy by canopy (w/m2)
  REAL                           , INTENT(OUT)   :: SAV    !solar rad absorbed by veg. (w/m2)
  REAL                           , INTENT(OUT)   :: SAG    !solar rad absorbed by ground (w/m2)
  REAL                           , INTENT(OUT)   :: FSNO   !snow cover fraction on the ground (-)
  REAL                           , INTENT(OUT)   :: FVEG   !green vegetation fraction [0.0-1.0]
  REAL                           , INTENT(OUT)   :: SWDOWN !downward solar [w/m2]
  REAL, DIMENSION(       1:NSOIL), INTENT(OUT)   :: QROOT  !water uptake [m/s]
  REAL, DIMENSION(       1:NSOIL), INTENT(OUT)   :: PSI    !surface layer soil matrix potential (m)
  REAL,                            INTENT(OUT)   :: QSUBCAN!sublimation (+ and -) from the canopy snow (mm/s)
  REAL,                            INTENT(OUT)   :: QSUBGRD!sublimation (+ and -) from the ground snow (mm/s)
  REAL                           , INTENT(OUT)   :: RS     !stomatal resistance (s/m)
  REAL                           , INTENT(OUT)   :: RSURF  !soil surface resistance (s/m)

! local
  INTEGER                                        :: IZ     !do-loop index
  INTEGER, DIMENSION(-NSNOW+1:NSOIL)             :: IMELT  !phase change index [1-melt; 2-freeze]
  REAL                                           :: CMC    !intercepted water (CANICE+CANLIQ) (mm)
  REAL                                           :: QMELT  !snowmelt [mm/s]
  REAL                                           :: PONDING!surface ponding [mm]
  REAL                                           :: TAUX   !wind stress: e-w (n/m2)
  REAL                                           :: TAUY   !wind stress: n-s (n/m2)
  REAL                                           :: RHOAIR !density air (kg/m3)
!  REAL, DIMENSION(       1:    5)               :: VOCFLX !voc fluxes [ug C m-2 h-1]
  REAL, DIMENSION(-NSNOW+1:NSOIL)                :: DZSNSO !snow/soil layer thickness [m]
  REAL                                           :: THAIR  !potential temperature (k)
  REAL                                           :: QAIR   !specific humidity (kg/kg) (q2/(1+q2))
  REAL                                           :: EAIR   !vapor pressure air (pa)
  REAL                                           :: TS     !surface temperature (k)
  REAL, DIMENSION(       1:    2)                :: SOLAD  !incoming direct solar rad (w/m2)
  REAL, DIMENSION(       1:    2)                :: SOLAI  !incoming diffuse solar rad (w/m2)
  REAL                                           :: QPRECC !convective precipitation (mm/s)
  REAL                                           :: QPRECL !large-scale precipitation (mm/s)
  REAL                                           :: IGS    !growing season index (0=off, 1=on)
  REAL                                           :: ELAI   !leaf area index, after burying by snow
  REAL                                           :: ESAI   !stem area index, after burying by snow
  REAL                                           :: BEVAP  !soil water evaporation factor (0 - 1)
  REAL, DIMENSION(       1:NSOIL)                :: BTRANI !Soil water transpiration factor (0 - 1)
  REAL                                           :: BTRAN  !soil water transpiration factor (0 - 1)
  REAL                                           :: HTOP   !top of canopy layer (m)
  REAL                                           :: QIN    !groundwater recharge [mm/s]
  REAL                                           :: QDIS   !groundwater discharge [mm/s]
  REAL, DIMENSION(-NSNOW+1:    0)                :: SNICEV !partial volume ice of snow [m3/m3]
  REAL, DIMENSION(-NSNOW+1:    0)                :: SNLIQV !partial volume liq of snow [m3/m3]
  REAL, DIMENSION(-NSNOW+1:    0)                :: EPORE  !effective porosity [m3/m3]
  REAL                                           :: TOTSC  !total soil carbon (g/m2)
  REAL                                           :: TOTLB  !total living carbon (g/m2)
  REAL                                           :: WSLAKE !lake water storage (can be neg.) (mm)
  REAL                                           :: QDEW   !ground surface dew rate [mm/s]
  REAL                                           :: QVAP   !ground surface evap. rate [mm/s]
  REAL                                           :: LATHEA !latent heat [j/kg]
  REAL                                           :: ALBEDO !surface albedo [-]
  REAL                                           :: BEG_WB !water storage at begin of a step [mm]
  REAL, DIMENSION(       1:NSOIL)                :: WCND   !hydraulic conductivity (m/s)

! carbon
! inputs
  REAL                           , INTENT(IN)    :: CO2AIR !atmospheric co2 concentration (pa)
  REAL                           , INTENT(IN)    :: O2AIR  !atmospheric o2 concentration (pa)

! inputs and outputs : prognostic variables
  REAL                        , INTENT(INOUT)    :: LFMASS !leaf mass [g/m2]
  REAL,DIMENSION(    1:NSOIL) , INTENT(INOUT)    :: ROOTMS !mass of fine roots [g/m2]
  REAL                        , INTENT(INOUT)    :: STMASS !stem mass [g/m2]
  REAL                        , INTENT(INOUT)    :: WOOD   !mass of wood (incl. woody roots) [g/m2]
  REAL                        , INTENT(INOUT)    :: LAI    !leaf area index [-]
  REAL                        , INTENT(INOUT)    :: SAI    !stem area index [-]
  REAL                        , INTENT(INOUT)    :: SOC    !soil organic carbon [g C/m2]
  REAL                        , INTENT(INOUT)    :: WDOC   !wet dissolved organic carbon [g C/m2]
  REAL                        , INTENT(INOUT)    :: DDOC   !dry dissolved organic carbon [g C/m2]
  REAL                        , INTENT(INOUT)    :: MIC    !microbial biomass [g C/m2]
  REAL                        , INTENT(INOUT)    :: WENZ   !wet soil enzyme [g C/m2]
  REAL                        , INTENT(INOUT)    :: DENZ   !dry soil enzyme [g C/m2]
  REAL                        , INTENT(INOUT)    :: SO2    !soil o2  [umol/mol]

! outputs
  REAL                          , INTENT(OUT)    :: NDVI   !NDVI
  REAL                          , INTENT(OUT)    :: QCO2   !co2 efflux at soil surf.[g C/m2/s]
  REAL                          , INTENT(OUT)    :: NEE    !net ecosys exchange [g/m2/s C]
  REAL                          , INTENT(OUT)    :: GPP    !net  assimilation [g/m2/s C]
  REAL                          , INTENT(OUT)    :: NPP    !net primary productivity [g/m2/s C]
  REAL                                           :: AUTORS !net ecosystem respiration [g/m2/s C]
  REAL                                           :: HETERS !organic respiration [g/m2/s C]
  real                          , INTENT(OUT)    :: VMAX   !maximum SOC decomposition rate per
                                                           !unit microbial biomass [g C m-2 [g CMIC m-2]-1 s-1]
  real                          , INTENT(OUT)    :: VMAXUP !maximum DOC uptake rate [g CDOC m-2 [g CMIC m-2]-1 s-1]
  real                          , INTENT(OUT)    :: KM     !Michaelis-Menten constant [g C m-2] for SOC  decomposition
  real                          , INTENT(OUT)    :: KMUP   !Michaelis-Menten constant [g C m-2] for DOC uptake
  real                          , INTENT(OUT)    :: EPSLON !carbon use efficiency

  REAL                                           :: TROOT  !root-zone averaged temperature (k)
!  REAL                                           :: DENCO2 !surface air co2 (g c/m3)
!  REAL                                           :: DENO2  !surface air o2   (g c/m3)
  REAl, DIMENSION(       1:NSOIL)                :: SH2OOLD!liq soil water at previous time
  REAl, DIMENSION(       1:NSOIL)                :: SICEOLD!ice soil water at previous time
  REAL                                           :: QSEVA  !soil surface evap rate [m/s] 
  REAL, DIMENSION(       1:NSOIL)                :: ETRANI !transpiration rate [m/s] [+]
  REAL, DIMENSION(       1:NSOIL)                :: LWFLUX !liq. water flux at bottom of soil layers [m/s]
  REAL                                           :: PDDUM  !surface infiltration rate [m/s]
  REAL                                           :: TWET   !wet-bulb T (C)
! --------------------------------------------------------------------------------------------------
! re-process atmospheric forcing

   CALL ATM (SFCPRS ,SFCTMP ,Q2     ,PRCP   ,SOLDN  ,COSZ   ,THAIR  , & 
             QAIR   ,EAIR   ,RHOAIR ,QPRECC ,QPRECL ,SOLAD  ,SOLAI  , &
             SWDOWN )

! snow/soil layer thickness (m)

     DO IZ = ISNOW+1, NSOIL
         IF(IZ == ISNOW+1) THEN
           DZSNSO(IZ) = - ZSNSO(IZ)
         ELSE
           DZSNSO(IZ) = ZSNSO(IZ-1) - ZSNSO(IZ)
         END IF
     END DO

! root-zone temperature

     TROOT  = 0.
     DO IZ=1,NROOT
        TROOT = TROOT + STC(IZ)*DZSNSO(IZ)/(-ZSOIL(NROOT))
     ENDDO

! total water storage for water balance check
    
     IF(IST == 1) THEN
     IF (OPT_ROOT == 1) BEG_WB = CANLIQ + CANICE + SNEQV + WA + MQ
     IF (OPT_ROOT == 2) BEG_WB = CANLIQ + CANICE + SNEQV + WA
     DO IZ = 1,NSOIL
        BEG_WB = BEG_WB + SMC(IZ) * DZSNSO(IZ) * 1000.
     END DO
     END IF

! vegetation phonology

     !input GVF should be consistent with LAI
     IF(DVEG == 1) THEN
        FVEG = SHDFAC
        IF(FVEG <= 0.05) FVEG = 0.05
     ELSE
        FVEG = 1.-EXP(-0.52*(LAI+SAI))
        IF(FVEG <= 0.05) FVEG = 0.05
     ENDIF

     CALL PHONOLOGY (VEGTYP,IMONTH ,IDAY   ,SNOWH  ,TV     ,LAT   , & !in
                     LAI   ,SAI    ,TROOT  ,                & !in
                     HTOP  ,ELAI   ,ESAI   ,IGS    )   !out

! compute energy budget (momentum & energy fluxes and phase changes) 

    CALL ENERGY (ICE    ,VEGTYP ,IST    ,ISC    ,NSNOW  ,NSOIL  , & !in
                 ISNOW  ,NROOT  ,DT     ,RHOAIR ,SFCPRS ,QAIR   , & !in
                 SFCTMP ,THAIR  ,LWDN   ,UU     ,VV     ,ZLVL   , & !in
                 CO2AIR ,O2AIR  ,SOLAD  ,SOLAI  ,COSZ   ,IGS    , & !in
                 EAIR   ,HTOP   ,TBOT   ,ZBOT   ,ZSNSO  ,ZSOIL  , & !in
                 ELAI   ,ESAI   ,CSOIL  ,FWET   ,FOLN   ,Z0     , & !in
                 FVEG   ,BEXP   ,PSISAT ,SMCMAX ,SMCREF ,SMCWLT , & !in
                 QUARTZ ,RGL    ,RSMIN  ,HS     ,VGM    ,SMCR   , & !in
                 VGPSAT ,PRCP   ,ix     ,iy     , & !in
                 QSNOW  ,DZSNSO ,LAT    ,CANLIQ ,CANICE ,FROOT  , & !in
                 KR     , & !in
                 IMELT  ,SNICEV ,SNLIQV ,EPORE  ,T2M    ,FSNO   , & !out
                 SAV    ,SAG    ,QMELT  ,FSA    ,FSR    ,TAUX   , & !out
                 TAUY   ,FIRA   ,FSH    ,FCEV   ,FGEV   ,FCTR   , & !out
                 TRAD   ,PSN    ,APAR   ,SSOIL  ,BTRANI ,BTRAN  , & !out
                 PONDING,TS     ,LATHEA ,NDVI   ,PSI    ,TWET   , & !out
                 TV     ,TG     ,STC    ,SNOWH  ,EAH    ,TAH    , & !inout
                 SNEQVO ,SNEQV  ,SH2O   ,SMC    ,SNICE  ,SNLIQ  , & !inout
                 ALBOLD ,CM     ,CH     ,RS     ,RSURF  )   !inout

    SICE(:) = MAX(0.0, SMC(:) - SH2O(:))   
    SNEQVO  = SNEQV

    QVAP = MAX( FGEV/LATHEA, 0.)       ! positive part of fgev
    QDEW = ABS( MIN(FGEV/LATHEA, 0.))  ! negative part of fgev
    EDIR = QVAP - QDEW

! compute water budgets (water storages, ET components, and runoff)

    SH2OOLD(1:NSOIL) = SH2O(1:NSOIL)
    SICEOLD(1:NSOIL) = SICE(1:NSOIL)

     CALL WATER (VEGTYP ,NSNOW  ,NSOIL  ,IMELT  ,DT     ,UU     , & !in
                 VV     ,FCEV   ,FCTR   ,QPRECC ,QPRECL ,ELAI   , & !in
                 ESAI   ,SFCTMP ,QVAP   ,QDEW   ,ZSOIL  ,BTRANI , & !in
                 FICEOLD,PONDING,TG     ,IST    ,FVEG   ,NROOT  , & !in
                 SMCMAX ,PSISAT ,DKSAT  ,DWSAT  ,SMCWLT ,SLOPE  , & !in
                 BEXP   ,KDT    ,FRZX   ,MQ     ,TWET   ,SMCR   , & !in
                 VGM    ,VGPSAT ,ix     ,iy     ,         & !in
                 ISNOW  ,CANLIQ ,CANICE ,TV     ,SNOWH  ,SNEQV  , & !inout
                 SNICE  ,SNLIQ  ,STC    ,ZSNSO  ,SH2O   ,SMC    , & !inout
                 SICE   ,ZWT    ,WA     ,WT     ,DZSNSO ,WSLAKE , & !inout
                 CMC    ,ECAN   ,ETRAN  ,FWET   ,RUNSRF ,RUNSUB , & !out
                 QIN    ,QDIS   ,QSNOW  ,QSEVA  ,ETRANI ,PDDUM  , & !out
                 LWFLUX ,WCND   ,QSUBCAN,QSUBGRD)                           !out

! compute carbon budgets (carbon storages and co2 & bvoc fluxes)

   IF (DVEG == 2) THEN
    CALL CARBON (NSNOW  ,NSOIL  ,VEGTYP ,NROOT  ,DT     ,ZSOIL  , & !in
                 DZSNSO ,STC    ,SMC    ,TV     ,TG     ,PSN    , & !in
                 FOLN   ,SMCMAX ,BTRAN  ,APAR   ,FVEG   ,IGS    , & !in
                 TROOT  ,IST    ,IMONTH ,LAT    ,SH2OOLD,SICEOLD, & !in 
                 SH2O   ,SICE   ,KR     ,PSISAT ,DKSAT  ,BEXP   , & !in
                 ix     ,iy     ,PSI    ,ETRAN  ,SMCWLT ,SMCREF , & !in
                 LFMASS ,ROOTMS ,STMASS ,WOOD   ,SOC    ,WDOC   , & !inout
                 DDOC   ,MIC    ,WENZ   ,DENZ   ,SO2    ,MQ     , & !inout
                 SADR   ,RTMASS , & !inout
                 GPP    ,NPP    ,NEE    ,AUTORS ,HETERS ,TOTSC  , & !out
                 TOTLB  ,LAI    ,SAI    ,QCO2   ,VMAX   ,KM     , & !out
                 VMAXUP ,KMUP   ,EPSLON ,QROOT  ,FROOT  )   !out
   END IF

   DO IZ = 1,NSOIL
         SMC(IZ) = SH2O(IZ) + SICE(IZ)
   END DO

!   IF(IX == 73.and. IY == 97) THEN
!   write(*,*) 'ZWT====================',IST,ZWT,RUNSRF*DT,EDIR*DT,(SH2O(IZ),IZ=1,4)
!      !write(107,*) ETRAN*86400., ECAN*86400., EDIR*86400., (RUNSRF+RUNSUB)*86400., &
!      !             GPP,NPP,NEE,LAI,QCO2,BTRAN,(SH2O(IZ),IZ=1,4)
!   END IF

! water and energy balance check

      CALL ERROR (SWDOWN ,FSA    ,FSR    ,FIRA   ,FSH    ,FCEV   , & !in
                  FGEV   ,FCTR   ,SSOIL  ,BEG_WB ,CANLIQ ,CANICE , & !in
                  SNEQV  ,WA     ,SMC    ,DZSNSO ,PRCP   ,ECAN   , & !in
                  ETRAN  ,EDIR   ,RUNSRF ,RUNSUB ,DT     ,NSOIL  , & !in
                  NSNOW  ,IST    ,ix     ,iy     ,FVEG   ,SAV    , & !in
                  SAG    ,MQ     ,VEGTYP )

    IF(SWDOWN.NE.0.) THEN
      ALBEDO = FSR / SWDOWN
    ELSE
      ALBEDO = -999.9
    END IF

  END SUBROUTINE SFLX
! ==================================================================================================
  SUBROUTINE ATM (SFCPRS ,SFCTMP ,Q2     ,PRCP   ,SOLDN  ,COSZ   ,THAIR  , &
                  QAIR   ,EAIR   ,RHOAIR ,QPRECC ,QPRECL ,SOLAD  ,SOLAI  , &
                  SWDOWN )     
! --------------------------------------------------------------------------------------------------
! re-process atmospheric forcing
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! inputs

  REAL                          , INTENT(IN)  :: SFCPRS !pressure (pa)
  REAL                          , INTENT(IN)  :: SFCTMP !surface air temperature [k]
  REAL                          , INTENT(IN)  :: Q2     !mixing ratio (kg/kg)
  REAL                          , INTENT(IN)  :: SOLDN  !downward shortwave radiation (w/m2)
  REAL                          , INTENT(IN)  :: PRCP   !precipitation rate (kg m-2 s-1)
  REAL                          , INTENT(IN)  :: COSZ   !cosine solar zenith angle [0-1]

! outputs

  REAL                          , INTENT(OUT) :: THAIR  !potential temperature (k)
  REAL                          , INTENT(OUT) :: QAIR   !specific humidity (kg/kg) (q2/(1+q2))
  REAL                          , INTENT(OUT) :: EAIR   !vapor pressure air (pa)
  REAL, DIMENSION(       1:   2), INTENT(OUT) :: SOLAD  !incoming direct solar radiation (w/m2)
  REAL, DIMENSION(       1:   2), INTENT(OUT) :: SOLAI  !incoming diffuse solar radiation (w/m2)
  REAL                          , INTENT(OUT) :: QPRECC !convective precipitation (mm/s)
  REAL                          , INTENT(OUT) :: QPRECL !large-scale precipitation (mm/s)
  REAL                          , INTENT(OUT) :: RHOAIR !density air (kg/m3)
  REAL                          , INTENT(OUT) :: SWDOWN !downward solar filtered by sun angle [w/m2]

!locals

  REAL                                        :: PAIR   !atm bottom level pressure (pa)
! --------------------------------------------------------------------------------------------------

       PAIR   = SFCPRS                   ! atm bottom level pressure (pa)
       THAIR  = SFCTMP * (SFCPRS/PAIR)**(RAIR/CPAIR) 
!       QAIR   = Q2 / (1.0+Q2)           ! mixing ratio to specific humidity [kg/kg]
       QAIR   = Q2                       ! GLDAS forcing: Q2 = specific humidity [kg/kg]
       EAIR   = QAIR*SFCPRS / (0.622+0.378*QAIR)
       RHOAIR = (SFCPRS-0.378*EAIR) / (RAIR*SFCTMP)

       QPRECC = 0.10 * PRCP          ! should be from the atmospheric model
       QPRECL = 0.90 * PRCP          ! should be from the atmospheric model

       IF(COSZ <= 0.) THEN 
          SWDOWN = 0.
       ELSE
          SWDOWN = SOLDN
       END IF 

       SOLAD(1) = SWDOWN*0.7*0.5     ! direct  vis
       SOLAD(2) = SWDOWN*0.7*0.5     ! direct  nir
       SOLAI(1) = SWDOWN*0.3*0.5     ! diffuse vis
       SOLAI(2) = SWDOWN*0.3*0.5     ! diffuse nir

  END SUBROUTINE ATM
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE PHONOLOGY (VEGTYP,IMONTH ,IDAY   ,SNOWH  ,TV     ,LAT   , & !in
                        LAI   ,SAI    ,TROOT  ,                & !in
                        HTOP  ,ELAI   ,ESAI   ,IGS    )   !out
! --------------------------------------------------------------------------------------------------
! vegetation phenology considering vegeation canopy being buries by snow and evolution in time
! --------------------------------------------------------------------------------------------------
  USE VEG_PARAMETERS
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! inputs
  INTEGER                   , INTENT(IN) :: VEGTYP !vegetation type 
  INTEGER                   , INTENT(IN) :: IMONTH !month index
  INTEGER                   , INTENT(IN) :: IDAY   !day index
  REAL                      , INTENT(IN) :: SNOWH  !snow height [m]
  REAL                      , INTENT(IN) :: TV     !vegetation temperature (k)
  REAL                      , INTENT(IN) :: LAT    !latitude (radians)
  real                      , INTENT(IN) :: TROOT  !root-zone averaged temperature (k)
  REAL                   , INTENT(INOUT) :: LAI    !LAI, unadjusted for burying by snow
  REAL                   , INTENT(INOUT) :: SAI    !SAI, unadjusted for burying by snow

! outputs
  REAL                      ,INTENT(OUT) :: HTOP   !top of canopy layer (m)
  REAL                      ,INTENT(OUT) :: ELAI   !leaf area index, after burying by snow
  REAL                      ,INTENT(OUT) :: ESAI   !stem area index, after burying by snow
  REAL                      ,INTENT(OUT) :: IGS    !growing season index (0=off, 1=on)

! locals

  REAL                                   :: DB     !thickness of canopy buried by snow (m)
  REAL                                   :: FB     !fraction of canopy buried by snow
  REAL                                   :: SNOWHC !critical snow depth at which short vege
                                                   !is fully covered by snow

  INTEGER                                :: K       !index
  INTEGER                                :: NDAYN   !days in current year since jan 1: 1, ..., 365
  INTEGER                                :: NDAYS   !ndayn shifted 6 mon for SH
  INTEGER                                :: IT1,IT2 !interpolation months
  REAL                                   :: DAY     !current day of year
  REAL                                   :: WT1,WT2 !interpolation weights
  REAL                                   :: T       !current month (1.00, ..., 12.00)
  INTEGER                                :: NDAYPM(12)  !days per month
  DATA NDAYPM /31,28,31,30,31,30,31,31,30,31,30,31/
  SAVE NDAYPM
! --------------------------------------------------------------------------------------------------
! ndayn = days in current year since jan 1: 1, ..., 365
! ndays = ndayn shifted 6 mon for SH: 1 -> 183; 183 -> 365; 184 -> 1; 365 -> 182

   IF(DVEG == 1) THEN
     NDAYN = 0
     DO K = 1, IMONTH
         NDAYN = NDAYN + NDAYPM(K)
     END DO
     NDAYN = NDAYN - NDAYPM(IMONTH) + IDAY
     NDAYS = MOD (NDAYN-1+365/2, 365) + 1

     IF (LAT >= 0.) THEN
        DAY = NDAYN
     ELSE
        DAY = NDAYS
     END IF
     T = 12. * (DAY-0.5)/365.
     IT1 = T + 0.5
     IT2 = IT1 + 1
     WT1 = (IT1+0.5) - T
     WT2 = 1.-WT1
     IF (IT1 .LT.  1) IT1 = 12
     IF (IT2 .GT. 12) IT2 = 1

     LAI = WT1*LAIM(VEGTYP,IT1) + WT2*LAIM(VEGTYP,IT2)
     SAI = WT1*SAIM(VEGTYP,IT1) + WT2*SAIM(VEGTYP,IT2)
   END IF

     IF(VEGTYP == 16 .OR. VEGTYP == 19 .OR. VEGTYP ==24)  THEN
        LAI  = 0.
        SAI  = 0.
     END IF

!buried by snow

     DB = MIN( MAX(SNOWH - HVB(VEGTYP),0.), HVT(VEGTYP)-HVB(VEGTYP) )
     FB = DB / MAX(1.E-06,HVT(VEGTYP)-HVB(VEGTYP))

     IF(HVT(VEGTYP)> 0. .AND. HVT(VEGTYP) <= 0.5) THEN
       SNOWHC = HVT(VEGTYP)*EXP(-SNOWH/0.1)
       FB     = MIN(SNOWH,SNOWHC)/SNOWHC
     END IF

     ELAI =  LAI*(1.-FB)
     ESAI =  SAI*(1.-FB)

     IF (TV .GT. TMIN(VEGTYP)) THEN
         IGS = 1.
     ELSE
         IGS = 0.
     END IF

     HTOP = HVT(VEGTYP)

  END SUBROUTINE PHONOLOGY
! ==================================================================================================
  SUBROUTINE ERROR (SWDOWN ,FSA    ,FSR    ,FIRA   ,FSH    ,FCEV   , &
                    FGEV   ,FCTR   ,SSOIL  ,BEG_WB ,CANLIQ ,CANICE , &
                    SNEQV  ,WA     ,SMC    ,DZSNSO ,PRCP   ,ECAN   , &
                    ETRAN  ,EDIR   ,RUNSRF ,RUNSUB ,DT     ,NSOIL  , &
                    NSNOW  ,IST    ,ix     ,iy     ,FVEG   ,SAV    , & 
                    SAG    ,MQ     ,VEGTYP )
! --------------------------------------------------------------------------------------------------
! check surface energy balance and water balance
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! inputs
  INTEGER                        , INTENT(IN)    :: VEGTYP !vegetation type
  INTEGER                        , INTENT(IN) :: NSNOW  !maximum no. of snow layers        
  INTEGER                        , INTENT(IN) :: NSOIL  !number of soil layers
  INTEGER                        , INTENT(IN) :: IST    !surface type 1->soil; 2->lake
  INTEGER                        , INTENT(IN) :: IX     !grid index in e-w direction
  INTEGER                        , INTENT(IN) :: IY     !grid index in n-s direction
  REAL                           , INTENT(IN) :: SWDOWN !downward solar filtered by sun angle [w/m2]
  REAL                           , INTENT(IN) :: FSA    !total absorbed solar radiation (w/m2)
  REAL                           , INTENT(IN) :: FSR    !total reflected solar radiation (w/m2)
  REAL                           , INTENT(IN) :: FIRA   !total net longwave rad (w/m2)  [+ to atm]
  REAL                           , INTENT(IN) :: FSH    !total sensible heat (w/m2)     [+ to atm]
  REAL                           , INTENT(IN) :: FCEV   !canopy evaporation heat (w/m2) [+ to atm]
  REAL                           , INTENT(IN) :: FGEV   !ground evaporation heat (w/m2) [+ to atm]
  REAL                           , INTENT(IN) :: FCTR   !transpiration heat flux (w/m2) [+ to atm]
  REAL                           , INTENT(IN) :: SSOIL  !ground heat flux (w/m2)        [+ to soil]

  REAL                           , INTENT(IN) :: PRCP   !precipitation rate (kg m-2 s-1)
  REAL                           , INTENT(IN) :: ECAN   !evaporation of intercepted water (mm/s)
  REAL                           , INTENT(IN) :: ETRAN  !transpiration rate (mm/s)
  REAL                           , INTENT(IN) :: EDIR   !soil surface evaporation rate[mm/s]
  REAL                           , INTENT(IN) :: RUNSRF !surface runoff [mm/s] 
  REAL                           , INTENT(IN) :: RUNSUB !baseflow (saturation excess) [mm/s]
  REAL                           , INTENT(IN) :: CANLIQ !intercepted liquid water (mm)
  REAL                           , INTENT(IN) :: CANICE !intercepted ice mass (mm)
  REAL                           , INTENT(IN) :: SNEQV  !snow water eqv. [mm]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SMC    !soil moisture (ice + liq.) [m3/m3]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DZSNSO !snow/soil layer thickness [m]
  REAL                           , INTENT(IN) :: WA     !water storage in aquifer [mm]
  REAL                           , INTENT(IN) :: DT     !time step [sec]
  REAL                           , INTENT(IN) :: BEG_WB !water storage at begin of a timesetp [mm]
  REAL                           , INTENT(IN) :: FVEG
  REAL                           , INTENT(IN) :: SAV
  REAL                           , INTENT(IN) :: SAG
  REAL                           , INTENT(IN) :: MQ     !water stored in living tissues [mm]

  INTEGER                                     :: IZ     !do-loop index
  REAL                                        :: END_WB !water storage at end of a timestep [mm]
  REAL                                        :: ERRWAT !error in water balance [mm/timestep]
  REAL                                        :: ERRENG !error in surface energy balance [w/m2]
  REAL                                        :: ERRSW  !error in shortwave radiation balance [w/m2]
! --------------------------------------------------------------------------------------------------

   ERRSW   = SWDOWN - (FSA + FSR)
   IF (ERRSW > 0.01) THEN            ! w/m2
        WRITE(*,*) 'ERRSW =',ERRSW
        STOP
   END IF

   ERRENG = FSA-(FIRA+FSH+FCEV+FGEV+FCTR+SSOIL)

   IF(ERRENG > 0.01) THEN
        WRITE(*,*) 'ERRENG =',ERRENG
        WRITE(*,'(2i6,7F10.4)')ix,iy,FSA,FIRA,FSH,FCEV,FGEV,FCTR,SSOIL
        !niuSTOP
   END IF

   IF (IST == 1) THEN                                       !soil
        IF(OPT_ROOT == 1) END_WB = CANLIQ + CANICE + SNEQV + WA + MQ
        IF(OPT_ROOT == 2) END_WB = CANLIQ + CANICE + SNEQV + WA
        DO IZ = 1,NSOIL
          END_WB = END_WB + SMC(IZ) * DZSNSO(IZ) * 1000.
        END DO
        ERRWAT = END_WB-BEG_WB-(PRCP-ECAN-ETRAN-EDIR-RUNSRF-RUNSUB)*DT

        IF(ABS(ERRWAT) > 0.1) THEN
        WRITE(*,*) 'The model is losing(-)/gaining(+) fake water'
        WRITE(*,*) 'ERRWAT =',ERRWAT
        WRITE(*,*)'ix,iy,WA,END_WB,BEG_WB,PRCP*DT,ECAN*DT,EDIR*DT,ETRAN*DT,RUNSRF*DT,RUNSUB*DT'
        WRITE(*,'(3i6,3f12.2,12f10.4)')ix,iy,VEGTYP,WA,END_WB,BEG_WB,PRCP*DT,ECAN*DT,&
                              EDIR*DT,ETRAN*DT,RUNSRF*DT,RUNSUB*DT,(SMC(IZ),IZ=1,4)
       !STOP
        END IF
   ENDIF

 END SUBROUTINE ERROR
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE ENERGY (ICE    ,VEGTYP ,IST    ,ISC    ,NSNOW  ,NSOIL  , & !in
                     ISNOW  ,NROOT  ,DT     ,RHOAIR ,SFCPRS ,QAIR   , & !in
                     SFCTMP ,THAIR  ,LWDN   ,UU     ,VV     ,ZREF   , & !in
                     CO2AIR ,O2AIR  ,SOLAD  ,SOLAI  ,COSZ   ,IGS    , & !in
                     EAIR   ,HTOP   ,TBOT   ,ZBOT   ,ZSNSO  ,ZSOIL  , & !in
                     ELAI   ,ESAI   ,CSOIL  ,FWET   ,FOLN   ,Z0     , & !in
                     FVEG   ,BEXP   ,PSISAT ,SMCMAX ,SMCREF ,SMCWLT , & !in
                     QUARTZ ,RGL    ,RSMIN  ,HS     ,VGM    ,SMCR   , & !in
                     VGPSAT ,PRCP   ,ix     ,iy     , & !in
                     QSNOW  ,DZSNSO ,LAT    ,CANLIQ ,CANICE ,FROOT  , & !in
                     KR     , & !in
                     IMELT  ,SNICEV ,SNLIQV ,EPORE  ,T2M    ,FSNO   , & !out
                     SAV    ,SAG    ,QMELT  ,FSA    ,FSR    ,TAUX   , & !out
                     TAUY   ,FIRA   ,FSH    ,FCEV   ,FGEV   ,FCTR   , & !out
                     TRAD   ,PSN    ,APAR   ,SSOIL  ,BTRANI ,BTRAN  , & !out
                     PONDING,TS     ,LATHEA ,NDVI   ,PSI    ,TWET   , & !out
                     TV     ,TG     ,STC    ,SNOWH  ,EAH    ,TAH    , & !inout
                     SNEQVO ,SNEQV  ,SH2O   ,SMC    ,SNICE  ,SNLIQ  , & !inout
                     ALBOLD ,CM     ,CH     ,RS     ,RSURF   )   !inout
! --------------------------------------------------------------------------------------------------
! --------------------------------------------------------------------------------------------------
  USE VEG_PARAMETERS
  USE RAD_PARAMETERS
! --------------------------------------------------------------------------------------------------
! we use different approaches to deal with subgrid features of radiation transfer and turbulent
! transfer. We use 'tile' approach to compute turbulent fluxes, while we use modified two-
! stream to compute radiation transfer. Tile approach, assemblying vegetation canopies together,
! may expose too much ground surfaces (either covered by snow or grass) to solar radiation. The
! modified two-stream assumes vegetation covers fully the gridcell but with gaps between tree
! crowns.
! --------------------------------------------------------------------------------------------------
! turbulence transfer : 'tile' approach to compute energy fluxes in vegetated fraction and
!                         bare fraction separately and then sum them up weighted by fraction
!                     --------------------------------------
!                    / O  O  O  O  O  O  O  O  /          / 
!                   /  |  |  |  |  |  |  |  | /          /
!                  / O  O  O  O  O  O  O  O  /          /
!                 /  |  |  |tile1|  |  |  | /  tile2   /
!                / O  O  O  O  O  O  O  O  /  bare    /
!               /  |  |  | vegetated |  | /          /
!              / O  O  O  O  O  O  O  O  /          /
!             /  |  |  |  |  |  |  |  | /          /
!            --------------------------------------
! --------------------------------------------------------------------------------------------------
! radiation transfer : modified two-stream (Yang and Friedl, 2003, JGR; Niu ang Yang, 2004, JGR)
!                     --------------------------------------  two-stream treats leaves as
!                    /   O   O   O   O   O   O   O   O    /  cloud over the entire grid-cell,
!                   /    |   |   |   |   |   |   |   |   / while the modified two-stream 
!                  /   O   O   O   O   O   O   O   O    / aggregates cloudy leaves into  
!                 /    |   |   |   |   |   |   |   |   / tree crowns with gaps (as shown in
!                /   O   O   O   O   O   O   O   O    / the left figure). We assume these
!               /    |   |   |   |   |   |   |   |   / tree crowns are evenly distributed
!              /   O   O   O   O   O   O   O   O    / within the gridcell with 100% veg
!             /    |   |   |   |   |   |   |   |   / fraction, but with gaps. The 'tile'
!            -------------------------------------- approach overlaps too much shadows.
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! inputs

  REAL    ,INTENT(IN) :: QUARTZ       !soil quartz content
  REAL    ,INTENT(IN) :: BEXP         !B parameter
  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: SMCREF       !reference soil moisture (field capacity) (volumetric)
  REAL    ,INTENT(IN) :: PSISAT       !saturated soil matric potential
  REAL    ,INTENT(IN) :: VGM          !1.-1./n, van Genuchten n
  REAL    ,INTENT(IN) :: VGPSAT       !PSAT, van Genuchten air-entry pressure
  REAL    ,INTENT(IN) :: SMCR         !residual moisture [m3/m3]
  REAL    ,INTENT(IN) :: SMCWLT       !wilting point soil moisture (volumetric)
  REAL    ,INTENT(IN) :: RGL          !parameter used in radiation stress function
  REAL    ,INTENT(IN) :: RSMIN        !minimum canopy Resistance [s/m]
  REAL    ,INTENT(IN) :: HS           !parameter used in vapor pressure deficit function

  INTEGER                           , INTENT(IN)    :: ix,iy
  INTEGER                           , INTENT(IN)    :: ICE    !ice (ice = 1)
  INTEGER                           , INTENT(IN)    :: VEGTYP !vegetation physiology type
  INTEGER                           , INTENT(IN)    :: IST    !surface type: 1->soil; 2->lake
  INTEGER                           , INTENT(IN)    :: ISC    !soil color type (1-lighest; 8-darkest)
  INTEGER                           , INTENT(IN)    :: NSNOW  !maximum no. of snow layers        
  INTEGER                           , INTENT(IN)    :: NSOIL  !number of soil layers
  INTEGER                           , INTENT(IN)    :: NROOT  !number of root layers
  INTEGER                           , INTENT(IN)    :: ISNOW  !actual no. of snow layers
  REAL                              , INTENT(IN)    :: DT     !time step [sec]
  REAL                              , INTENT(IN)    :: QSNOW  !snowfall on the ground (mm/s)
  REAL                              , INTENT(IN)    :: PRCP   !precipitation rate (kg m-2 s-1)
  REAL                              , INTENT(IN)    :: RHOAIR !density air (kg/m3)
  REAL                              , INTENT(IN)    :: EAIR   !vapor pressure air (pa)
  REAL                              , INTENT(IN)    :: SFCPRS !pressure (pa)
  REAL                              , INTENT(IN)    :: QAIR   !specific humidity (kg/kg)
  REAL                              , INTENT(IN)    :: SFCTMP !air temperature (k)
  REAL                              , INTENT(IN)    :: THAIR  !potential temperature (k)
  REAL                              , INTENT(IN)    :: LWDN   !downward longwave radiation (w/m2)
  REAL                              , INTENT(IN)    :: UU     !wind speed in e-w dir (m/s)
  REAL                              , INTENT(IN)    :: VV     !wind speed in n-s dir (m/s)
  REAL   , DIMENSION(       1:    2), INTENT(IN)    :: SOLAD  !incoming direct solar rad. (w/m2)
  REAL   , DIMENSION(       1:    2), INTENT(IN)    :: SOLAI  !incoming diffuse solar rad. (w/m2)
  REAL                              , INTENT(IN)    :: COSZ   !cosine solar zenith angle (0-1)
  REAL                              , INTENT(IN)    :: ELAI   !LAI adjusted for burying by snow
  REAL                              , INTENT(IN)    :: ESAI   !LAI adjusted for burying by snow
  REAL                              , INTENT(IN)    :: CSOIL  !vol. soil heat capacity [j/m3/k]
  REAL                              , INTENT(IN)    :: FWET   !fraction of canopy that is wet [-]
  REAL                              , INTENT(IN)    :: HTOP   !top of canopy layer (m)
  REAL                              , INTENT(IN)    :: Z0     !roughness length (m)
  REAL                              , INTENT(IN)    :: FVEG   !greeness vegetation fraction (-)
  REAL                              , INTENT(IN)    :: LAT    !latitude (radians)
  REAL                              , INTENT(IN)    :: CANLIQ !canopy-intercepted liquid water (mm)
  REAL                              , INTENT(IN)    :: CANICE !canopy-intercepted ice mass (mm)
  REAL                              , INTENT(IN)    :: FOLN   !foliage nitrogen (%)
  REAL                              , INTENT(IN)    :: CO2AIR !atmospheric co2 concentration (pa)
  REAL                              , INTENT(IN)    :: O2AIR  !atmospheric o2 concentration (pa)
  REAL                              , INTENT(IN)    :: IGS    !growing season index (0=off, 1=on)

  REAL                              , INTENT(IN)    :: ZREF   !reference height (m)
  REAL                              , INTENT(IN)    :: TBOT   !bottom condition for soil temp. (k) 
  REAL                              , INTENT(IN)    :: ZBOT   !depth for TBOT [m]
  REAL   , DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)    :: ZSNSO  !layer-bottom depth from snow surf [m]
  REAL   , DIMENSION(       1:NSOIL), INTENT(IN)    :: ZSOIL  !layer-bottom depth from soil surf [m]
  REAL   , DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)    :: DZSNSO !depth of snow & soil layer-bottom [m]
  REAL   , DIMENSION(       1:NSOIL), INTENT(IN)    :: FROOT  !root fraction [-]
  REAL                              , INTENT(IN)    :: KR     !

! outputs
  INTEGER, DIMENSION(-NSNOW+1:NSOIL), INTENT(OUT)   :: IMELT  !phase change index [1-melt; 2-freeze]
  REAL   , DIMENSION(-NSNOW+1:    0), INTENT(OUT)   :: SNICEV !partial volume ice [m3/m3]
  REAL   , DIMENSION(-NSNOW+1:    0), INTENT(OUT)   :: SNLIQV !partial volume liq. water [m3/m3]
  REAL   , DIMENSION(-NSNOW+1:    0), INTENT(OUT)   :: EPORE  !effective porosity [m3/m3]
  REAL                              , INTENT(OUT)   :: FSNO   !snow cover fraction (-)
  REAL                              , INTENT(OUT)   :: QMELT  !snowmelt [mm/s]
  REAL                              , INTENT(OUT)   :: PONDING!pounding at ground [mm]
  REAL                              , INTENT(OUT)   :: SAV    !solar rad. absorbed by veg. (w/m2)
  REAL                              , INTENT(OUT)   :: SAG    !solar rad. absorbed by ground (w/m2)
  REAL                              , INTENT(OUT)   :: FSA    !tot. absorbed solar radiation (w/m2)
  REAL                              , INTENT(OUT)   :: FSR    !tot. reflected solar radiation (w/m2)
  REAL                              , INTENT(OUT)   :: TAUX   !wind stress: e-w (n/m2)
  REAL                              , INTENT(OUT)   :: TAUY   !wind stress: n-s (n/m2)
  REAL                              , INTENT(OUT)   :: FIRA   !total net LW. rad (w/m2)   [+ to atm]
  REAL                              , INTENT(OUT)   :: FSH    !total sensible heat (w/m2) [+ to atm]
  REAL                              , INTENT(OUT)   :: FCEV   !canopy evaporation (w/m2)  [+ to atm]
  REAL                              , INTENT(OUT)   :: FGEV   !ground evaporation (w/m2)  [+ to atm]
  REAL                              , INTENT(OUT)   :: FCTR   !transpiration (w/m2)       [+ to atm]
  REAL                              , INTENT(OUT)   :: TRAD   !radiative temperature (k)
  REAL                              , INTENT(OUT)   :: T2M    !2 m height air temperature (k)
  REAL                              , INTENT(OUT)   :: PSN    !total photosyn. (umolco2/m2/s) [+]
  REAL                              , INTENT(OUT)   :: APAR   !total photosyn. active energy (w/m2)
  REAL                              , INTENT(OUT)   :: SSOIL  !ground heat flux (w/m2)   [+ to soil]
  REAL   , DIMENSION(       1:NSOIL), INTENT(OUT)   :: BTRANI !soil water transpiration factor (0-1)
  REAL                              , INTENT(OUT)   :: BTRAN  !soil water transpiration factor (0-1)
  REAL                              , INTENT(OUT)   :: LATHEA !latent heat vap./sublimation (j/kg)
  REAL                              , INTENT(OUT)   :: NDVI   !NDVI
  REAL   , DIMENSION(       1:NSOIL), INTENT(OUT)   :: PSI    !soil matrix potential (m)
  REAL                              , INTENT(OUT)   :: TWET   !wet-bulb T (C)
  REAL                              , INTENT(OUT)   :: RS     !stomatal resistance (s/m)
  REAL                              , INTENT(OUT)   :: RSURF  !ground surface resistance (s/m)

! input & output
  REAL                              , INTENT(INOUT) :: TS     !surface temperature (k)
  REAL                              , INTENT(INOUT) :: TV     !vegetation temperature (k)
  REAL                              , INTENT(INOUT) :: TG     !ground temperature (k)
  REAL   , DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC    !snow/soil temperature [k]
  REAL                              , INTENT(INOUT) :: SNOWH  !snow height [m]
  REAL                              , INTENT(INOUT) :: SNEQV  !snow mass (mm)
  REAL                              , INTENT(INOUT) :: SNEQVO !snow mass at last time step (mm)
  REAL   , DIMENSION(       1:NSOIL), INTENT(INOUT) :: SH2O   !liquid soil moisture [m3/m3]
  REAL   , DIMENSION(       1:NSOIL), INTENT(INOUT) :: SMC    !soil moisture (ice + liq.) [m3/m3]
  REAL   , DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNICE  !snow ice mass (kg/m2)
  REAL   , DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNLIQ  !snow liq mass (kg/m2)
  REAL                              , INTENT(INOUT) :: EAH    !canopy air vapor pressure (pa)
  REAL                              , INTENT(INOUT) :: TAH    !canopy air temperature (k)
  REAL                              , INTENT(INOUT) :: ALBOLD !snow albedo at last time step(CLASS type)
  REAL                              , INTENT(INOUT) :: CM     !momentum drag coefficient
  REAL                              , INTENT(INOUT) :: CH     !sensible heat exchange coefficient

! local
  INTEGER                                           :: IZ     !do-loop index
  LOGICAL                                           :: VEG    !true if vegetated surface
  REAL                                              :: UR     !wind speed at height ZLVL (m/s)
  REAL                                              :: ZLVL   !reference height (m)
  REAL                                              :: FSUN   !sunlit fraction of canopy [-]
  REAL                                              :: RB     !leaf boundary layer resistance (s/m)
  REAL                                              :: LR     !Dry-layer thickness or depth of evaporating surface (Sakaguchi and Zeng, 2009)
  REAL                                              :: DR     !Reduced vapor diffusivity in soil (SZ09)
  REAL                                              :: BEVAP  !soil water evaporation factor (0- 1)
  REAL                                              :: MOL    !Monin-Obukhov length (m)
  REAL                                              :: VAI    !sum of LAI  + stem area index [m2/m2]
  REAL                                              :: CWP    !canopy wind extinction parameter
  REAL                                              :: ZPD    !zero plane displacement (m)
  REAL                                              :: Z0M    !z0 momentum (m)
  REAL                                              :: ZPDG   !zero plane displacement (m)
  REAL                                              :: Z0MG   !z0 momentum, ground (m)
  REAL                                              :: EMV    !vegetation emissivity
  REAL                                              :: EMG    !ground emissivity
  REAL                                              :: FIRE   !emitted IR (w/m2)

  REAL                                              :: LAISUN !sunlit leaf area index (m2/m2)
  REAL                                              :: LAISHA !shaded leaf area index (m2/m2)
  REAL                                              :: PSNSUN !sunlit photosynthesis (umolco2/m2/s)
  REAL                                              :: PSNSHA !shaded photosynthesis (umolco2/m2/s)
  REAL                                              :: RSSUN  !sunlit stomatal resistance (s/m)
  REAL                                              :: RSSHA  !shaded stomatal resistance (s/m)
  REAL                                              :: PARSUN !par absorbed per sunlit LAI (w/m2)
  REAL                                              :: PARSHA !par absorbed per shaded LAI (w/m2)

  REAL, DIMENSION(-NSNOW+1:NSOIL)                   :: FACT   !temporary used in phase change
  REAL, DIMENSION(-NSNOW+1:NSOIL)                   :: DF     !thermal conductivity [w/m/k]
  REAL, DIMENSION(-NSNOW+1:NSOIL)                   :: HCPCT  !heat capacity [j/m3/k]
  REAL                                              :: BDSNO  !bulk density of snow (kg/m3)
  REAL                                              :: FMELT  !melting factor for snow cover frac
  REAL                                              :: GX     !temporary variable
  REAL                                              :: EFLXB  !energy influx from soil bot. (w/m2)
  REAL, DIMENSION(-NSNOW+1:NSOIL)                   :: PHI    !light through water (w/m2)
  REAL                                              :: GAMMA  !psychrometric constant (pa/k)
  REAL                                              :: RHSUR  !raltive humidity in surface soil/snow air space (-)

! temperature and fluxes over vegetated fraction

  REAL                                              :: TAUXV  !wind stress: e-w dir [n/m2]
  REAL                                              :: TAUYV  !wind stress: n-s dir [n/m2]
  REAL                                              :: IRC    !canopy net LW rad. [w/m2] [+ to atm]
  REAL                                              :: IRG    !ground net LW rad. [w/m2] [+ to atm]
  REAL                                              :: SHC    !canopy sen. heat [w/m2]   [+ to atm]
  REAL                                              :: SHG    !ground sen. heat [w/m2]   [+ to atm]
  REAL                                              :: EVC    !canopy evap. heat [w/m2]  [+ to atm]
  REAL                                              :: EVG    !ground evap. heat [w/m2]  [+ to atm]
  REAL                                              :: TR     !transpiration heat [w/m2] [+ to atm]
  REAL                                              :: GHV    !ground heat flux [w/m2]  [+ to soil]
  REAL                                              :: TGV    !ground surface temp. [k]
  REAL                                              :: T2MV   !2-m air temperature [k]
  REAL                                              :: CMV    !momentum drag coefficient
  REAL                                              :: CHV    !sensible heat exchange coefficient

! temperature and fluxes over bare soil fraction

  REAL                                              :: TAUXB  !wind stress: e-w dir [n/m2]
  REAL                                              :: TAUYB  !wind stress: n-s dir [n/m2]
  REAL                                              :: IRB    !net longwave rad. [w/m2] [+ to atm]
  REAL                                              :: SHB    !sensible heat [w/m2]     [+ to atm]
  REAL                                              :: EVB    !evaporation heat [w/m2]  [+ to atm]
  REAL                                              :: GHB    !ground heat flux [w/m2] [+ to soil]
  REAL                                              :: TGB    !ground surface temp. [k]
  REAL                                              :: T2MB   !2-m air temp. [k]
  REAL                                              :: CMB    !momentum drag coefficient
  REAL                                              :: CHB    !sensible heat exchange coefficient

  REAL, PARAMETER                   :: MPE    = 1.E-6
  REAL, PARAMETER                   :: PSIWLT = -300.  !metric potential for wilting point (m)

  REAL :: ESATAIR, ESATW, ESATI, DSATW, DSATI, DE, TDEW, SE, PSI1

  INTEGER :: ITER,NITER
  DATA NITER /100/
  REAL :: T, TDC       !Kelvin to degree Celsius with limit -50 to +50
  TDC(T)   = MIN( 50., MAX(-50.,(T-TFRZ)) )
! ---------------------------------------------------------------------------------------------------
! initialize fluxes from veg. fraction

    TAUXV     = 0.    
    TAUYV     = 0.
    IRC       = 0.
    SHC       = 0.
    IRG       = 0.
    SHG       = 0.
    EVG       = 0.       
    EVC       = 0.
    TR        = 0.
    GHV       = 0.       
    PSNSUN    = 0.
    PSNSHA    = 0.

! wind speed at reference height: ur >= 1

    UR = MAX( SQRT(UU**2.+VV**2.), 1. )

! vegetated or non-vegetated

    VAI = ELAI + ESAI
    VEG = .FALSE.
    IF(VAI > 0.) VEG = .TRUE.

! ground snow cover fraction [Niu and Yang, 2007, JGR]

     FSNO = 0.
     IF(SNOWH.GT.0.)  THEN
         BDSNO    = SNEQV / SNOWH
         FMELT    = (BDSNO/100.)**M
         FSNO     = TANH( SNOWH /(2.5* Z0 * FMELT))
     ENDIF

! ground roughness length

     IF(IST == 2) THEN
       IF(TG .LE. TFRZ) THEN
         Z0MG = 0.01 * (1.0-FSNO) + FSNO * Z0SNO
       ELSE
         Z0MG = 0.01  
       END IF
     ELSE
       Z0MG = Z0 * (1.0-FSNO) + FSNO * Z0SNO
     END IF

! roughness length and displacement height

     ZPDG  = SNOWH
     IF(VEG) THEN
        Z0M  = Z0MVT(VEGTYP)
       !ZPD  = 0.65 * HTOP
        ZPD  = 0.67 * HTOP
        IF(SNOWH.GT.ZPD) ZPD  = SNOWH
     ELSE
        Z0M  = Z0MG
        ZPD  = ZPDG
     END IF

     ZLVL = MAX(ZPD,HTOP) + ZREF
     IF(ZPDG >= ZLVL) ZLVL = ZPDG + ZREF
    !UR   = UR*LOG(ZLVL/Z0M)/LOG(10./Z0M)       !input UR is at 10m

! canopy wind absorption coeffcient

     CWP = CWPVT(VEGTYP)

! Thermal properties of soil, snow, lake, and frozen soil

  CALL THERMOPROP (NSOIL   ,NSNOW   ,ISNOW   ,IST     ,DZSNSO  , & !in
                   DT      ,SNOWH   ,SNICE   ,SNLIQ   ,CSOIL   , & !in
                   SMC     ,SH2O    ,TG      ,STC     ,UR      , & !in
                   LAT     ,Z0M     ,ZLVL    ,SMCMAX  ,QUARTZ  , & !in
                   DF      ,HCPCT   ,SNICEV  ,SNLIQV  ,EPORE   , & !out
                   FACT    )                              !out

! Solar radiation: absorbed & reflected by the ground and canopy

  CALL  RADIATION (VEGTYP  ,IST     ,ISC     ,ICE     ,NSOIL   , & !in 
                   SNEQVO  ,SNEQV   ,DT      ,COSZ    ,SNOWH   , & !in
                   TG      ,TV      ,FSNO    ,QSNOW   ,FWET    , & !in
                   ELAI    ,ESAI    ,SMC     ,SOLAD   ,SOLAI   , & !in
                   FVEG    ,ix,iy,                                     & !in
                   ALBOLD  ,                                     & !inout
                   FSUN    ,LAISUN  ,LAISHA  ,PARSUN  ,PARSHA  , & !out
                   SAV     ,SAG     ,FSR     ,FSA     ,NDVI    )   !out

! vegetation and ground emissivity

     EMV = 1. - EXP(-(ELAI+ESAI)/1.0)
     IF (ICE == 1) THEN
       EMG = 0.98*(1.-FSNO) + 1.0*FSNO
     ELSE
       EMG = EG(IST)*(1.-FSNO) + 1.0*FSNO
     END IF

! soil moisture factor controlling stomatal resistance
   
     BTRAN = 0.

     IF(IST ==1 ) THEN

       DO IZ = 1, NSOIL
         IF(OPT_WATRET == 1) THEN
             SE       = (MAX(SMCR+0.001,SH2O(IZ))-SMCR)/(SMCMAX-SMCR)
             PSI(IZ)  = -VGPSAT*(SE**(-1.0/VGM)-1.0)**(1.-VGM)
         END IF

         IF(OPT_WATRET == 2) THEN
            PSI(IZ)   = -PSISAT*(MAX(0.001,SH2O(IZ))/SMCMAX)**(-BEXP) !m
         END IF

       END DO

       IF(OPT_ROOT == 1) THEN
           BTRAN =  KR
       END IF

       IF(OPT_ROOT == 2) THEN
         DO IZ = 1, NROOT
            IF(OPT_BTR == 1) then                  ! Noah
              GX    = (SH2O(IZ)-SMCWLT) / (SMCREF-SMCWLT)
            END IF
            IF(OPT_BTR == 2) then                  ! CLM
              GX    = (1.-PSI(IZ)/PSIWLT)/(1.+PSISAT/PSIWLT)
            END IF
            IF(OPT_BTR == 3) then                  ! SSiB
              GX    = 1.-EXP(-5.8*(LOG(PSIWLT/PSI(IZ)))) 
            END IF
       
            GX         = MIN(1.,MAX(MPE,GX))

            BTRANI(IZ) = GX * FROOT(IZ)
            BTRAN      = BTRAN + BTRANI(IZ)
         END DO
         BTRANI(1:NROOT) = BTRANI(1:NROOT)/BTRAN
       END IF

     END IF

! soil surface resistence for ground evap.

     IF(IST == 2) THEN
       RSURF = 1.          ! avoid being divided by 0
       RHSUR = 1.0
     ELSE

      !RSURF = FSNO * 1. + (1.-FSNO)* EXP(8.25-4.225*BEVAP) !Sellers (1992)
      !LR = -ZSOIL(1) * (exp((1.0-BEVAP)**5.00) - 1.0) / (2.71828 - 1.0)  !(Sakaguchi and Zeng, 2009)
      !DR = 2.2E-5 * SMCMAX**2.0*(1.0-BEVAP)**(2.0+3.0/BEXP)

      !LR = 0.012 * (exp((1.0-BEVAP)**3.00) - 1.0) / 1.71828
      !DR = 2.2E-5 * SMCMAX * (1.0-BEVAP)**(2.0+3.0/BEXP)

       IF(OPT_WATRET == 1) THEN
          BEVAP = MAX(0.0001,SMC(1)/SMCMAX)
         !BEVAP = MAX(0.0001,SH2O(1)/SMCMAX)
         !BEVAP = (MAX(SMCR+0.001,SMC(1))-SMCR)/(SMCMAX-SMCR)
          DR    = 2.2E-5 * SMCMAX**2.0*(1.0-BEVAP)**(2.0+3.0/BEXP)

          LR    = 0.010  * (exp((1.0-BEVAP)**3.50) - 1.0) / 1.71828
          PSI1  = -PSISAT*BEVAP**(-BEXP) !m
          RSURF = FSNO * 1. + (1.-FSNO) * MAX(10.,LR/DR)
          RHSUR = FSNO + (1.-FSNO) * EXP(PSI1*GRAV/(RW*TG))

         !LR    = 0.20 * (exp((1.0-BEVAP)**3.50) - 1.0) / 1.71828
         !RSURF = FSNO * 1. + (1.-FSNO) * MAX(10.,LR/DR)
         !RHSUR = FSNO + 1. + (1.-FSNO) * EXP(-VGPSAT*GRAV/(RW*TG)) 
       ELSE
          BEVAP = MAX(0.0,SH2O(1)/SMCMAX)
          DR = 2.2E-5 * SMCMAX**2.0*(1.0-BEVAP)**(2.0+3.0/BEXP)
          LR = 0.040  * (exp((1.0-BEVAP)**4.80) - 1.0) / 1.71828
          RSURF = FSNO * 1. + (1.-FSNO) * MAX(10.,LR/DR)
          RHSUR = FSNO + (1.-FSNO) * EXP(PSI(1)*GRAV/(RW*TG))
       END IF

     END IF

! set psychrometric constant

     IF (SFCTMP .GT. TFRZ) THEN
        LATHEA = HVAP
     ELSE
        LATHEA = HSUB
     END IF
     GAMMA = CPAIR*SFCPRS/(0.622*LATHEA)

! wet-bulb temperature
    
    IF(OPT_SNF == 4) THEN

     ! first guess using the 1/3 rule (see DOI:10.1175/BAMS-D-16-0246.1: BAMS (2017)a)

     TWET    = TDC(SFCTMP) - 5.0  !used only in precipitation phase
    
     IF(PRCP > 0.0) THEN 
     DO ITER = 1, NITER
          ESATAIR = 610.8 * EXP((17.27*TWET)/(237.3+TWET))
          DE      = ESATAIR-EAIR

           IF(DE >= 0) THEN
              TWET    = TWET - DE/GAMMA
           ELSE
              TWET    = TWET - DE/GAMMA / (FLOAT(ITER)) * 3.
           END IF

          TWET = MAX(-50., TWET)

         !IF(IX == 196    .and. IY ==56) THEN  !grass dry
         !   write(*,*) ITER,TWET,SFCTMP-TFRZ,DE,ESATAIR,EAIR,GAMMA
         !END IF

          IF(ABS(DE).LE.2.0) EXIT

     END DO
     END IF
    END IF

! Surface temperatures of the ground and canopy and energy fluxes

    IF (VEG) THEN 
    TGV = TG
    CMV = CM
    CHV = CH
    CALL VEGE_FLUX (NSNOW   ,NSOIL   ,ISNOW   ,VEGTYP  ,VEG     , & !in
                    DT      ,SAV     ,SAG     ,LWDN    ,UR      , & !in
                    UU      ,VV      ,SFCTMP  ,THAIR   ,QAIR    , & !in
                    EAIR    ,RHOAIR  ,SNOWH   ,VAI     ,GAMMA   , & !in
                    FWET    ,LAISUN  ,LAISHA  ,CWP     ,DZSNSO  , & !in
                    HTOP    ,ZLVL    ,ZPD     ,Z0M     ,FVEG    , & !in
                    Z0MG    ,EMV     ,EMG     ,CANLIQ           , & !in
                    CANICE  ,STC     ,DF      ,RSSUN   ,RSSHA   , & !in
                    RSURF   ,LATHEA  ,PARSUN  ,PARSHA  ,IGS     , & !in
                    FOLN    ,CO2AIR  ,O2AIR   ,BTRAN   ,SFCPRS  , & !in
                    RHSUR   ,RGL     ,RSMIN   ,HS      ,ix  ,iy , & !in
                    EAH     ,TAH     ,TV      ,TGV     ,CMV     , & !inout
                    CHV     ,                                     & !inout
                    TAUXV   ,TAUYV   ,IRG     ,IRC     ,SHG     , & !out
                    SHC     ,EVG     ,EVC     ,TR      ,GHV     , & !out
                    T2MV    ,PSNSUN  ,PSNSHA  ,RS      )            !out
    END IF


    TGB = TG
    CMB = CM
    CHB = CH
    CALL BARE_FLUX (NSNOW   ,NSOIL   ,ISNOW   ,DT      ,SAG     , & !in
                    LWDN    ,UR      ,UU      ,VV      ,SFCTMP  , & !in
                    THAIR   ,QAIR    ,EAIR    ,RHOAIR  ,SNOWH   , & !in
                    DZSNSO  ,ZLVL    ,ZPDG    ,Z0MG    ,SFCPRS  , & !in
                    EMG     ,STC     ,DF      ,RSURF   ,LATHEA  , & !in
                    GAMMA   ,RHSUR   ,ix      ,iy      ,          & !in
                    TGB     ,CMB     ,CHB     ,                   & !inout
                    TAUXB   ,TAUYB   ,IRB     ,SHB     ,EVB     , & !out
                    GHB     ,T2MB    )                              !out

!energy balance at vege canopy: SAV          =(IRC+SHC+EVC+TR)     *FVEG  at   FVEG 
!energy balance at vege ground: SAG*    FVEG =(IRG+SHG+EVG+GHV)    *FVEG  at   FVEG
!energy balance at bare ground: SAG*(1.-FVEG)=(IRB+SHB+EVB+GHB)*(1.-FVEG) at 1-FVEG

    IF (VEG) THEN 
        TAUX  = FVEG * TAUXV     + (1.0 - FVEG) * TAUXB
        TAUY  = FVEG * TAUYV     + (1.0 - FVEG) * TAUYB
        FIRA  = FVEG * IRG       + (1.0 - FVEG) * IRB       + IRC
        FSH   = FVEG * SHG       + (1.0 - FVEG) * SHB       + SHC
        FGEV  = FVEG * EVG       + (1.0 - FVEG) * EVB
        SSOIL = FVEG * GHV       + (1.0 - FVEG) * GHB
        FCEV  = EVC
        FCTR  = TR
        TG    = FVEG * TGV       + (1.0 - FVEG) * TGB
        T2M   = FVEG * T2MV      + (1.0 - FVEG) * T2MB
        TS    = FVEG * TV        + (1.0 - FVEG) * TGB
        CM    = FVEG * CMV       + (1.0 - FVEG) * CMB      ! better way to average?
        CH    = FVEG * CHV       + (1.0 - FVEG) * CHB

    ELSE
        TAUX  = TAUXB
        TAUY  = TAUYB
        FIRA  = IRB
        FSH   = SHB
        FGEV  = EVB
        SSOIL = GHB
        TG    = TGB
        T2M   = T2MB
        FCEV  = 0.
        FCTR  = 0.
        TS    = TG
        CM    = CMB
        CH    = CHB
        RS    = -1.E20                 ! for output
    END IF

    FIRE = LWDN + FIRA

    IF(FIRE <=0.) THEN
       WRITE(6,*) 'ix=',ix,'iy=',iy,'VEG TYPE=', VEGTYP
       WRITE(6,*) 'emitted longwave <0; TV maybe wrong'
       WRITE(6,*) 'SIGMA in TWOSTREAM maybe too small (~e-10)'
       WRITE(6,*) 'FAB is < 0.; FRE is < 0.'
       WRITE(6,*) 'TV=',TV,'TG=',TG,'LAI=',ELAI
       WRITE(6,*) 'TGB=',TGB,'TGV=',TGV
       STOP
    END IF

    TRAD = (FIRE/SB)**0.25
    APAR = PARSUN*LAISUN + PARSHA*LAISHA
    PSN  = PSNSUN*LAISUN + PSNSHA*LAISHA

! 3L snow & 4L soil temperatures

    CALL TSNOSOI (ICE     ,NSOIL   ,NSNOW   ,ISNOW   ,IST     , & !in
                  TBOT    ,ZSNSO   ,SSOIL   ,DF      ,HCPCT   , & !in
                  ZBOT    ,SAG     ,DT      ,SNOWH   ,DZSNSO  , & !in
                  TG      ,                                     & !in
                  STC     )                                       !inout

! adjusting snow surface temperature

     IF(OPT_STC == 2) THEN
      IF (SNOWH > 0.05 .AND. TG > TFRZ) THEN
        TGV = TFRZ
        TGB = TFRZ
          IF (VEG) THEN
             TG    = FVEG * TGV       + (1.0 - FVEG) * TGB
             TS    = FVEG * TV        + (1.0 - FVEG) * TGB
          ELSE
             TG    = TGB
             TS    = TGB
          END IF
      END IF
     END IF

! Energy released or consumed by snow & frozen soil

 CALL PHASECHANGE (NSNOW   ,NSOIL   ,ISNOW   ,DT      ,FACT    , & !in
                   DZSNSO  ,HCPCT   ,IST     ,BEXP    ,SMCMAX  , & !in
                   PSISAT  ,VGPSAT  ,VGM     ,SMCR    ,          & !in
                   STC     ,SNICE   ,SNLIQ   ,SNEQV   ,SNOWH   , & !inout
                   SMC     ,SH2O    ,                            & !inout
                   QMELT   ,IMELT   ,PONDING )                     !out

  END SUBROUTINE ENERGY
! ==================================================================================================
  SUBROUTINE THERMOPROP (NSOIL   ,NSNOW   ,ISNOW   ,IST     ,DZSNSO  , & !in
                         DT      ,SNOWH   ,SNICE   ,SNLIQ   ,CSOIL   , & !in
                         SMC     ,SH2O    ,TG      ,STC     ,UR      , & !in
                         LAT     ,Z0M     ,ZLVL    ,SMCMAX  ,QUARTZ  , & !in
                         DF      ,HCPCT   ,SNICEV  ,SNLIQV  ,EPORE   , & !out
                         FACT    )                                       !out
! ------------------------------------------------------------------------------------------------- 
! -------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! inputs

  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: QUARTZ       !soil quartz content

  INTEGER                        , INTENT(IN)  :: NSOIL   !number of soil layers
  INTEGER                        , INTENT(IN)  :: NSNOW   !maximum no. of snow layers        
  INTEGER                        , INTENT(IN)  :: ISNOW   !actual no. of snow layers
  INTEGER                        , INTENT(IN)  :: IST     !surface type
  REAL                           , INTENT(IN)  :: DT      !time step [s]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(IN)  :: SNICE   !snow ice mass (kg/m2)
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(IN)  :: SNLIQ   !snow liq mass (kg/m2)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: DZSNSO  !thickness of snow/soil layers [m]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN)  :: SMC     !soil moisture (ice + liq.) [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN)  :: SH2O    !liquid soil moisture [m3/m3]
  REAL                           , INTENT(IN)  :: SNOWH   !snow height [m]
  REAL                           , INTENT(IN)  :: CSOIL   !vol. soil heat capacity [j/m3/k]
  REAL,                            INTENT(IN)  :: TG      !surface temperature (k)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: STC     !snow/soil/lake temp. (k)
  REAL,                            INTENT(IN)  :: UR      !wind speed at ZLVL (m/s)
  REAL,                            INTENT(IN)  :: LAT     !latitude (radians)
  REAL,                            INTENT(IN)  :: Z0M     !roughness length (m)
  REAL,                            INTENT(IN)  :: ZLVL    !reference height (m)

! outputs
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(OUT) :: DF      !thermal conductivity [w/m/k]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(OUT) :: HCPCT   !heat capacity [j/m3/k]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(OUT) :: SNICEV  !partial volume of ice [m3/m3]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(OUT) :: SNLIQV  !partial volume of liquid water [m3/m3]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(OUT) :: EPORE   !effective porosity [m3/m3]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(OUT) :: FACT    !computing energy for phase change
! --------------------------------------------------------------------------------------------------
! locals

  INTEGER :: IZ
  REAL, DIMENSION(-NSNOW+1:    0)              :: CVSNO   !volumetric specific heat (j/m3/k)
  REAL, DIMENSION(-NSNOW+1:    0)              :: TKSNO   !snow thermal conductivity (j/m3/k)
  REAL, DIMENSION(       1:NSOIL)              :: SICE    !soil ice content
! --------------------------------------------------------------------------------------------------

! compute snow thermal conductivity and heat capacity

    CALL CSNOW (ISNOW   ,NSNOW   ,NSOIL   ,SNICE   ,SNLIQ   ,DZSNSO  , & !in
                TKSNO   ,CVSNO   ,SNICEV  ,SNLIQV  ,EPORE   )   !out

    DO IZ = ISNOW+1, 0
      DF   (IZ) = TKSNO(IZ)
      HCPCT(IZ) = CVSNO(IZ)
    END DO

! compute soil thermal properties

    DO  IZ = 1, NSOIL
       SICE(IZ)  = SMC(IZ) - SH2O(IZ)
       HCPCT(IZ) = SH2O(IZ)*CWAT + (1.0-SMCMAX)*CSOIL &
                + (SMCMAX-SMC(IZ))*CPAIR + SICE(IZ)*CICE
       CALL TDFCND (DF(IZ), SMC(IZ), SH2O(IZ), QUARTZ, SMCMAX)
    END DO

! heat flux reduction effect from the overlying green canopy, adapted from 
! section 2.1.2 of Peters-Lidard et al. (1997, JGR, VOL 102(D4)).
! not in use because of the separation of the canopy layer from the ground.
! but this may represent the effects of leaf litter (Niu comments)
!       DF1 = DF1 * EXP (SBETA * SHDFAC)

! compute lake thermal properties 
! (no consideration of turbulent mixing for this version)

    IF(IST == 2) THEN
       DO IZ = 1, NSOIL 
         IF(STC(IZ) > TFRZ) THEN
            HCPCT(IZ) = CWAT
            DF(IZ)    = TKWAT  !+ KEDDY * CWAT 
         ELSE
            HCPCT(IZ) = CICE
            DF(IZ)    = TKICE 
         END IF
       END DO
    END IF

! combine a temporary variable used for melting/freezing of snow and frozen soil

    DO IZ = ISNOW+1,NSOIL
     FACT(IZ) = DT/(HCPCT(IZ)*DZSNSO(IZ))
    END DO

! snow/soil interface

    IF(ISNOW == 0) THEN
       DF(1) = (DF(1)*DZSNSO(1)+0.35*SNOWH)      / (SNOWH    +DZSNSO(1)) 
    ELSE
       DF(1) = (DF(1)*DZSNSO(1)+DF(0)*DZSNSO(0)) / (DZSNSO(0)+DZSNSO(1))
    END IF

  END SUBROUTINE THERMOPROP
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE CSNOW (ISNOW   ,NSNOW   ,NSOIL   ,SNICE   ,SNLIQ   ,DZSNSO  , & !in
                    TKSNO   ,CVSNO   ,SNICEV  ,SNLIQV  ,EPORE   )   !out
! --------------------------------------------------------------------------------------------------
! Snow bulk density,volumetric capacity, and thermal conductivity
!---------------------------------------------------------------------------------------------------
  IMPLICIT NONE
!---------------------------------------------------------------------------------------------------
! inputs

  INTEGER,                          INTENT(IN) :: ISNOW  !number of snow layers (-)            
  INTEGER                        ,  INTENT(IN) :: NSNOW  !maximum no. of snow layers        
  INTEGER                        ,  INTENT(IN) :: NSOIL  !number of soil layers
  REAL, DIMENSION(-NSNOW+1:    0),  INTENT(IN) :: SNICE  !snow ice mass (kg/m2)
  REAL, DIMENSION(-NSNOW+1:    0),  INTENT(IN) :: SNLIQ  !snow liq mass (kg/m2) 
  REAL, DIMENSION(-NSNOW+1:NSOIL),  INTENT(IN) :: DZSNSO !snow/soil layer thickness [m]

! outputs

  REAL, DIMENSION(-NSNOW+1:    0), INTENT(OUT) :: CVSNO  !volumetric specific heat (j/m3/k)
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(OUT) :: TKSNO  !thermal conductivity (w/m/k)
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(OUT) :: SNICEV !partial volume of ice [m3/m3]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(OUT) :: SNLIQV !partial volume of liquid water [m3/m3]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(OUT) :: EPORE  !effective porosity [m3/m3]

! locals

  INTEGER :: IZ
  REAL, DIMENSION(-NSNOW+1:    0) :: BDSNOI  !bulk density of snow(kg/m3)

!---------------------------------------------------------------------------------------------------
! thermal capacity of snow

  DO IZ = ISNOW+1, 0
      SNICEV(IZ)   = MIN(1., SNICE(IZ)/(DZSNSO(IZ)*DENICE) )
      EPORE(IZ)    = 1. - SNICEV(IZ)
      SNLIQV(IZ)   = MIN(EPORE(IZ),SNLIQ(IZ)/(DZSNSO(IZ)*DENH2O))
  ENDDO

  DO IZ = ISNOW+1, 0
      BDSNOI(IZ) = (SNICE(IZ)+SNLIQ(IZ))/DZSNSO(IZ)
      CVSNO(IZ) = CICE*SNICEV(IZ)+CWAT*SNLIQV(IZ)
!      CVSNO(IZ) = 0.525E06                          ! constant
  enddo

! thermal conductivity of snow

  DO IZ = ISNOW+1, 0
     TKSNO(IZ) = 3.2217E-6*BDSNOI(IZ)**2.           ! Stieglitz(yen,1965)
!    TKSNO(IZ) = 2E-2+2.5E-6*BDSNOI(IZ)*BDSNOI(IZ)   ! Anderson, 1976
!    TKSNO(IZ) = 0.35                                ! constant
!    TKSNO(IZ) = 2.576E-6*BDSNOI(IZ)**2. + 0.074    ! Verseghy (1991)
!    TKSNO(IZ) = 2.22*(BDSNOI(IZ)/1000.)**1.88      ! Douvill(Yen, 1981)
  ENDDO

  END SUBROUTINE CSNOW
!===================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE TDFCND ( DF, SMC, SH2O, QUARTZ, SMCMAX)
! --------------------------------------------------------------------------------------------------
! Calculate thermal diffusivity and conductivity of the soil.
! Peters-Lidard approach (Peters-Lidard et al., 1998)
! --------------------------------------------------------------------------------------------------
! Code history:
! June 2001 changes: frozen soil condition.
! --------------------------------------------------------------------------------------------------
    IMPLICIT NONE

  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: QUARTZ       !soil quartz content

    REAL, INTENT(IN)       :: SMC    ! total soil water
    REAL, INTENT(IN)       :: SH2O   ! liq. soil water
    REAL, INTENT(OUT)      :: DF     ! thermal diffusivity

! local variables
    REAL  :: AKE
    REAL  :: GAMMD
    REAL  :: THKDRY
    REAL  :: THKO     ! thermal conductivity for other soil components         
    REAL  :: THKQTZ   ! thermal conductivity for quartz
    REAL  :: THKSAT   ! 
    REAL  :: THKS     ! thermal conductivity for the solids
    REAL  :: THKW     ! water thermal conductivity
    REAL  :: SATRATIO
    REAL  :: XU
    REAL  :: XUNFROZ
! --------------------------------------------------------------------------------------------------
! We now get quartz as an input argument (set in routine redprm):
!      DATA QUARTZ /0.82, 0.10, 0.25, 0.60, 0.52,
!     &             0.35, 0.60, 0.40, 0.82/
! --------------------------------------------------------------------------------------------------
! If the soil has any moisture content compute a partial sum/product
! otherwise use a constant value which works well with most soils
! --------------------------------------------------------------------------------------------------
!  QUARTZ ....QUARTZ CONTENT (SOIL TYPE DEPENDENT)
! --------------------------------------------------------------------------------------------------
! USE AS IN PETERS-LIDARD, 1998 (MODIF. FROM JOHANSEN, 1975).

!                                  PABLO GRUNMANN, 08/17/98
! Refs.:
!      Farouki, O.T.,1986: Thermal properties of soils. Series on Rock
!              and Soil Mechanics, Vol. 11, Trans Tech, 136 pp.
!      Johansen, O., 1975: Thermal conductivity of soils. PH.D. Thesis,
!              University of Trondheim,
!      Peters-Lidard, C. D., et al., 1998: The effect of soil thermal
!              conductivity parameterization on surface energy fluxes
!              and temperatures. Journal of The Atmospheric Sciences,
!              Vol. 55, pp. 1209-1224.
! --------------------------------------------------------------------------------------------------
! NEEDS PARAMETERS
! POROSITY(SOIL TYPE):
!      POROS = SMCMAX
! SATURATION RATIO:
! PARAMETERS  W/(M.K)
    SATRATIO = SMC / SMCMAX
    THKW = 0.57
!      IF (QUARTZ .LE. 0.2) THKO = 3.0
    THKO = 2.0
! SOLIDS' CONDUCTIVITY
! QUARTZ' CONDUCTIVITY
    THKQTZ = 7.7

! UNFROZEN FRACTION (FROM 1., i.e., 100%LIQUID, TO 0. (100% FROZEN))
    THKS = (THKQTZ ** QUARTZ)* (THKO ** (1. - QUARTZ))

! UNFROZEN VOLUME FOR SATURATION (POROSITY*XUNFROZ)
    XUNFROZ = SH2O / SMC
! SATURATED THERMAL CONDUCTIVITY
    XU = XUNFROZ * SMCMAX

! DRY DENSITY IN KG/M3
    THKSAT = THKS ** (1. - SMCMAX)* TKICE ** (SMCMAX - XU)* THKW **   &
         (XU)

! DRY THERMAL CONDUCTIVITY IN W.M-1.K-1
    GAMMD = (1. - SMCMAX)*2700.

    THKDRY = (0.135* GAMMD+ 64.7)/ (2700. - 0.947* GAMMD)
! FROZEN
    IF ( (SH2O + 0.0005) <  SMC ) THEN
       AKE = SATRATIO
! UNFROZEN
! RANGE OF VALIDITY FOR THE KERSTEN NUMBER (AKE)
    ELSE

! KERSTEN NUMBER (USING "FINE" FORMULA, VALID FOR SOILS CONTAINING AT
! LEAST 5% OF PARTICLES WITH DIAMETER LESS THAN 2.E-6 METERS.)
! (FOR "COARSE" FORMULA, SEE PETERS-LIDARD ET AL., 1998).

       IF ( SATRATIO >  0.1 ) THEN

          AKE = LOG10 (SATRATIO) + 1.0

! USE K = KDRY
       ELSE

          AKE = 0.0
       END IF
!  THERMAL CONDUCTIVITY

    END IF

    DF = AKE * (THKSAT - THKDRY) + THKDRY

  end subroutine TDFCND
! ==================================================================================================
  SUBROUTINE RADIATION (VEGTYP  ,IST     ,ISC     ,ICE     ,NSOIL   , & !in
                        SNEQVO  ,SNEQV   ,DT      ,COSZ    ,SNOWH   , & !in
                        TG      ,TV      ,FSNO    ,QSNOW   ,FWET    , & !in
                        ELAI    ,ESAI    ,SMC     ,SOLAD   ,SOLAI   , & !in
                        FVEG    ,ix,iy,                                     & !in
                        ALBOLD  ,                                     & !inout
                        FSUN    ,LAISUN  ,LAISHA  ,PARSUN  ,PARSHA  , & !out
                        SAV     ,SAG     ,FSR     ,FSA     ,NDVI      ) !out
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! input
  INTEGER, INTENT(IN)                  :: ix,iy
  INTEGER, INTENT(IN)                  :: VEGTYP !vegetation type
  INTEGER, INTENT(IN)                  :: IST    !surface type
  INTEGER, INTENT(IN)                  :: ISC    !soil color type (1-lighest; 8-darkest)
  INTEGER, INTENT(IN)                  :: ICE    !ice (ice = 1)
  INTEGER, INTENT(IN)                  :: NSOIL  !number of soil layers

  REAL, INTENT(IN)                     :: DT     !time step [s]
  REAL, INTENT(IN)                     :: QSNOW  !snowfall (mm/s)
  REAL, INTENT(IN)                     :: SNEQVO !snow mass at last time step(mm)
  REAL, INTENT(IN)                     :: SNEQV  !snow mass (mm)
  REAL, INTENT(IN)                     :: SNOWH  !snow height (mm)
  REAL, INTENT(IN)                     :: COSZ   !cosine solar zenith angle (0-1)
  REAL, INTENT(IN)                     :: TG     !ground temperature (k)
  REAL, INTENT(IN)                     :: TV     !vegetation temperature (k)
  REAL, INTENT(IN)                     :: ELAI   !LAI, one-sided, adjusted for burying by snow
  REAL, INTENT(IN)                     :: ESAI   !SAI, one-sided, adjusted for burying by snow
  REAL, INTENT(IN)                     :: FWET   !fraction of canopy that is wet
  REAL, DIMENSION(1:NSOIL), INTENT(IN) :: SMC    !volumetric soil water [m3/m3]
  REAL, DIMENSION(1:2)    , INTENT(IN) :: SOLAD  !incoming direct solar radiation (w/m2)
  REAL, DIMENSION(1:2)    , INTENT(IN) :: SOLAI  !incoming diffuse solar radiation (w/m2)
  REAL, INTENT(IN)                     :: FSNO   !snow cover fraction (-)
  REAL, INTENT(IN)                     :: FVEG   !green vegetation fraction [0.0-1.0]

! inout
  REAL,                  INTENT(INOUT) :: ALBOLD !snow albedo at last time step (CLASS type)

! output
  REAL, INTENT(OUT)                    :: FSUN   !sunlit fraction of canopy (-)
  REAL, INTENT(OUT)                    :: LAISUN !sunlit leaf area (-)
  REAL, INTENT(OUT)                    :: LAISHA !shaded leaf area (-)
  REAL, INTENT(OUT)                    :: PARSUN !average absorbed par for sunlit leaves (w/m2)
  REAL, INTENT(OUT)                    :: PARSHA !average absorbed par for shaded leaves (w/m2)
  REAL, INTENT(OUT)                    :: SAV    !solar radiation absorbed by vegetation (w/m2)
  REAL, INTENT(OUT)                    :: SAG    !solar radiation absorbed by ground (w/m2)
  REAL, INTENT(OUT)                    :: FSA    !total absorbed solar radiation (w/m2)
  REAL, INTENT(OUT)                    :: FSR    !total reflected solar radiation (w/m2)
  REAL, INTENT(OUT)                    :: NDVI   !NDVI

! local
  REAL                                 :: FAGE   !snow age function (0 - new snow)
  REAL, DIMENSION(1:2)                 :: ALBGRD !ground albedo (direct)
  REAL, DIMENSION(1:2)                 :: ALBGRI !ground albedo (diffuse)
  REAL, DIMENSION(1:2)                 :: ALBD   !surface albedo (direct)
  REAL, DIMENSION(1:2)                 :: ALBI   !surface albedo (diffuse)
  REAL, DIMENSION(1:2)                 :: FABD   !flux abs by veg (per unit direct flux)
  REAL, DIMENSION(1:2)                 :: FABI   !flux abs by veg (per unit diffuse flux)
  REAL, DIMENSION(1:2)                 :: FTDD   !down direct flux below veg (per unit dir flux)
  REAL, DIMENSION(1:2)                 :: FTID   !down diffuse flux below veg (per unit dir flux)
  REAL, DIMENSION(1:2)                 :: FTII   !down diffuse flux below veg (per unit dif flux)

  REAL                                 :: FSHA   !shaded fraction of canopy
  REAL                                 :: VAI    !total LAI + stem area index, one sided

  REAL,PARAMETER :: MPE = 1.E-6
  LOGICAL VEG  !true: vegetated for surface temperature calculation

! --------------------------------------------------------------------------------------------------

! surface abeldo

   CALL ALBEDO (VEGTYP ,IST    ,ISC    ,ICE    ,NSOIL  , & !in
                DT     ,COSZ   ,FAGE   ,ELAI   ,ESAI   , & !in
                TG     ,TV     ,SNOWH  ,FSNO   ,FWET   , & !in
                SMC    ,SNEQVO ,SNEQV  ,QSNOW  ,FVEG   , & !in
                ALBOLD ,                                 & !inout
                ALBGRD ,ALBGRI ,ALBD   ,ALBI   ,FABD   , & !out
                FABI   ,FTDD   ,FTID   ,FTII   ,FSUN   )   !out

! surface radiation

     FSHA = 1.-FSUN
     LAISUN = ELAI*FSUN
     LAISHA = ELAI*FSHA
     VAI = ELAI+ ESAI
     IF (VAI .GT. 0.) THEN
        VEG = .TRUE.
     ELSE
        VEG = .FALSE.
     END IF

   CALL SURRAD (MPE    ,FSUN   ,FSHA   ,ELAI   ,VAI    , & !in
                LAISUN ,LAISHA ,SOLAD  ,SOLAI  ,FABD   , & !in
                FABI   ,FTDD   ,FTID   ,FTII   ,ALBGRD , & !in
                ALBGRI ,ALBD   ,ALBI   ,ix,iy,                 & !in
                PARSUN ,PARSHA ,SAV    ,SAG    ,FSA    , & !out
                FSR    ,NDVI   )                           !out

  END SUBROUTINE RADIATION
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE ALBEDO (VEGTYP ,IST    ,ISC    ,ICE    ,NSOIL  , & !in
                     DT     ,COSZ   ,FAGE   ,ELAI   ,ESAI   , & !in
                     TG     ,TV     ,SNOWH  ,FSNO   ,FWET   , & !in
                     SMC    ,SNEQVO ,SNEQV  ,QSNOW  ,FVEG   , & !in
                     ALBOLD ,                                 & !inout
                     ALBGRD ,ALBGRI ,ALBD   ,ALBI   ,FABD   , & !out
                     FABI   ,FTDD   ,FTID   ,FTII   ,FSUN   )   !out
! --------------------------------------------------------------------------------------------------
! surface albedos. also fluxes (per unit incoming direct and diffuse
! radiation) reflected, transmitted, and absorbed by vegetation.
! also sunlit fraction of the canopy.
! --------------------------------------------------------------------------------------------------
  USE VEG_PARAMETERS
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! input
  INTEGER,                  INTENT(IN)  :: NSOIL  !number of soil layers
  INTEGER,                  INTENT(IN)  :: VEGTYP !vegetation type
  INTEGER,                  INTENT(IN)  :: IST    !surface type
  INTEGER,                  INTENT(IN)  :: ISC    !soil color type (1-lighest; 8-darkest)
  INTEGER,                  INTENT(IN)  :: ICE    !ice (ice = 1)

  REAL,                     INTENT(IN)  :: DT     !time step [sec]
  REAL,                     INTENT(IN)  :: QSNOW  !snowfall
  REAL,                     INTENT(IN)  :: COSZ   !cosine solar zenith angle for next time step
  REAL,                     INTENT(IN)  :: SNOWH  !snow height (mm)
  REAL,                     INTENT(IN)  :: TG     !ground temperature (k)
  REAL,                     INTENT(IN)  :: TV     !vegetation temperature (k)
  REAL,                     INTENT(IN)  :: ELAI   !LAI, one-sided, adjusted for burying by snow
  REAL,                     INTENT(IN)  :: ESAI   !SAI, one-sided, adjusted for burying by snow
  REAL,                     INTENT(IN)  :: FSNO   !fraction of grid covered by snow
  REAL,                     INTENT(IN)  :: FWET   !fraction of canopy that is wet
  REAL,                     INTENT(IN)  :: SNEQVO !snow mass at last time step(mm)
  REAL,                     INTENT(IN)  :: SNEQV  !snow mass (mm)
  REAL,                     INTENT(IN)  :: FVEG   !green vegetation fraction [0.0-1.0]
  REAL, DIMENSION(1:NSOIL), INTENT(IN)  :: SMC    !volumetric soil water (m3/m3)

! inout
  REAL,                  INTENT(INOUT)  :: ALBOLD !snow albedo at last time step (CLASS type)

! output
  REAL, DIMENSION(1:    2), INTENT(OUT) :: ALBGRD !ground albedo (direct)
  REAL, DIMENSION(1:    2), INTENT(OUT) :: ALBGRI !ground albedo (diffuse)
  REAL, DIMENSION(1:    2), INTENT(OUT) :: ALBD   !surface albedo (direct)
  REAL, DIMENSION(1:    2), INTENT(OUT) :: ALBI   !surface albedo (diffuse)
  REAL, DIMENSION(1:    2), INTENT(OUT) :: FABD   !flux abs by veg (per unit direct flux)
  REAL, DIMENSION(1:    2), INTENT(OUT) :: FABI   !flux abs by veg (per unit diffuse flux)
  REAL, DIMENSION(1:    2), INTENT(OUT) :: FTDD   !down direct flux below veg (per unit dir flux)
  REAL, DIMENSION(1:    2), INTENT(OUT) :: FTID   !down diffuse flux below veg (per unit dir flux)
  REAL, DIMENSION(1:    2), INTENT(OUT) :: FTII   !down diffuse flux below veg (per unit dif flux)
  REAL,                     INTENT(OUT) :: FSUN   !sunlit fraction of canopy (-)

! ------------------------------------------------------------------------
! ------------------------ local variables -------------------------------
! local
  REAL                 :: FAGE     !snow age function
  REAL                 :: ALB
  INTEGER              :: IB       !indices
  INTEGER              :: NBAND    !number of solar radiation wave bands
  INTEGER              :: IC       !direct beam: ic=0; diffuse: ic=1

  REAL                 :: WL       !fraction of LAI+SAI that is LAI
  REAL                 :: WS       !fraction of LAI+SAI that is SAI
  REAL                 :: MPE      !prevents overflow for division by zero

  REAL, DIMENSION(1:2) :: RHO      !leaf/stem reflectance weighted by fraction LAI and SAI
  REAL, DIMENSION(1:2) :: TAU      !leaf/stem transmittance weighted by fraction LAI and SAI
  REAL, DIMENSION(1:2) :: FTDI     !down direct flux below veg per unit dif flux = 0
  REAL, DIMENSION(1:2) :: ALBSND   !snow albedo (direct)
  REAL, DIMENSION(1:2) :: ALBSNI   !snow albedo (diffuse)

  REAL                 :: VAI      !ELAI+ESAI
  REAL                 :: GDIR     !average projected leaf/stem area in solar direction
  REAL                 :: EXT      !optical depth direct beam per unit leaf + stem area

! --------------------------------------------------------------------------------------------------

  NBAND = 2
  MPE = 1.E-06

! initialize output because solar radiation only done if COSZ > 0

  DO IB = 1, NBAND
    ALBD(IB) = 0.
    ALBI(IB) = 0.
    ALBGRD(IB) = 0.
    ALBGRI(IB) = 0.
    FABD(IB) = 0.
    FABI(IB) = 0.
    FTDD(IB) = 0.
    FTID(IB) = 0.
    FTII(IB) = 0.
    IF (IB.EQ.1) FSUN = 0.
  END DO

  IF(COSZ <= 0) GOTO 100

! weight reflectance/transmittance by LAI and SAI

  DO IB = 1, NBAND
    VAI = ELAI + ESAI
    WL  = ELAI / MAX(VAI,MPE)
    WS  = ESAI / MAX(VAI,MPE)
    RHO(IB) = MAX(RHOL(VEGTYP,IB)*WL+RHOS(VEGTYP,IB)*WS, MPE)
    TAU(IB) = MAX(TAUL(VEGTYP,IB)*WL+TAUS(VEGTYP,IB)*WS, MPE)
  END DO

! snow age

   CALL SNOW_AGE (DT,TG,SNEQVO,SNEQV,FAGE)

! snow albedos: only if COSZ > 0 and FSNO > 0

  IF(OPT_ALB == 1) &
     CALL SNOWALB_BATS (NBAND, FSNO,COSZ,FAGE,ALBSND,ALBSNI)
  IF(OPT_ALB == 2) THEN
     CALL SNOWALB_CLASS (NBAND,QSNOW,DT,ALB,ALBOLD,ALBSND,ALBSNI)
     ALBOLD = ALB
  END IF

! ground surface albedo

  CALL GROUNDALB (NSOIL   ,NBAND   ,ICE     ,IST     ,ISC     , & !in
                  FSNO    ,SMC     ,ALBSND  ,ALBSNI  ,COSZ    , & !in
                  TG      ,                                     & !in
                  ALBGRD  ,ALBGRI  )                              !out

! loop over NBAND wavebands to calculate surface albedos and solar
! fluxes for unit incoming direct (IC=0) and diffuse flux (IC=1)

  DO IB = 1, NBAND
      IC = 0      ! direct
      CALL TWOSTREAM (IB     ,IC      ,VEGTYP  ,COSZ    ,VAI    , & !in
                      FWET   ,TV      ,ALBGRD  ,ALBGRI  ,RHO    , & !in
                      TAU    ,FVEG    ,IST     ,                  & !in
                      FABD   ,ALBD    ,FTDD    ,FTID    ,GDIR   )   !out
      IC = 1      ! diffuse
      CALL TWOSTREAM (IB     ,IC      ,VEGTYP  ,COSZ    ,VAI    , & !in
                      FWET   ,TV      ,ALBGRD  ,ALBGRI  ,RHO    , & !in
                      TAU    ,FVEG    ,IST     ,                  & !in
                      FABI   ,ALBI    ,FTDI    ,FTII    ,GDIR   )   !out
  END DO

! sunlit fraction of canopy. set FSUN = 0 if FSUN < 0.01.

  EXT = GDIR/COSZ * SQRT(1.-RHO(1)-TAU(1))
  FSUN = (1.-EXP(-EXT*VAI)) / MAX(EXT*VAI,MPE)
  EXT = FSUN

  IF (EXT .LT. 0.01) THEN
     WL = 0.
  ELSE
     WL = EXT 
  END IF
  FSUN = WL

100 CONTINUE

  END SUBROUTINE ALBEDO
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE SURRAD (MPE     ,FSUN    ,FSHA    ,ELAI    ,VAI     , & !in
                     LAISUN  ,LAISHA  ,SOLAD   ,SOLAI   ,FABD    , & !in
                     FABI    ,FTDD    ,FTID    ,FTII    ,ALBGRD  , & !in
                     ALBGRI  ,ALBD    ,ALBI    ,ix,iy,                   & !in
                     PARSUN  ,PARSHA  ,SAV     ,SAG     ,FSA     , & !out
                     FSR     ,NDVI    )                              !out
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! input

  INTEGER, INTENT(IN)                  :: ix,iy
  REAL, INTENT(IN)                 :: MPE     !prevents underflow errors if division by zero

  REAL, INTENT(IN)                 :: FSUN    !sunlit fraction of canopy
  REAL, INTENT(IN)                 :: FSHA    !shaded fraction of canopy
  REAL, INTENT(IN)                 :: ELAI    !leaf area, one-sided
  REAL, INTENT(IN)                 :: VAI     !leaf + stem area, one-sided
  REAL, INTENT(IN)                 :: LAISUN  !sunlit leaf area index, one-sided
  REAL, INTENT(IN)                 :: LAISHA  !shaded leaf area index, one-sided

  REAL, DIMENSION(1:2), INTENT(IN) :: SOLAD   !incoming direct solar radiation (w/m2)
  REAL, DIMENSION(1:2), INTENT(IN) :: SOLAI   !incoming diffuse solar radiation (w/m2)
  REAL, DIMENSION(1:2), INTENT(IN) :: FABD    !flux abs by veg (per unit incoming direct flux)
  REAL, DIMENSION(1:2), INTENT(IN) :: FABI    !flux abs by veg (per unit incoming diffuse flux)
  REAL, DIMENSION(1:2), INTENT(IN) :: FTDD    !down dir flux below veg (per incoming dir flux)
  REAL, DIMENSION(1:2), INTENT(IN) :: FTID    !down dif flux below veg (per incoming dir flux)
  REAL, DIMENSION(1:2), INTENT(IN) :: FTII    !down dif flux below veg (per incoming dif flux)
  REAL, DIMENSION(1:2), INTENT(IN) :: ALBGRD  !ground albedo (direct)
  REAL, DIMENSION(1:2), INTENT(IN) :: ALBGRI  !ground albedo (diffuse)
  REAL, DIMENSION(1:2), INTENT(IN) :: ALBD    !overall surface albedo (direct)
  REAL, DIMENSION(1:2), INTENT(IN) :: ALBI    !overall surface albedo (diffuse)

! output

  REAL, INTENT(OUT)                :: PARSUN  !average absorbed par for sunlit leaves (w/m2)
  REAL, INTENT(OUT)                :: PARSHA  !average absorbed par for shaded leaves (w/m2)
  REAL, INTENT(OUT)                :: SAV     !solar radiation absorbed by vegetation (w/m2)
  REAL, INTENT(OUT)                :: SAG     !solar radiation absorbed by ground (w/m2)
  REAL, INTENT(OUT)                :: FSA     !total absorbed solar radiation (w/m2)
  REAL, INTENT(OUT)                :: FSR     !total reflected solar radiation (w/m2)
  REAL, INTENT(OUT)                :: NDVI    !NDVI

! ------------------------ local variables ----------------------------------------------------
  INTEGER                          :: IB      !waveband number (1=vis, 2=nir)
  INTEGER                          :: NBAND   !number of solar radiation waveband classes

  REAL                             :: ABS     !absorbed solar radiation (w/m2)
  REAL                             :: RNIR    !reflected solar radiation [nir] (w/m2)
  REAL                             :: RVIS    !reflected solar radiation [vis] (w/m2)
  REAL                             :: LAIFRA  !leaf area fraction of canopy
  REAL                             :: TRD     !transmitted solar radiation: direct (w/m2)
  REAL                             :: TRI     !transmitted solar radiation: diffuse (w/m2)
  REAL, DIMENSION(1:2)             :: CAD     !direct beam absorbed by canopy (w/m2)
  REAL, DIMENSION(1:2)             :: CAI     !diffuse radiation absorbed by canopy (w/m2)
  REAL                             :: ANIR    !albedo nir
  REAL                             :: AVIS    !albedo vis
! ---------------------------------------------------------------------------------------------
   NBAND = 2

! zero summed solar fluxes

    SAG = 0.
    SAV = 0.
    FSA = 0.

! loop over nband wavebands

  DO IB = 1, NBAND

! absorbed by canopy

    CAD(IB) = SOLAD(IB)*FABD(IB)
    CAI(IB) = SOLAI(IB)*FABI(IB)
    SAV     = SAV + CAD(IB) + CAI(IB)
    FSA     = FSA + CAD(IB) + CAI(IB)
 
! transmitted solar fluxes incident on ground

    TRD = SOLAD(IB)*FTDD(IB)
    TRI = SOLAD(IB)*FTID(IB) + SOLAI(IB)*FTII(IB)

! solar radiation absorbed by ground surface

    ABS = TRD*(1.-ALBGRD(IB)) + TRI*(1.-ALBGRI(IB))
    SAG = SAG + ABS
    FSA = FSA + ABS
  END DO

! partition visible canopy absorption to sunlit and shaded fractions
! to get average absorbed par for sunlit and shaded leaves

     LAIFRA = ELAI / MAX(VAI,MPE)
     IF (FSUN .GT. 0.) THEN
        PARSUN = (CAD(1)+FSUN*CAI(1)) * LAIFRA / MAX(LAISUN,MPE)
        PARSHA = (FSHA*CAI(1))*LAIFRA / MAX(LAISHA,MPE)
     ELSE
        PARSUN = 0.
        PARSHA = (CAD(1)+CAI(1))*LAIFRA /MAX(LAISHA,MPE)
     ENDIF

! reflected solar radiation

     RVIS = ALBD(1)*SOLAD(1) + ALBI(1)*SOLAI(1)
     RNIR = ALBD(2)*SOLAD(2) + ALBI(2)*SOLAI(2)
     FSR  = RVIS + RNIR

     IF(FSR > 0.0) THEN
        ANIR = RNIR / (SOLAD(2)+SOLAI(2))
        AVIS = RVIS / (SOLAD(1)+SOLAI(1))
     ELSE
        ANIR = -0.99
        AVIS = -0.99
     END IF

     IF(FSR > 0.0) THEN
       NDVI = (ANIR-AVIS) / (ANIR+AVIS)
     ElSE
       NDVI = -0.99
     END IF

  END SUBROUTINE SURRAD
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE SNOW_AGE (DT,TG,SNEQVO,SNEQV,FAGE)
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! ------------------------ code history ------------------------------------------------------------
! from BATS
! ------------------------ input/output variables --------------------------------------------------
!input
   REAL, INTENT(IN) :: DT        !main time step (s)
   REAL, INTENT(IN) :: TG        !ground temperature (k)
   REAL, INTENT(IN) :: SNEQVO    !snow mass at last time step(mm)
   REAL, INTENT(IN) :: SNEQV     !snow water per unit ground area (mm)

!output
   REAL, INTENT(OUT) :: FAGE     !snow age

!local
   REAL            :: TAUSS      !non-dimensional snow age
   REAL            :: TAGE       !total aging effects
   REAL            :: AGE1       !effects of grain growth due to vapor diffusion
   REAL            :: AGE2       !effects of grain growth at freezing of melt water
   REAL            :: AGE3       !effects of soot
   REAL            :: DELA       !temporary variable
   REAL            :: SGE        !temporary variable
   REAL            :: DELS       !temporary variable
   REAL            :: DELA0      !temporary variable
   REAL            :: ARG        !temporary variable
! See Yang et al. (1997) J.of Climate for detail.
!---------------------------------------------------------------------------------------------------

   IF(SNEQV.LE.0.0) THEN
          TAUSS = 0.
   ELSE IF (SNEQV.GT.800.) THEN
          TAUSS = 0.
   ELSE
          DELA0 = 1.E-6*DT
          ARG   = 5.E3*(1./TFRZ-1./TG)
          AGE1  = EXP(ARG)
          AGE2  = EXP(AMIN1(0.,10.*ARG))
          AGE3  = 0.3
          TAGE  = AGE1+AGE2+AGE3
          DELA  = DELA0*TAGE
          DELS  = AMAX1(0.0,SNEQV-SNEQVO) / SWEMX
          SGE   = (TAUSS+DELA)*(1.0-DELS)
          TAUSS = AMAX1(0.,SGE)
   ENDIF

   FAGE= TAUSS/(TAUSS+1.)

  END SUBROUTINE SNOW_AGE
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE SNOWALB_BATS (NBAND,FSNO,COSZ,FAGE,ALBSND,ALBSNI)
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! input

  INTEGER,INTENT(IN) :: NBAND  !number of waveband classes

  REAL,INTENT(IN) :: COSZ    !cosine solar zenith angle
  REAL,INTENT(IN) :: FSNO    !snow cover fraction (-)
  REAL,INTENT(IN) :: FAGE    !snow age correction

! output

  REAL, DIMENSION(1:2),INTENT(OUT) :: ALBSND !snow albedo for direct(1=vis, 2=nir)
  REAL, DIMENSION(1:2),INTENT(OUT) :: ALBSNI !snow albedo for diffuse
! ---------------------------------------------------------------------------------------------

! ------------------------ local variables ----------------------------------------------------
  INTEGER :: IB          !waveband class

  REAL :: FZEN                 !zenith angle correction
  REAL :: CF1                  !temperary variable
  REAL :: SL2                  !2.*SL
  REAL :: SL1                  !1/SL
  REAL :: SL                   !adjustable parameter
  REAL, PARAMETER :: C1 = 0.2  !default in BATS 
  REAL, PARAMETER :: C2 = 0.5  !default in BATS
!  REAL, PARAMETER :: C1 = 0.2 * 2. ! double the default to match Sleepers River's
!  REAL, PARAMETER :: C2 = 0.5 * 2. ! snow surface albedo (double aging effects)
! ---------------------------------------------------------------------------------------------
! zero albedos for all points

        ALBSND(1: NBAND) = 0.
        ALBSNI(1: NBAND) = 0.

! when cosz > 0

        SL=2.0
        SL1=1./SL
        SL2=2.*SL
        CF1=((1.+SL1)/(1.+SL2*COSZ)-SL1)
        FZEN=AMAX1(CF1,0.)

        ALBSNI(1)=0.95*(1.-C1*FAGE)         
        ALBSNI(2)=0.65*(1.-C2*FAGE)        

        ALBSND(1)=ALBSNI(1)+0.4*FZEN*(1.-ALBSNI(1))    !  vis direct
        ALBSND(2)=ALBSNI(2)+0.4*FZEN*(1.-ALBSNI(2))    !  nir direct

  END SUBROUTINE SNOWALB_BATS
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE SNOWALB_CLASS (NBAND,QSNOW,DT,ALB,ALBOLD,ALBSND,ALBSNI)
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! input

  INTEGER,INTENT(IN) :: NBAND  !number of waveband classes

  REAL,INTENT(IN) :: QSNOW     !snowfall (mm/s)
  REAL,INTENT(IN) :: DT        !time step (sec)
  REAL,INTENT(IN) :: ALBOLD    !snow albedo at last time step

! in & out

  REAL,                INTENT(INOUT) :: ALB        ! 
! output

  REAL, DIMENSION(1:2),INTENT(OUT) :: ALBSND !snow albedo for direct(1=vis, 2=nir)
  REAL, DIMENSION(1:2),INTENT(OUT) :: ALBSNI !snow albedo for diffuse
! ---------------------------------------------------------------------------------------------

! ------------------------ local variables ----------------------------------------------------
  INTEGER :: IB          !waveband class

! ---------------------------------------------------------------------------------------------
! zero albedos for all points

        ALBSND(1: NBAND) = 0.
        ALBSNI(1: NBAND) = 0.

! when cosz > 0

         ALB = 0.55 + (ALBOLD-0.55) * EXP(-0.01*DT/3600.)

! 1 mm fresh snow(SWE) -- 10mm snow depth, assumed the fresh snow density 100kg/m3
! here assume 1cm snow depth will fully cover the old snow

         IF (QSNOW > 0.) then
           ALB = ALB + MIN(QSNOW*DT,SWEMX) * (0.84-ALB)/(SWEMX)
         ENDIF

         ALBSNI(1)= ALB         ! vis diffuse
         ALBSNI(2)= ALB         ! nir diffuse
         ALBSND(1)= ALB         ! vis direct
         ALBSND(2)= ALB         ! nir direct

  END SUBROUTINE SNOWALB_CLASS
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE GROUNDALB (NSOIL   ,NBAND   ,ICE     ,IST     ,ISC     , & !in
                        FSNO    ,SMC     ,ALBSND  ,ALBSNI  ,COSZ    , & !in
                        TG      ,                                     & !in
                        ALBGRD  ,ALBGRI  )                              !out
! --------------------------------------------------------------------------------------------------
  USE RAD_PARAMETERS
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
!input

  INTEGER,                  INTENT(IN)  :: NSOIL  !number of soil layers
  INTEGER,                  INTENT(IN)  :: NBAND  !number of solar radiation waveband classes
  INTEGER,                  INTENT(IN)  :: ICE    !value of ist for land ice
  INTEGER,                  INTENT(IN)  :: IST    !surface type
  INTEGER,                  INTENT(IN)  :: ISC    !soil color class (1-lighest; 8-darkest)
  REAL,                     INTENT(IN)  :: FSNO   !fraction of surface covered with snow (-)
  REAL,                     INTENT(IN)  :: TG     !ground temperature (k)
  REAL,                     INTENT(IN)  :: COSZ   !cosine solar zenith angle (0-1)
  REAL, DIMENSION(1:NSOIL), INTENT(IN)  :: SMC    !volumetric soil water content (m3/m3)
  REAL, DIMENSION(1:    2), INTENT(IN)  :: ALBSND !direct beam snow albedo (vis, nir)
  REAL, DIMENSION(1:    2), INTENT(IN)  :: ALBSNI !diffuse snow albedo (vis, nir)

!output

  REAL, DIMENSION(1:    2), INTENT(OUT) :: ALBGRD !ground albedo (direct beam: vis, nir)
  REAL, DIMENSION(1:    2), INTENT(OUT) :: ALBGRI !ground albedo (diffuse: vis, nir)

!local 

  INTEGER                               :: IB     !waveband number (1=vis, 2=nir)
  REAL                                  :: INC    !soil water correction factor for soil albedo
  REAL                                  :: ALBSOD !soil albedo (direct)
  REAL                                  :: ALBSOI !soil albedo (diffuse)
! --------------------------------------------------------------------------------------------------

  DO IB = 1, NBAND
        INC = MAX(0.11-0.40*SMC(1), 0.)
        IF (IST .EQ. 1)  THEN                     !soil
           ALBSOD = MIN(ALBSAT(ISC,IB)+INC,ALBDRY(ISC,IB))
           ALBSOI = ALBSOD
        ELSE IF (TG .GT. TFRZ) THEN               !unfrozen lake, wetland
           ALBSOD = 0.06/(MAX(0.01,COSZ)**1.7 + 0.15)
           ALBSOI = 0.06
        ELSE                                      !frozen lake, wetland
           ALBSOD = ALBLAK(IB)
           ALBSOI = ALBSOD
        END IF

! increase desert and semi-desert albedos

        IF (IST .EQ. 1 .AND. ISC .EQ. 9) THEN
           ALBSOD = ALBSOD + 0.10
           ALBSOI = ALBSOI + 0.10
        end if

        ALBGRD(IB) = ALBSOD*(1.-FSNO) + ALBSND(IB)*FSNO
        ALBGRI(IB) = ALBSOI*(1.-FSNO) + ALBSNI(IB)*FSNO
  END DO

  END SUBROUTINE GROUNDALB
! ==================================================================================================
! --------------------------------------------------------------------------------------------------
  SUBROUTINE TWOSTREAM (IB     ,IC      ,VEGTYP  ,COSZ    ,VAI    , & !in
                        FWET   ,T       ,ALBGRD  ,ALBGRI  ,RHO    , & !in
                        TAU    ,FVEG    ,IST     ,                  & !in
                        FAB    ,FRE     ,FTD     ,FTI     ,GDIR   )   !out
! --------------------------------------------------------------------------------------------------
! use two-stream approximation of Dickinson (1983) Adv Geophysics
! 25:305-353 and Sellers (1985) Int J Remote Sensing 6:1335-1372
! to calculate fluxes absorbed by vegetation, reflected by vegetation,
! and transmitted through vegetation for unit incoming direct or diffuse
! flux given an underlying surface with known albedo.
! --------------------------------------------------------------------------------------------------
  USE VEG_PARAMETERS
  USE RAD_PARAMETERS
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! input

   INTEGER,              INTENT(IN)  :: IST    !surface type
   INTEGER,              INTENT(IN)  :: IB      !waveband number
   INTEGER,              INTENT(IN)  :: IC      !0=unit incoming direct; 1=unit incoming diffuse
   INTEGER,              INTENT(IN)  :: VEGTYP  !vegetation type

   REAL,                 INTENT(IN)  :: COSZ    !cosine of direct zenith angle (0-1)
   REAL,                 INTENT(IN)  :: VAI     !one-sided leaf+stem area index (m2/m2)
   REAL,                 INTENT(IN)  :: FWET    !fraction of lai, sai that is wetted (-)
   REAL,                 INTENT(IN)  :: T       !surface temperature (k)

   REAL, DIMENSION(1:2), INTENT(IN)  :: ALBGRD  !direct  albedo of underlying surface (-)
   REAL, DIMENSION(1:2), INTENT(IN)  :: ALBGRI  !diffuse albedo of underlying surface (-)
   REAL, DIMENSION(1:2), INTENT(IN)  :: RHO     !leaf+stem reflectance
   REAL, DIMENSION(1:2), INTENT(IN)  :: TAU     !leaf+stem transmittance
   REAL,                 INTENT(IN)  :: FVEG    !green vegetation fraction [0.0-1.0]

! output

   REAL, DIMENSION(1:2), INTENT(OUT) :: FAB     !flux abs by veg layer (per unit incoming flux)
   REAL, DIMENSION(1:2), INTENT(OUT) :: FRE     !flux refl above veg layer (per unit incoming flux)
   REAL, DIMENSION(1:2), INTENT(OUT) :: FTD     !down dir flux below veg layer (per unit in flux)
   REAL, DIMENSION(1:2), INTENT(OUT) :: FTI     !down dif flux below veg layer (per unit in flux)
   REAL,                 INTENT(OUT) :: GDIR    !projected leaf+stem area in solar direction

! local
   REAL                              :: OMEGA   !fraction of intercepted radiation that is scattered
   REAL                              :: OMEGAL  !omega for leaves
   REAL                              :: BETAI   !upscatter parameter for diffuse radiation
   REAL                              :: BETAIL  !betai for leaves
   REAL                              :: BETAD   !upscatter parameter for direct beam radiation
   REAL                              :: BETADL  !betad for leaves
   REAL                              :: EXT     !optical depth of direct beam per unit leaf area
   REAL                              :: AVMU    !average diffuse optical depth

   REAL                              :: COSZI   !0.001 <= cosz <= 1.000
   REAL                              :: ASU     !single scattering albedo
   REAL                              :: CHIL    ! -0.4 <= xl <= 0.6

   REAL                              :: TMP0,TMP1,TMP2,TMP3,TMP4,TMP5,TMP6,TMP7,TMP8,TMP9
   REAL                              :: P1,P2,P3,P4,S1,S2,U1,U2,U3
   REAL                              :: B,C,D,D1,D2,F,H,H1,H2,H3,H4,H5,H6,H7,H8,H9,H10
   REAL                              :: PHI1,PHI2,SIGMA
   REAL                              :: FTDS,FTIS,FRES

!  variables for the modified two-stream scheme
!  Niu and Yang (2004), JGR

   REAL, PARAMETER :: PAI = 3.14159265 
   REAL :: HD       !crown depth (m)
   REAL :: BB       !vertical crown radius (m)
   REAL :: THETAP   !angle conversion from SZA 
   REAL :: FA       !foliage volume density (m-1)
   REAL :: NEWVAI   !effective LSAI (-)
   REAL :: BGAP     !between canopy gap fraction for beam (-)
   REAL :: WGAP     !within canopy gap fraction for beam (-)
   REAL :: KOPEN    !gap fraction for diffue light (-)
   REAL :: GAP      !total gap fraction for beam ( <=1-shafac )

! -----------------------------------------------------------------
! compute within and between gaps

     if(VAI == 0.0) THEN
         GAP     = 1.0
         KOPEN   = 1.0
     ELSE
         IF(OPT_RAD == 1) THEN
           HD      = HVT(VEGTYP) - HVB(VEGTYP)
           BB      = 0.5 * HD
           THETAP  = ATAN(BB/RC(VEGTYP) * TAN(ACOS(MAX(0.01,COSZ))) )
           BGAP    = EXP(-DEN(VEGTYP) * PAI * RC(VEGTYP)**2/COS(THETAP) )
           FA      = VAI/(1.33 * PAI * RC(VEGTYP)**3.0 *(BB/RC(VEGTYP))*DEN(VEGTYP))
           NEWVAI  = HD*FA
           WGAP    = (1.0-BGAP) * EXP(-0.5*NEWVAI/COSZ)
           GAP     = MIN(1.0-FVEG, BGAP+WGAP)
           KOPEN   = 0.05
         END IF

         IF(OPT_RAD == 2) THEN
           GAP     = 0.0
           KOPEN   = 0.0
         END IF

         IF(OPT_RAD == 3) THEN
           GAP     = 1.0-FVEG
           KOPEN   = 0.0
         END IF
     end if

! calculate two-stream parameters OMEGA, BETAD, BETAI, AVMU, GDIR, EXT.
! OMEGA, BETAD, BETAI are adjusted for snow. values for OMEGA*BETAD
! and OMEGA*BETAI are calculated and then divided by the new OMEGA
! because the product OMEGA*BETAI, OMEGA*BETAD is used in solution.
! also, the transmittances and reflectances (TAU, RHO) are linear
! weights of leaf and stem values.

     COSZI  = MAX(0.001, COSZ)
     CHIL   = MIN( MAX(XL(VEGTYP), -0.4), 0.6)
     IF (ABS(CHIL) .LE. 0.01) CHIL = 0.01
     PHI1   = 0.5 - 0.633*CHIL - 0.330*CHIL*CHIL
     PHI2   = 0.877 * (1.-2.*PHI1)
     GDIR   = PHI1 + PHI2*COSZI
     EXT    = GDIR/COSZI
     AVMU   = ( 1. - PHI1/PHI2 * LOG((PHI1+PHI2)/PHI1) ) / PHI2
     OMEGAL = RHO(IB) + TAU(IB)
     TMP0   = GDIR + PHI2*COSZI
     TMP1   = PHI1*COSZI
     ASU    = 0.5*OMEGAL*GDIR/TMP0 * ( 1.-TMP1/TMP0*LOG((TMP1+TMP0)/TMP1) )
     BETADL = (1.+AVMU*EXT)/(OMEGAL*AVMU*EXT)*ASU
     BETAIL = 0.5 * ( RHO(IB)+TAU(IB) + (RHO(IB)-TAU(IB))   &
            * ((1.+CHIL)/2.)**2 ) / OMEGAL

! adjust omega, betad, and betai for intercepted snow

     IF (T .GT. TFRZ) THEN                                !no snow
        TMP0 = OMEGAL
        TMP1 = BETADL
        TMP2 = BETAIL
     ELSE
        TMP0 =   (1.-FWET)*OMEGAL        + FWET*OMEGAS(IB)
        TMP1 = ( (1.-FWET)*OMEGAL*BETADL + FWET*OMEGAS(IB)*BETADS ) / TMP0
        TMP2 = ( (1.-FWET)*OMEGAL*BETAIL + FWET*OMEGAS(IB)*BETAIS ) / TMP0
     END IF

     OMEGA = TMP0
     BETAD = TMP1
     BETAI = TMP2

! absorbed, reflected, transmitted fluxes per unit incoming radiation

     B = 1. - OMEGA + OMEGA*BETAI
     C = OMEGA*BETAI
     TMP0 = AVMU*EXT
     D = TMP0 * OMEGA*BETAD
     F = TMP0 * OMEGA*(1.-BETAD)
     TMP1 = B*B - C*C
     H = SQRT(TMP1) / AVMU
     SIGMA = TMP0*TMP0 - TMP1
     !if(SIGMA == 0.) SIGMA = 1.e-6   !note: this can be a problem to induce FAB>1.0
     IF(SIGMA >= 0.0 .and. SIGMA <=  1.E-6) SIGMA =  1.E-6 !
     IF(SIGMA <= 0.0 .and. SIGMA >= -1.E-6) SIGMA = -1.E-6 !
     P1 = B + AVMU*H
     P2 = B - AVMU*H
     P3 = B + TMP0
     P4 = B - TMP0
     S1 = EXP(-H*VAI)
     S2 = EXP(-EXT*VAI)
     IF (IC .EQ. 0) THEN
        U1 = B - C/ALBGRD(IB)
        U2 = B - C*ALBGRD(IB)
        U3 = F + C*ALBGRD(IB)
     ELSE
        U1 = B - C/ALBGRI(IB)
        U2 = B - C*ALBGRI(IB)
        U3 = F + C*ALBGRI(IB)
     END IF
     TMP2 = U1 - AVMU*H
     TMP3 = U1 + AVMU*H
     D1 = P1*TMP2/S1 - P2*TMP3*S1
     TMP4 = U2 + AVMU*H
     TMP5 = U2 - AVMU*H
     D2 = TMP4/S1 - TMP5*S1
     H1 = -D*P4 - C*F
     TMP6 = D - H1*P3/SIGMA
     TMP7 = ( D - C - H1/SIGMA*(U1+TMP0) ) * S2
     H2 = ( TMP6*TMP2/S1 - P2*TMP7 ) / D1
     H3 = - ( TMP6*TMP3*S1 - P1*TMP7 ) / D1
     H4 = -F*P3 - C*D
     TMP8 = H4/SIGMA
     TMP9 = ( U3 - TMP8*(U2-TMP0) ) * S2
     H5 = - ( TMP8*TMP4/S1 + TMP9 ) / D2
     H6 = ( TMP8*TMP5*S1 + TMP9 ) / D2
     H7 = (C*TMP2) / (D1*S1)
     H8 = (-C*TMP3*S1) / D1
     H9 = TMP4 / (D2*S1)
     H10 = (-TMP5*S1) / D2

     !if (ic==0 .and. ib==2) &
     !write(*,*)IB,TMP6,TMP7,SIGMA,FWET

! downward direct and diffuse fluxes below vegetation
! Niu and Yang (2004), JGR.

     IF (IC .EQ. 0) THEN
        FTDS = S2                           *(1.0-GAP) + GAP
        FTIS = (H4*S2/SIGMA + H5*S1 + H6/S1)*(1.0-GAP)
     ELSE
        FTDS = 0.
        FTIS = (H9*S1 + H10/S1)*(1.0-KOPEN) + KOPEN
     END IF
     FTD(IB) = FTDS
     FTI(IB) = FTIS

! flux reflected by the surface (veg. and ground)

     IF (IC .EQ. 0) THEN
        FRES = (H1/SIGMA + H2 + H3)*(1.0-GAP  ) + ALBGRD(IB)*GAP
     ELSE
        FRES = (H7 + H8)           *(1.0-KOPEN) + ALBGRI(IB)*KOPEN
     END IF
     FRE(IB) = FRES

! flux absorbed by vegetation

     FAB(IB) = 1. - FRE(IB) - (1.-ALBGRD(IB))*FTD(IB) &
                            - (1.-ALBGRI(IB))*FTI(IB)

     !IF(ABS(SIGMA) == 1.E-8) THEN
     ! write(*,'(2I10,10F10.4)')IB,IC,FAB(IB),FRE(IB),&
     !                          FTD(IB),FTI(IB)
     !END IF

  END SUBROUTINE TWOSTREAM
! ==================================================================================================
  SUBROUTINE VEGE_FLUX(NSNOW   ,NSOIL   ,ISNOW   ,VEGTYP  ,VEG     , & !in
                       DT      ,SAV     ,SAG     ,LWDN    ,UR      , & !in
                       UU      ,VV      ,SFCTMP  ,THAIR   ,QAIR    , & !in
                       EAIR    ,RHOAIR  ,SNOWH   ,VAI     ,GAMMA   , & !in
                       FWET    ,LAISUN  ,LAISHA  ,CWP     ,DZSNSO  , & !in
                       HTOP    ,ZLVL    ,ZPD     ,Z0M     ,FVEG    , & !in
                       Z0MG    ,EMV     ,EMG     ,CANLIQ  ,          & !in
                       CANICE  ,STC     ,DF      ,RSSUN   ,RSSHA   , & !in
                       RSURF   ,LATHEA  ,PARSUN  ,PARSHA  ,IGS     , & !in
                       FOLN    ,CO2AIR  ,O2AIR   ,BTRAN   ,SFCPRS  , & !in
                       RHSUR   ,RGL     ,RSMIN   ,HS      ,ix  ,iy , & !in
                       EAH     ,TAH     ,TV      ,TG      ,CM      , & !inout
                       CH      ,                                     & !inout
                       TAUXV   ,TAUYV   ,IRG     ,IRC     ,SHG     , & !out
                       SHC     ,EVG     ,EVC     ,TR      ,GH      , & !out
                       T2MV    ,PSNSUN  ,PSNSHA  ,RS      )   !out

! --------------------------------------------------------------------------------------------------
! use newton-raphson iteration to solve for vegetation (tv) and
! ground (tg) temperatures that balance the surface energy budgets

! vegetated:
! -SAV + IRC[TV] + SHC[TV] + EVC[TV] + TR[TV] = 0
! -SAG + IRG[TG] + SHG[TG] + EVG[TG] + GH[TG] = 0
! --------------------------------------------------------------------------------------------------
  USE VEG_PARAMETERS
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! input

  REAL    ,INTENT(IN) :: RGL          !parameter used in radiation stress function
  REAL    ,INTENT(IN) :: RSMIN        !minimum canopy Resistance [s/m]
  REAL    ,INTENT(IN) :: HS           !parameter used in vapor pressure deficit function

  LOGICAL,                         INTENT(IN) :: VEG    !true if vegetated surface
  INTEGER,                         INTENT(IN) :: ix,iy
  INTEGER,                         INTENT(IN) :: NSNOW  !maximum no. of snow layers        
  INTEGER,                         INTENT(IN) :: NSOIL  !number of soil layers
  INTEGER,                         INTENT(IN) :: ISNOW  !actual no. of snow layers
  INTEGER,                         INTENT(IN) :: VEGTYP !vegetation physiology type
  REAL,                            INTENT(IN) :: FVEG   !greeness vegetation fraction (-)
  REAL,                            INTENT(IN) :: SAV    !solar rad absorbed by veg (w/m2)
  REAL,                            INTENT(IN) :: SAG    !solar rad absorbed by ground (w/m)
  REAL,                            INTENT(IN) :: LWDN   !atmospheric longwave radiation (w/m2)
  REAL,                            INTENT(IN) :: UR     !wind speed at height zlvl (m/s)
  REAL,                            INTENT(IN) :: UU     !wind speed in eastward dir (m/s)
  REAL,                            INTENT(IN) :: VV     !wind speed in northward dir (m/s)
  REAL,                            INTENT(IN) :: SFCTMP !air temperature at reference height (k)
  REAL,                            INTENT(IN) :: THAIR  !potential temp at reference height (k)
  REAL,                            INTENT(IN) :: EAIR   !vapor pressure air at zlvl (pa)
  REAL,                            INTENT(IN) :: QAIR   !specific humidity at zlvl (kg/kg)
  REAL,                            INTENT(IN) :: RHOAIR !density air (kg/m**3)
  REAL,                            INTENT(IN) :: DT     !time step (s)

  REAL,                            INTENT(IN) :: SNOWH  !actual snow depth [m]
  REAL,                            INTENT(IN) :: FWET   !wetted fraction of canopy
  REAL,                            INTENT(IN) :: HTOP   !top of canopy layer (m)
  REAL,                            INTENT(IN) :: CWP    !canopy wind parameter

  REAL,                            INTENT(IN) :: VAI    !total leaf area index + stem area index
  REAL,                            INTENT(IN) :: LAISUN !sunlit leaf area index, one-sided (m2/m2)
  REAL,                            INTENT(IN) :: LAISHA !shaded leaf area index, one-sided (m2/m2)
  REAL,                            INTENT(IN) :: ZLVL   !reference height (m)
  REAL,                            INTENT(IN) :: ZPD    !zero plane displacement (m)
  REAL,                            INTENT(IN) :: Z0M    !roughness length, momentum (m)
  REAL,                            INTENT(IN) :: Z0MG   !roughness length, momentum, ground (m)
  REAL,                            INTENT(IN) :: EMV    !vegetation emissivity
  REAL,                            INTENT(IN) :: EMG    !ground emissivity

  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: STC    !soil/snow temperature (k)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DF     !thermal conductivity of snow/soil (w/m/k)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DZSNSO !thinkness of snow/soil layers (m)
  REAL,                            INTENT(IN) :: CANLIQ !intercepted liquid water (mm)
  REAL,                            INTENT(IN) :: CANICE !intercepted ice mass (mm)
  REAL,                            INTENT(IN) :: RSURF  !ground surface resistance (s/m)
  REAL,                            INTENT(IN) :: GAMMA  !psychrometric constant (pa/K)
  REAL,                            INTENT(IN) :: LATHEA !latent heat of vaporization/subli (j/kg)
  REAL,                            INTENT(IN) :: PARSUN !par absorbed per unit sunlit lai (w/m2)
  REAL,                            INTENT(IN) :: PARSHA !par absorbed per unit shaded lai (w/m2)
  REAL,                            INTENT(IN) :: FOLN   !foliage nitrogen (%)
  REAL,                            INTENT(IN) :: CO2AIR !atmospheric co2 concentration (pa)
  REAL,                            INTENT(IN) :: O2AIR  !atmospheric o2 concentration (pa)
  REAL,                            INTENT(IN) :: IGS    !growing season index (0=off, 1=on)
  REAL,                            INTENT(IN) :: SFCPRS !pressure (pa)
  REAL,                            INTENT(IN) :: BTRAN  !soil water transpiration factor (0 to 1)
  REAL,                            INTENT(IN) :: RHSUR  !raltive humidity in surface soil/snow air space (-)

! input/output
  REAL                          :: EAH    !canopy air vapor pressure (pa)
  REAL                          :: TAH    !canopy air temperature (k)
  !REAL,                         INTENT(INOUT) :: EAH    !canopy air vapor pressure (pa)
  !REAL,                         INTENT(INOUT) :: TAH    !canopy air temperature (k)
  REAL,                         INTENT(INOUT) :: TV     !vegetation temperature (k)
  REAL,                         INTENT(INOUT) :: TG     !ground temperature (k)
  REAL,                         INTENT(INOUT) :: CM     !momentum drag coefficient
  REAL,                         INTENT(INOUT) :: CH     !sensible heat exchange coefficient

! output
! -FSA + FIRA + FSH + (FCEV + FCTR + FGEV) + FCST + SSOIL = 0
  REAL,                           INTENT(OUT) :: TAUXV  !wind stress: e-w (n/m2)
  REAL,                           INTENT(OUT) :: TAUYV  !wind stress: n-s (n/m2)
  REAL,                           INTENT(OUT) :: IRC    !net longwave radiation (w/m2) [+= to atm]
  REAL,                           INTENT(OUT) :: SHC    !sensible heat flux (w/m2)     [+= to atm]
  REAL,                           INTENT(OUT) :: EVC    !evaporation heat flux (w/m2)  [+= to atm]
  REAL,                           INTENT(OUT) :: IRG    !net longwave radiation (w/m2) [+= to atm]
  REAL,                           INTENT(OUT) :: SHG    !sensible heat flux (w/m2)     [+= to atm]
  REAL,                           INTENT(OUT) :: EVG    !evaporation heat flux (w/m2)  [+= to atm]
  REAL,                           INTENT(OUT) :: TR     !transpiration heat flux (w/m2)[+= to atm]
  REAL,                           INTENT(OUT) :: GH     !ground heat (w/m2) [+ = to soil]
  REAL,                           INTENT(OUT) :: T2MV   !2 m height air temperature (k)
  REAL,                           INTENT(OUT) :: PSNSUN !sunlit leaf photosynthesis (umolco2/m2/s)
  REAL,                           INTENT(OUT) :: PSNSHA !shaded leaf photosynthesis (umolco2/m2/s)
  REAL,                           INTENT(OUT) :: RS     !stomatal resistance [s/m]

! ------------------------ local variables ----------------------------------------------------
  REAL :: CW           !water vapor exchange coefficient
  REAL :: FV           !friction velocity (m/s)
  REAL :: WSTAR        !friction velocity n vertical direction (m/s) (only for SFCDIF2)
  REAL :: Z0H          !roughness length, sensible heat (m)
  REAL :: Z0HG         !roughness length, sensible heat (m)
  REAL :: RB           !bulk leaf boundary layer resistance (s/m)
  REAL :: RAMC         !aerodynamic resistance for momentum (s/m)
  REAL :: RAHC         !aerodynamic resistance for sensible heat (s/m)
  REAL :: RAWC         !aerodynamic resistance for water vapor (s/m)
  REAL :: RAMG         !aerodynamic resistance for momentum (s/m)
  REAL :: RAHG         !aerodynamic resistance for sensible heat (s/m)
  REAL :: RAWG         !aerodynamic resistance for water vapor (s/m)
  REAL :: RSSUN        !sunlit leaf stomatal resistance (s/m)
  REAL :: RSSHA        !shaded leaf stomatal resistance (s/m)
  REAL :: MOL          !Monin-Obukhov length (m)
  REAL :: DTV          !change in tv, last iteration (k)
  REAL :: DTG          !change in tg, last iteration (k)

  REAL :: AIR,CIR      !coefficients for ir as function of ts**4
  REAL :: CSH          !coefficients for sh as function of ts
  REAL :: CEV          !coefficients for ev as function of esat[ts]
  REAL :: CGH          !coefficients for st as function of ts
  REAL :: ATR,CTR      !coefficients for tr as function of esat[ts]
  REAL :: ATA,BTA      !coefficients for tah as function of ts
  REAL :: AEA,BEA      !coefficients for eah as function of esat[ts]

  REAL :: ESTV         !saturation vapor pressure at ts (pa)
  REAL :: ESTG         !saturation vapor pressure at tg (pa)
  REAL :: DESTV        !d(es)/dt at ts (pa/k)
  REAL :: DESTG        !d(es)/dt at tg (pa/k)
  REAL :: ESATW        !es for water
  REAL :: ESATI        !es for ice
  REAL :: DSATW        !d(es)/dt at tg (pa/k) for water
  REAL :: DSATI        !d(es)/dt at tg (pa/k) for ice

  REAL :: FM           !momentum stability correction, weighted by prior iters
  REAL :: FH           !sen heat stability correction, weighted by prior iters
  REAL :: FHG          !sen heat stability correction, ground
  REAL :: HCAN         !canopy height (m) [note: hcan >= z0mg]

  REAL :: A            !temporary calculation
  REAL :: B            !temporary calculation
  REAL :: CAH          !sensible heat conductance, canopy air to ZLVL air (m/s)
  REAL :: CVH          !sensible heat conductance, leaf surface to canopy air (m/s)
  REAL :: CAW          !latent heat conductance, canopy air ZLVL air (m/s)
  REAL :: CTW          !transpiration conductance, leaf to canopy air (m/s)
  REAL :: CEW          !evaporation conductance, leaf to canopy air (m/s)
  REAL :: CGW          !latent heat conductance, ground to canopy air (m/s)
  REAL :: COND         !sum of conductances (s/m)
  REAL :: UC           !wind speed at top of canopy (m/s)
  REAL :: KH           !turbulent transfer coefficient, sensible heat, (m2/s)
  REAL :: H            !temporary sensible heat flux (w/m2)
  REAL :: HG           !temporary sensible heat flux (w/m2)
  REAL :: MOZ          !Monin-Obukhov stability parameter
  REAL :: MOZG         !Monin-Obukhov stability parameter
  REAL :: MOZOLD       !Monin-Obukhov stability parameter from prior iteration

  REAL :: VAIE         !total leaf area index + stem area index,effective
  REAL :: LAISUNE      !sunlit leaf area index, one-sided (m2/m2),effective
  REAL :: LAISHAE      !shaded leaf area index, one-sided (m2/m2),effective

  INTEGER :: K         !index
  INTEGER :: ITER      !iteration index
  INTEGER :: NITERC    !number of iterations for surface temperature
  INTEGER :: NITERG    !number of iterations for ground temperature
  INTEGER :: MOZSGN    !number of times MOZ changes sign
  REAL    :: MPE       !prevents overflow error if division by zero
  REAL    :: CISUN,CISHA        !internal co2
  REAL :: CAH2
  REAL :: Q2V
  REAL :: QSFC
  REAL :: FR

  !niuDATA NITERC,NITERG /5,3/
  DATA NITERC,NITERG /10,6/
  SAVE NITERC,NITERG
  REAL :: T, TDC       !Kelvin to degree Celsius with limit -50 to +50
  TDC(T)   = MIN( 50., MAX(-50.,(T-TFRZ)) )

! ---------------------------------------------------------------------------------------------
        MPE = 1E-6
! ---------------------------------------------------------------------------------------------
! initialization variables that do not depend on stability iteration
! ---------------------------------------------------------------------------------------------
        DTV = 0.
        DTG = 0.
        MOZSGN = 0
        MOZOLD = 0.
        HG     = 0.
        H      = 0.

! convert grid-cell LAI to the fractional vegetated area (FVEG)

       !VAIE    = MIN(6.,VAI    / FVEG)
       !LAISUNE = MIN(6.,LAISUN / FVEG)
       !LAISHAE = MIN(6.,LAISHA / FVEG)
        VAIE    = VAI    / FVEG
        LAISUNE = LAISUN / FVEG
        LAISHAE = LAISHA / FVEG

! saturation vapor pressure at ground temperature

        T = TDC(TG)
        CALL ESAT(T, ESATW, ESATI, DSATW, DSATI)
        IF (T .GT. 0.) THEN
           ESTG = ESATW
        ELSE
           ESTG = ESATI
        END IF

! canopy height

        HCAN = HTOP
        UC = UR*LOG(HCAN/Z0M)/LOG(ZLVL/Z0M)
        IF((HCAN-ZPD) <= 0.) THEN
          WRITE(*,*) "CRITICAL PROBLEM: HCAN <= ZPD"
          WRITE(*,*) 'HCAN  =',HCAN
          WRITE(*,*) 'ZPD   =',ZPD
          WRITE(*,*) 'SNOWH =',SNOWH
          STOP
        END IF

! prepare for longwave rad.

        AIR = -EMV*(1.+(1.-EMV)*(1.-EMG))*LWDN - EMV*EMG*SB*TG**4  
        CIR = (2.-EMV*(1.-EMG))*EMV*SB

! ---------------------------------------------------------------------------------------------
      DO ITER = 1, NITERC    !  begin stability iteration

       IF(ITER == 1) THEN
            Z0H  = Z0M  
            Z0HG = Z0MG
       ELSE
            Z0H  = Z0M    !* EXP(-CZIL*0.4*258.2*SQRT(FV*Z0M))
            Z0HG = Z0MG   !* EXP(-CZIL*0.4*258.2*SQRT(FV*Z0MG))
       END IF

! aerodyn resistances between heights zlvl and d+z0v

       IF(OPT_SFC == 1) THEN
          CALL SFCDIF1(ITER   ,SFCTMP ,RHOAIR ,H      ,QAIR   , & !in
                       ZLVL   ,ZPD    ,Z0M    ,Z0H    ,UR     , & !in
                       MPE    ,                                 & !in
                       MOZ    ,MOZSGN ,FM     ,FH     ,         & !inout
                       CM     ,CH     ,FV     )                   !out
   
       ENDIF
     
       IF(OPT_SFC == 2) THEN
          CALL SFCDIF2(ITER   ,Z0M    ,TAH    ,THAIR  ,UR     , & !in
                       CZIL   ,ZLVL   ,                         & !in
                       CM     ,CH     ,MOZ    ,WSTAR  ,         & !inout
                       FV     )                                   !out
       ENDIF

       RAMC = MAX(1.,1./(CM*UR))
       RAHC = MAX(1.,1./(CH*UR))
       RAWC = RAHC

! aerodyn resistance between heights z0g and d+z0v, RAG, and leaf
! boundary layer resistance, RB

       CALL RAGRB(ITER   ,VAIE   ,RHOAIR ,HG     ,TAH    , & !in
                  ZPD    ,Z0MG   ,Z0HG   ,HCAN   ,UC     , & !in
                  Z0H    ,FV     ,CWP    ,VEGTYP ,MPE    , & !in
                  TV     ,MOZG   ,FHG    ,                 & !inout
                  RAMG   ,RAHG   ,RAWG   ,RB     )           !out

! es and d(es)/dt evaluated at tv

        T = TDC(TV)
        CALL ESAT(T, ESATW, ESATI, DSATW, DSATI)
        IF (T .GT. 0.) THEN
           ESTV  = ESATW
           DESTV = DSATW
        ELSE
           ESTV  = ESATI
           DESTV = DSATI
        END IF

! stomatal resistance
        
     IF(ITER == 1 ) THEN
        IF (OPT_CRS == 1) then  ! Ball-Berry

         FR   = PARSUN / (PARSUN + PARSHA)
         CALL STOMATA (VEGTYP,MPE   ,PARSUN ,FOLN  ,FR    ,ix,iy,        & !in       
                       TV    ,ESTV  ,EAH    ,SFCTMP,SFCPRS, & !in
                       O2AIR ,CO2AIR,IGS    ,BTRAN ,RB    , & !in
                       RSSUN ,PSNSUN)                         !out

         FR   = PARSHA / (PARSUN + PARSHA)
         CALL STOMATA (VEGTYP,MPE   ,PARSHA ,FOLN  ,FR    ,ix,iy,        & !in
                       TV    ,ESTV  ,EAH    ,SFCTMP,SFCPRS, & !in
                       O2AIR ,CO2AIR,IGS    ,BTRAN ,RB    , & !in
                       RSSHA ,PSNSHA)                         !out

        END IF

        IF (OPT_CRS == 2) then  ! Jarvis
         CALL  CANRES (PARSUN,TV    ,BTRAN ,EAH    ,SFCPRS, & !in
                       RGL   ,HS    ,RSMIN ,                & !in
                       RSSUN ,PSNSUN)                  !out

         CALL  CANRES (PARSHA,TV    ,BTRAN ,EAH    ,SFCPRS, & !in
                       RGL   ,HS    ,RSMIN ,                & !in
                       RSSHA ,PSNSHA)                  !out
        END IF
     END IF

! prepare for sensible heat flux above veg.

        CAH  = 1./RAHC
        CVH  = 2.*VAIE/RB
        CGH  = 1./RAHG
        COND = CAH + CVH + CGH
        ATA  = (THAIR*CAH + TG*CGH) / COND
        BTA  = CVH/COND
        CSH  = (1.-BTA)*RHOAIR*CPAIR*CVH

! prepare for latent heat flux above veg.

        CAW  = 1./RAWC
        CEW  = FWET*VAIE/RB
        CTW  = (1.-FWET)*(LAISUNE/(RB+RSSUN) + LAISHAE/(RB+RSSHA))
        CGW  = 1./(RAWG+RSURF)
        COND = CAW + CEW + CTW + CGW
        AEA  = (EAIR*CAW + ESTG*CGW) / COND
        BEA  = (CEW+CTW)/COND
        CEV  = (1.-BEA)*CEW*RHOAIR*CPAIR/GAMMA
        CTR  = (1.-BEA)*CTW*RHOAIR*CPAIR/GAMMA

! evaluate surface fluxes with current temperature and solve for dts

        TAH = ATA + BTA*TV               ! canopy air T.
        EAH = AEA + BEA*ESTV             ! canopy air e

        IRC = FVEG*(AIR + CIR*TV**4)
        SHC = FVEG*RHOAIR*CPAIR*CVH * (  TV-TAH)
        EVC = FVEG*RHOAIR*CPAIR*CEW * (ESTV-EAH) / GAMMA
        TR  = FVEG*RHOAIR*CPAIR*CTW * (ESTV-EAH) / GAMMA

        EVC = MIN(CANLIQ*LATHEA/DT,EVC)

        B   = SAV-IRC-SHC-EVC-TR
        A   = FVEG*(4.*CIR*TV**3 + CSH + (CEV+CTR)*DESTV)
        DTV = B/A

        IRC = IRC + FVEG*4.*CIR*TV**3*DTV
        SHC = SHC + FVEG*CSH*DTV
        EVC = EVC + FVEG*CEV*DESTV*DTV
        TR  = TR  + FVEG*CTR*DESTV*DTV

! update vegetation surface temperature

        TV  = TV + DTV

! for computing M-O length in the next iteration

        H  = RHOAIR*CPAIR*(TAH - THAIR) /RAHC
        HG = RHOAIR*CPAIR*(TG  - TAH)   /RAHG

     END DO    ! end stability iteration

      IF(PARSUN > 0.) THEN
          RS  = RSSUN
      ELSE
          RS  = -1.E20
      END IF

      if(ix == 290 .and. iy == 60) then
         write(*,*) "RS",RS
         write(*,*) "RB",RB
         write(*,*) "RSSUN,PARSUN,LAISUN,PSNSUN",RSSUN,PARSUN,LAISUN,PSNSUN
         write(*,*) "RSSHA,PARSHA,LAISHA,PSNSUN",RSSHA,PARSHA,LAISHA,PSNSHA
      end if

! consistent specific humidity from canopy air vapor pressure
        QSFC = (0.622*EAH)/(SFCPRS-0.378*EAH)

! under-canopy fluxes and tg

        AIR = - EMG*(1.-EMV)*LWDN - EMG*EMV*SB*TV**4
        CIR = EMG*SB
        CSH = RHOAIR*CPAIR/RAHG
        CEV = RHOAIR*CPAIR / (GAMMA*(RAWG+RSURF))
        CGH = 2.*DF(ISNOW+1)/DZSNSO(ISNOW+1)

     DO ITER = 1, NITERG

        T = TDC(TG)
        CALL ESAT(T, ESATW, ESATI, DSATW, DSATI)
        IF (T .GT. 0.) THEN
            ESTG  = ESATW
            DESTG = DSATW
        ELSE
            ESTG  = ESATI
            DESTG = DSATI
        END IF

        IRG = CIR*TG**4 + AIR
        SHG = CSH * (TG         - TAH         )
        EVG = CEV * (ESTG*RHSUR - EAH         )
        GH  = CGH * (TG         - STC(ISNOW+1))

        B = SAG-IRG-SHG-EVG-GH
        A = 4.*CIR*TG**3+CSH+CEV*DESTG+CGH
        DTG = B/A

        IRG = IRG + 4.*CIR*TG**3*DTG
        SHG = SHG + CSH*DTG
        EVG = EVG + CEV*DESTG*DTG
        GH  = GH  + CGH*DTG
        TG  = TG  + DTG
      END DO

        !write(*,*)'VEGE_FLUX:TAH=',TAH,'TG=',TG,'TV=',TV

! if snow on ground and TG > TFRZ: reset TG = TFRZ. reevaluate ground fluxes.

     IF(OPT_STC == 1) THEN
     IF (SNOWH > 0.05 .AND. TG > TFRZ) THEN
        TG  = TFRZ
        IRG = CIR*TG**4 - EMG*(1.-EMV)*LWDN - EMG*EMV*SB*TV**4
        SHG = CSH * (TG         - TAH)
        EVG = CEV * (ESTG*RHSUR - EAH)
        GH  = SAG - (IRG+SHG+EVG)
     END IF
     END IF

! wind stresses

     TAUXV = -RHOAIR*CM*UR*UU
     TAUYV = -RHOAIR*CM*UR*VV

! 2 m height air temperature

     IF (OPT_SFC == 1 .OR. OPT_SFC == 2) THEN
        CAH2 = FV*VKC/LOG((2.+Z0H)/Z0H)                          
        IF (CAH2 .LT. 1.E-5 ) THEN
           T2MV = TAH
           Q2V  = QSFC
        ELSE
           T2MV = TAH  - CAH/CAH2*(TAH  - SFCTMP)
           Q2V  = QSFC - CAH/CAH2*(QSFC -   QAIR)
        ENDIF
     ENDIF

   !T2MV = TAH - (SHG+SHC)/(RHOAIR*CPAIR*FV) * 1./VKC * LOG((2.+Z0H)/Z0H)

  END SUBROUTINE VEGE_FLUX
! ==================================================================================================
  SUBROUTINE BARE_FLUX (NSNOW   ,NSOIL   ,ISNOW   ,DT      ,SAG     , & !in
                        LWDN    ,UR      ,UU      ,VV      ,SFCTMP  , & !in
                        THAIR   ,QAIR    ,EAIR    ,RHOAIR  ,SNOWH   , & !in
                        DZSNSO  ,ZLVL    ,ZPD     ,Z0M     ,SFCPRS  , & !in
                        EMG     ,STC     ,DF      ,RSURF   ,LATHEA  , & !in
                        GAMMA   ,RHSUR   ,ix      ,iy      ,          & !in
                        TGB     ,CM      ,CH      ,                   & !inout
                        TAUXB   ,TAUYB   ,IRB     ,SHB     ,EVB     , & !out
                        GHB     ,T2MB    )                              !out
! --------------------------------------------------------------------------------------------------
! use newton-raphson iteration to solve ground (tg) temperature
! that balances the surface energy budgets for bare soil fraction.

! bare soil:
! -SAB + IRB[TG] + SHB[TG] + EVB[TG] + GHB[TG] = 0
! ----------------------------------------------------------------------
  USE VEG_PARAMETERS
! ----------------------------------------------------------------------
  IMPLICIT NONE
! ----------------------------------------------------------------------
! input
  INTEGER,                         INTENT(IN) :: ix,iy
  INTEGER,                         INTENT(IN) :: NSNOW  !maximum no. of snow layers
  INTEGER,                         INTENT(IN) :: NSOIL  !number of soil layers
  INTEGER,                         INTENT(IN) :: ISNOW  !actual no. of snow layers
  REAL,                            INTENT(IN) :: DT     !time step (s)
  REAL,                            INTENT(IN) :: SAG    !solar radiation absorbed by ground (w/m2)
  REAL,                            INTENT(IN) :: LWDN   !atmospheric longwave radiation (w/m2)
  REAL,                            INTENT(IN) :: UR     !wind speed at height zlvl (m/s)
  REAL,                            INTENT(IN) :: UU     !wind speed in eastward dir (m/s)
  REAL,                            INTENT(IN) :: VV     !wind speed in northward dir (m/s)
  REAL,                            INTENT(IN) :: SFCTMP !air temperature at reference height (k)
  REAL,                            INTENT(IN) :: SFCPRS !surace air pressure (Pa)
  REAL,                            INTENT(IN) :: THAIR  !potential temperature at height zlvl (k)
  REAL,                            INTENT(IN) :: QAIR   !specific humidity at height zlvl (kg/kg)
  REAL,                            INTENT(IN) :: EAIR   !vapor pressure air at height (pa)
  REAL,                            INTENT(IN) :: RHOAIR !density air (kg/m3)
  REAL,                            INTENT(IN) :: SNOWH  !actual snow depth [m]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DZSNSO !thickness of snow/soil layers (m)
  REAL,                            INTENT(IN) :: ZLVL   !reference height (m)
  REAL,                            INTENT(IN) :: ZPD    !zero plane displacement (m)
  REAL,                            INTENT(IN) :: Z0M    !roughness length, momentum, ground (m)
  REAL,                            INTENT(IN) :: EMG    !ground emissivity
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: STC    !soil/snow temperature (k)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DF     !thermal conductivity of snow/soil (w/m/k)
  REAL,                            INTENT(IN) :: RSURF  !ground surface resistance (s/m)
  REAL,                            INTENT(IN) :: LATHEA !latent heat of vaporization/subli (j/kg)
  REAL,                            INTENT(IN) :: GAMMA  !psychrometric constant (pa/k)
  REAL,                            INTENT(IN) :: RHSUR  !raltive humidity in surface soil/snow air space (-)

! input/output
  REAL,                         INTENT(INOUT) :: TGB    !ground temperature (k)
  REAL,                         INTENT(INOUT) :: CM     !momentum drag coefficient
  REAL,                         INTENT(INOUT) :: CH     !sensible heat exchange coefficient

! output
! -SAB + IRB[TG] + SHB[TG] + EVB[TG] + GHB[TG] = 0

  REAL,                           INTENT(OUT) :: TAUXB  !wind stress: e-w (n/m2)
  REAL,                           INTENT(OUT) :: TAUYB  !wind stress: n-s (n/m2)
  REAL,                           INTENT(OUT) :: IRB    !net longwave rad (w/m2)   [+ to atm]
  REAL,                           INTENT(OUT) :: SHB    !sensible heat flux (w/m2) [+ to atm]
  REAL,                           INTENT(OUT) :: EVB    !latent heat flux (w/m2)   [+ to atm]
  REAL,                           INTENT(OUT) :: GHB    !ground heat flux (w/m2)  [+ to soil]
  REAL,                           INTENT(OUT) :: T2MB   !2 m height air temperature (k)

! local variables 

  REAL :: TAUX       !wind stress: e-w (n/m2)
  REAL :: TAUY       !wind stress: n-s (n/m2)
  REAL :: FIRA       !total net longwave rad (w/m2)      [+ to atm]
  REAL :: FSH        !total sensible heat flux (w/m2)    [+ to atm]
  REAL :: FGEV       !ground evaporation heat flux (w/m2)[+ to atm]
  REAL :: SSOIL      !soil heat flux (w/m2)             [+ to soil]
  REAL :: FIRE       !emitted ir (w/m2)
  REAL :: TRAD       !radiative temperature (k)
  REAL :: TAH        !"surface" temperature at height z0h+zpd (k)

  REAL :: CW         !water vapor exchange coefficient
  REAL :: FV         !friction velocity (m/s)
  REAL :: WSTAR      !friction velocity n vertical direction (m/s) (only for SFCDIF2)
  REAL :: Z0H        !roughness length, sensible heat, ground (m)
  REAL :: RB         !bulk leaf boundary layer resistance (s/m)
  REAL :: RAMB       !aerodynamic resistance for momentum (s/m)
  REAL :: RAHB       !aerodynamic resistance for sensible heat (s/m)
  REAL :: RAWB       !aerodynamic resistance for water vapor (s/m)
  REAL :: MOL        !Monin-Obukhov length (m)
  REAL :: DTG        !change in tg, last iteration (k)

  REAL :: CIR        !coefficients for ir as function of ts**4
  REAL :: CSH        !coefficients for sh as function of ts
  REAL :: CEV        !coefficients for ev as function of esat[ts]
  REAL :: CGH        !coefficients for st as function of ts

  REAL :: ESTG       !saturation vapor pressure at tg (pa)
  REAL :: DESTG      !d(es)/dt at tg (pa/K)
  REAL :: ESATW      !es for water
  REAL :: ESATI      !es for ice
  REAL :: DSATW      !d(es)/dt at tg (pa/K) for water
  REAL :: DSATI      !d(es)/dt at tg (pa/K) for ice

  REAL :: A          !temporary calculation
  REAL :: B          !temporary calculation
  REAL :: H          !temporary sensible heat flux (w/m2)
  REAL :: MOZ        !Monin-Obukhov stability parameter
  REAL :: MOZOLD     !Monin-Obukhov stability parameter from prior iteration
  REAL :: FM         !momentum stability correction, weighted by prior iters
  REAL :: FH         !sen heat stability correction, weighted by prior iters
  INTEGER :: MOZSGN  !number of times MOZ changes sign

  INTEGER :: ITER    !iteration index
  INTEGER :: NITERB  !number of iterations for surface temperature
  REAL    :: MPE     !prevents overflow error if division by zero
     REAL :: EHB2
     REAL :: CQ2B
     REAL :: QSFC
     REAL :: Q2B


  !niuDATA NITERB /3/
  DATA NITERB /6/
  SAVE NITERB
  REAL :: T, TDC     !Kelvin to degree Celsius with limit -50 to +50
  TDC(T)   = MIN( 50., MAX(-50.,(T-TFRZ)) )

! -----------------------------------------------------------------
! initialization variables that do not depend on stability iteration
! -----------------------------------------------------------------
        MPE = 1E-6
        DTG = 0.
        MOZSGN = 0
        MOZOLD = 0.
        H      = 0.

        CIR = EMG*SB
        CGH = 2.*DF(ISNOW+1)/DZSNSO(ISNOW+1)

! -----------------------------------------------------------------
      DO ITER = 1, NITERB  ! begin stability iteration

        IF(ITER == 1) THEN
            Z0H = Z0M 
        ELSE
            Z0H = Z0M !* EXP(-CZIL*0.4*258.2*SQRT(FV*Z0M))
        END IF

        IF(OPT_SFC == 1) THEN
          CALL SFCDIF1(ITER   ,SFCTMP ,RHOAIR ,H      ,QAIR   , & !in
                       ZLVL   ,ZPD    ,Z0M    ,Z0H    ,UR     , & !in
                       MPE    ,                         & !in
                       MOZ    ,MOZSGN ,FM     ,FH     ,         & !inout
                       CM     ,CH     ,FV     )                   !out
        ENDIF

        IF(OPT_SFC == 2) THEN
          CALL SFCDIF2(ITER   ,Z0M    ,TGB    ,THAIR  ,UR     , & !in
                       CZIL   ,ZLVL   ,                 & !in
                       CM     ,CH     ,MOZ    ,WSTAR  ,         & !inout
                       FV     )                                   !out
          IF(SNOWH > 0.) THEN
             CM = MIN(0.01,CM)   ! CM & CH are too large, causing
             CH = MIN(0.01,CH)   ! computational instability
          END IF

        ENDIF

        RAMB = MAX(1.,1./(CM*UR))
        RAHB = MAX(1.,1./(CH*UR))
        RAWB = RAHB

! es and d(es)/dt evaluated at tg

        T = TDC(TGB)
        CALL ESAT(T, ESATW, ESATI, DSATW, DSATI)
        IF (T .GT. 0.) THEN
            ESTG  = ESATW
            DESTG = DSATW
        ELSE
            ESTG  = ESATI
            DESTG = DSATI
        END IF

        CSH = RHOAIR*CPAIR/RAHB
        CEV = RHOAIR*CPAIR/GAMMA/(RSURF+RAWB)

! surface fluxes and dtg

        IRB   = CIR * TGB**4 - EMG*LWDN
        SHB   = CSH * (TGB        - THAIR       )
        EVB   = CEV * (ESTG*RHSUR - EAIR        )
        GHB   = CGH * (TGB        - STC(ISNOW+1))

        B     = SAG-IRB-SHB-EVB-GHB
        A     = 4.*CIR*TGB**3 + CSH + CEV*DESTG + CGH
        DTG   = B/A

        IRB = IRB + 4.*CIR*TGB**3*DTG
        SHB = SHB + CSH*DTG
        EVB = EVB + CEV*DESTG*DTG
        GHB = GHB + CGH*DTG

! update ground surface temperature

        TGB = TGB + DTG

! for M-O length

        H = CSH * (TGB - THAIR)

     END DO ! end stability iteration

     QSFC = 0.622*(ESTG*RHSUR)/(SFCPRS-0.378*(ESTG*RHSUR))
! -----------------------------------------------------------------

! if snow on ground and TG > TFRZ: reset TG = TFRZ. reevaluate ground fluxes.

     IF(OPT_STC == 1) THEN
     IF (SNOWH > 0.05 .AND. TGB > TFRZ) THEN
          TGB = TFRZ
          IRB = CIR * TGB**4 - EMG*LWDN
          SHB = CSH * (TGB        - THAIR)
          EVB = CEV * (ESTG*RHSUR - EAIR )          !ESTG reevaluate ?
          GHB = SAG - (IRB+SHB+EVB)
     END IF
     END IF

! wind stresses
         
     TAUXB = -RHOAIR*CM*UR*UU
     TAUYB = -RHOAIR*CM*UR*VV

! 2 m height air temperature

     EHB2  = FV*VKC/LOG((2.+Z0H)/Z0H)
     CQ2B  = EHB2
     IF (EHB2.lt.1.E-5 ) THEN
         T2MB  = TGB
         Q2B   = QSFC
     ELSE
         T2MB  = TGB - SHB/(RHOAIR*CPAIR*FV) * 1./VKC * LOG((2.+Z0H)/Z0H)
         Q2B   = QSFC - EVB/(LATHEA*RHOAIR)*(1./CQ2B + RSURF)
     ENDIF

     !T2MB = THAIR - SHB/(RHOAIR*CPAIR*FV) * 1./VKC * LOG((2.+Z0H)/Z0H)

  END SUBROUTINE BARE_FLUX
! ==================================================================================================
  SUBROUTINE RAGRB(ITER   ,VAI    ,RHOAIR ,HG     ,TAH    , & !in
                   ZPD    ,Z0MG   ,Z0HG   ,HCAN   ,UC     , & !in
                   Z0H    ,FV     ,CWP    ,VEGTYP ,MPE    , & !in
                   TV     ,MOZG   ,FHG    ,         & !inout
                   RAMG   ,RAHG   ,RAWG   ,RB     )           !out
! --------------------------------------------------------------------------------------------------
! compute under-canopy aerodynamic resistance RAG and leaf boundary layer
! resistance RB
! --------------------------------------------------------------------------------------------------
  USE VEG_PARAMETERS
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! inputs

  INTEGER,              INTENT(IN) :: ITER   !iteration index
  INTEGER,              INTENT(IN) :: VEGTYP !vegetation physiology type
  REAL,                 INTENT(IN) :: VAI    !total LAI + stem area index, one sided
  REAL,                 INTENT(IN) :: RHOAIR !density air (kg/m3)
  REAL,                 INTENT(IN) :: HG     !ground sensible heat flux (w/m2)
  REAL,                 INTENT(IN) :: TV     !vegetation temperature (k)
  REAL,                 INTENT(IN) :: TAH    !air temperature at height z0h+zpd (k)
  REAL,                 INTENT(IN) :: ZPD    !zero plane displacement (m)
  REAL,                 INTENT(IN) :: Z0MG   !roughness length, momentum, ground (m)
  REAL,                 INTENT(IN) :: HCAN   !canopy height (m) [note: hcan >= z0mg]
  REAL,                 INTENT(IN) :: UC     !wind speed at top of canopy (m/s)
  REAL,                 INTENT(IN) :: Z0H    !roughness length, sensible heat (m)
  REAL,                 INTENT(IN) :: Z0HG   !roughness length, sensible heat, ground (m)
  REAL,                 INTENT(IN) :: FV     !friction velocity (m/s)
  REAL,                 INTENT(IN) :: CWP    !canopy wind parameter
  REAL,                 INTENT(IN) :: MPE    !prevents overflow error if division by zero

! in & out

  REAL,              INTENT(INOUT) :: MOZG   !Monin-Obukhov stability parameter
  REAL,              INTENT(INOUT) :: FHG    !stability correction

! outputs
  REAL                             :: RAMG   !aerodynamic resistance for momentum (s/m)
  REAL                             :: RAHG   !aerodynamic resistance for sensible heat (s/m)
  REAL                             :: RAWG   !aerodynamic resistance for water vapor (s/m)
  REAL                             :: RB     !bulk leaf boundary layer resistance (s/m)


  REAL :: KH           !turbulent transfer coefficient, sensible heat, (m2/s)
  REAL :: TMP1         !temporary calculation
  REAL :: TMP2         !temporary calculation
  REAL :: TMPRAH2      !temporary calculation for aerodynamic resistances
  REAL :: TMPRB        !temporary calculation for rb
  real :: MOLG,FHGNEW,CWPC
! --------------------------------------------------------------------------------------------------
! stability correction to below canopy resistance

       MOZG = 0.
       MOLG = 0.

       IF(ITER > 1) THEN
        TMP1 = VKC * (GRAV/TAH) * HG/(RHOAIR*CPAIR)
        IF (ABS(TMP1) .LE. MPE) TMP1 = MPE
        MOLG = -1. * FV**3 / TMP1
        MOZG = MIN( (ZPD-Z0MG)/MOLG, 1.)
       END IF

       IF (MOZG < 0.) THEN
          FHGNEW  = (1. - 15.*MOZG)**(-0.25)
       ELSE
          FHGNEW  = 1.+ 4.7*MOZG
       ENDIF

       IF (ITER == 1) THEN
          FHG = FHGNEW
       ELSE
          FHG = 0.5 * (FHG+FHGNEW)
       ENDIF

       CWPC = CWP * FHG**0.5

       TMP1 = EXP( -CWPC*Z0HG/HCAN )
       TMP2 = EXP( -CWPC*(Z0H+ZPD)/HCAN )
       TMPRAH2 = HCAN*EXP(CWPC) / CWPC * (TMP1-TMP2)

! aerodynamic resistances raw and rah between heights zpd+z0h and z0hg.

       KH  = MAX ( VKC*FV*(HCAN-ZPD), MPE )
       RAMG = 0.
       RAHG = TMPRAH2 / KH
       RAWG = RAHG

! leaf boundary layer resistance

       TMPRB  = CWPC*50. / (1. - EXP(-CWPC/2.))
       RB     = TMPRB * SQRT(DLEAF(VEGTYP)/UC)
      !RB     = TMPRB * SQRT(2.E-3*VAI/UC)

  END SUBROUTINE RAGRB
! ==================================================================================================
  SUBROUTINE SFCDIF1(ITER   ,SFCTMP ,RHOAIR ,H      ,QAIR   , & !in
                     ZLVL   ,ZPD    ,Z0M    ,Z0H    ,UR     , & !in
                     MPE    ,                         & !in
                     MOZ    ,MOZSGN ,FM     ,FH     ,         & !inout
                     CM     ,CH     ,FV     )                   !out
! -------------------------------------------------------------------------------------------------
! computing surface drag coefficient CM for momentum and CH for heat
! -------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! -------------------------------------------------------------------------------------------------
! inputs

  INTEGER,              INTENT(IN) :: ITER   !iteration index
  REAL,                 INTENT(IN) :: SFCTMP !temperature at reference height (k)
  REAL,                 INTENT(IN) :: RHOAIR !density air (kg/m**3)
  REAL,                 INTENT(IN) :: H      !sensible heat flux (w/m2) [+ to atm]
  REAL,                 INTENT(IN) :: QAIR   !specific humidity at reference height (kg/kg)
  REAL,                 INTENT(IN) :: ZLVL   !reference height  (m)
  REAL,                 INTENT(IN) :: ZPD    !zero plane displacement (m)
  REAL,                 INTENT(IN) :: Z0H    !roughness length, sensible heat, ground (m)
  REAL,                 INTENT(IN) :: Z0M    !roughness length, momentum, ground (m)
  REAL,                 INTENT(IN) :: UR     !wind speed (m/s)
  REAL,                 INTENT(IN) :: MPE    !prevents overflow error if division by zero
! in & out

  INTEGER,           INTENT(INOUT) :: MOZSGN !number of times moz changes sign
  REAL,              INTENT(INOUT) :: MOZ    !Monin-Obukhov stability (z/L)
  REAL,              INTENT(INOUT) :: FM     !momentum stability correction, weighted by prior iters
  REAL,              INTENT(INOUT) :: FH     !sen heat stability correction, weighted by prior iters

! outputs

  REAL,                INTENT(OUT) :: CM     !drag coefficient for momentum
  REAL,                INTENT(OUT) :: CH     !drag coefficient for heat
  REAL,                INTENT(OUT) :: FV     !friction velocity (m/s)

! locals
  REAL    :: MOL                      !Monin-Obukhov length (m)
  REAL    :: TMPCM                    !temporary calculation for CM
  REAL    :: TMPCH                    !temporary calculation for CH
  REAL    :: FMNEW                    !stability correction factor, momentum, for current moz
  REAL    :: FHNEW                    !stability correction factor, sen heat, for current moz
  REAL    :: MOZOLD                   !Monin-Obukhov stability parameter from prior iteration
  REAL    :: TMP1,TMP2,TMP3,TMP4,TMP5 !temporary calculation
  REAL    :: TVIR                     !temporary virtual temperature (k)

  REAL    :: CMFM, CHFH
! -------------------------------------------------------------------------------------------------
! Monin-Obukhov stability parameter moz for next iteration

        MOZOLD = MOZ
  
        IF(ZLVL <= ZPD) THEN
        write(*,*) 'critical problem: ZLVL <= ZPD; model stops'
        STOP
        END IF

        TMPCM = LOG((ZLVL-ZPD) / Z0M)
        TMPCH = LOG((ZLVL-ZPD) / Z0H)

        IF(ITER == 1) THEN
          FV   = 0.0
          MOZ  = 0.0
          MOL  = 0.0
        ELSE
          TVIR = (1. + 0.61*QAIR) * SFCTMP
          TMP1 = VKC * (GRAV/TVIR) * H/(RHOAIR*CPAIR)
          IF (ABS(TMP1) .LE. MPE) TMP1 = MPE
          MOL  = -1. * FV**3 / TMP1
          MOZ  = MIN( (ZLVL-ZPD)/MOL, 1.)
        END IF

! accumulate number of times moz changes sign.

        IF (MOZOLD*MOZ .LT. 0.) MOZSGN = MOZSGN+1
        IF (MOZSGN .GE. 2) THEN
           MOZ = 0.
           FM = 0.
           FH = 0.
        END IF

! evaluate stability-dependent variables using moz from prior iteration
        IF (MOZ .LT. 0.) THEN
             TMP1 = (1. - 16.*MOZ)**0.25
             TMP2 = LOG((1.+TMP1*TMP1)/2.)
             TMP3 = LOG((1.+TMP1)/2.)
             FMNEW = 2.*TMP3 + TMP2 - 2.*ATAN(TMP1) + 1.5707963
             FHNEW = 2*TMP2
        ELSE
             FMNEW = -5.*MOZ
             FHNEW = -5.*MOZ
        ENDIF

! except for first iteration, weight stability factors for previous
! iteration to help avoid flip-flops from one iteration to the next

        IF (ITER == 1) THEN
             FM = FMNEW
             FH = FHNEW
        ELSE
             FM = 0.5 * (FM+FMNEW)
             FH = 0.5 * (FH+FHNEW)
        ENDIF

! exchange coefficients

        CMFM = TMPCM-FM
        CHFH = TMPCH-FH
        IF(ABS(CMFM) <= MPE) CMFM = MPE
        IF(ABS(CHFH) <= MPE) CHFH = MPE
        CM  = VKC*VKC/(CMFM*CMFM)
        CH  = VKC*VKC/(CMFM*CHFH)
        
! friction velocity

        FV = UR * SQRT(CM)
! -------------------------------------------------------------------------------------------
  END SUBROUTINE SFCDIF1
! ==================================================================================================
  SUBROUTINE SFCDIF2(ITER   ,Z0     ,THZ0   ,THLM   ,SFCSPD , & !in
                     CZIL   ,ZLM    ,                 & !in
                     AKMS   ,AKHS   ,RLMO   ,WSTAR2 ,         & !inout
                     USTAR  )                                   !out

! -------------------------------------------------------------------------------------------------
! SUBROUTINE SFCDIF (renamed SFCDIF_off to avoid clash with Eta PBL)
! -------------------------------------------------------------------------------------------------
! CALCULATE SURFACE LAYER EXCHANGE COEFFICIENTS VIA ITERATIVE PROCESS.
! SEE CHEN ET AL (1997, BLM)
! -------------------------------------------------------------------------------------------------

    IMPLICIT NONE
    INTEGER, INTENT(IN) :: ITER
    REAL,    INTENT(IN) :: ZLM, Z0, THZ0, THLM, SFCSPD, CZIL
    REAL, intent(INOUT) :: AKMS
    REAL, intent(INOUT) :: AKHS
    REAL, intent(INOUT) :: RLMO
    REAL, intent(INOUT) :: WSTAR2
    REAL,   intent(OUT) :: USTAR

    REAL     WWST, WWST2, VKRM, EXCM, BETA, BTG, ELFC, WOLD, WNEW
    REAL     PIHF, EPSU2, EPSUST, EPSIT, EPSA, ZTMIN, ZTMAX, HPBL,     &
         & SQVISC
    REAL     RIC, RRIC, FHNEU, RFC, RFAC, ZZ, PSLMU, PSLMS, PSLHU,     &
         & PSLHS
    REAL     XX, PSPMU, YY, PSPMS, PSPHU, PSPHS
    REAL     ZILFC, ZU, ZT, RDZ, CXCH
    REAL     DTHV, DU2, BTGH, ZSLU, ZSLT, RLOGU, RLOGT
    REAL     ZETALT, ZETALU, ZETAU, ZETAT, XLU4, XLT4, XU4, XT4

    REAL     XLU, XLT, XU, XT, PSMZ, SIMM, PSHZ, SIMH, USTARK, RLMN,  &
         &         RLMA

    INTEGER  ITRMX, ILECH, ITR
    PARAMETER                                                         &
         &        (WWST = 1.2,WWST2 = WWST * WWST,VKRM = 0.40,      &
         &         EXCM = 0.001                                             &
         &        ,BETA = 1./270.,BTG = BETA * GRAV,ELFC = VKRM * BTG          &
         &                  ,WOLD =.15,WNEW = 1. - WOLD,ITRMX = 05,         &
         &                   PIHF = 3.14159265/2.)
    PARAMETER                                                         &
         &         (EPSU2 = 1.E-4,EPSUST = 0.07,EPSIT = 1.E-4,EPSA = 1.E-8  &
         &         ,ZTMIN = -5.,ZTMAX = 1.,HPBL = 1000.0                    &
         &          ,SQVISC = 258.2)
    PARAMETER                                                         &
         &       (RIC = 0.183,RRIC = 1.0/ RIC,FHNEU = 0.8,RFC = 0.191       &
         &        ,RFAC = RIC / (FHNEU * RFC * RFC))
! ----------------------------------------------------------------------
! NOTE: THE TWO CODE BLOCKS BELOW DEFINE FUNCTIONS
! ----------------------------------------------------------------------
! LECH'S SURFACE FUNCTIONS
    PSLMU (ZZ)= -0.96* log (1.0-4.5* ZZ)
    PSLMS (ZZ)= ZZ * RRIC -2.076* (1. -1./ (ZZ +1.))
    PSLHU (ZZ)= -0.96* log (1.0-4.5* ZZ)
    PSLHS (ZZ)= ZZ * RFAC -2.076* (1. -1./ (ZZ +1.))
! PAULSON'S SURFACE FUNCTIONS
    PSPMU (XX)= -2.* log ( (XX +1.)*0.5) - log ( (XX * XX +1.)*0.5)   &
         &        +2.* ATAN (XX)                                            &
         &- PIHF
    PSPMS (YY)= 5.* YY
    PSPHU (XX)= -2.* log ( (XX * XX +1.)*0.5)
    PSPHS (YY)= 5.* YY

! THIS ROUTINE SFCDIF CAN HANDLE BOTH OVER OPEN WATER (SEA, OCEAN) AND
! OVER SOLID SURFACE (LAND, SEA-ICE).
! ----------------------------------------------------------------------
!     ZTFC: RATIO OF ZOH/ZOM  LESS OR EQUAL THAN 1
!     C......ZTFC=0.1
!     CZIL: CONSTANT C IN Zilitinkevich, S. S.1995,:NOTE ABOUT ZT
! ----------------------------------------------------------------------
    ILECH = 0

! ----------------------------------------------------------------------
    ZILFC = - CZIL * VKRM * SQVISC
    ZU = Z0
    RDZ = 1./ ZLM
    CXCH = EXCM * RDZ
    DTHV = THLM - THZ0

! BELJARS CORRECTION OF USTAR
    DU2 = MAX (SFCSPD * SFCSPD,EPSU2)
    BTGH = BTG * HPBL

    IF(ITER == 1) THEN
        IF (BTGH * AKHS * DTHV .ne. 0.0) THEN
           WSTAR2 = WWST2* ABS (BTGH * AKHS * DTHV)** (2./3.)
        ELSE
           WSTAR2 = 0.0
        END IF
        USTAR = MAX (SQRT (AKMS * SQRT (DU2+ WSTAR2)),EPSUST)
        RLMO = ELFC * AKHS * DTHV / USTAR **3
    END IF
 
! ZILITINKEVITCH APPROACH FOR ZT
    ZT = MAX(1.E-6,EXP (ZILFC * SQRT (USTAR * Z0))* Z0)
    ZSLU = ZLM + ZU
    ZSLT = ZLM + ZT
    RLOGU = log (ZSLU / ZU)
    RLOGT = log (ZSLT / ZT)

! ----------------------------------------------------------------------
! 1./MONIN-OBUKKHOV LENGTH-SCALE
! ----------------------------------------------------------------------
!    DO ITR = 1,ITRMX
       ZETALT = MAX (ZSLT * RLMO,ZTMIN)
       RLMO = ZETALT / ZSLT
       ZETALU = ZSLU * RLMO
       ZETAU = ZU * RLMO
       ZETAT = ZT * RLMO

       IF (ILECH .eq. 0) THEN
          IF (RLMO .lt. 0.)THEN
             XLU4 = 1. -16.* ZETALU
             XLT4 = 1. -16.* ZETALT
             XU4  = 1. -16.* ZETAU
             XT4  = 1. -16.* ZETAT
             XLU  = SQRT (SQRT (XLU4))
             XLT  = SQRT (SQRT (XLT4))
             XU   = SQRT (SQRT (XU4))

             XT = SQRT (SQRT (XT4))
             PSMZ = PSPMU (XU)
             SIMM = PSPMU (XLU) - PSMZ + RLOGU
             PSHZ = PSPHU (XT)
             SIMH = PSPHU (XLT) - PSHZ + RLOGT
          ELSE
             ZETALU = MIN (ZETALU,ZTMAX)
             ZETALT = MIN (ZETALT,ZTMAX)
             PSMZ = PSPMS (ZETAU)
             SIMM = PSPMS (ZETALU) - PSMZ + RLOGU
             PSHZ = PSPHS (ZETAT)
             SIMH = PSPHS (ZETALT) - PSHZ + RLOGT
          END IF
! ----------------------------------------------------------------------
! LECH'S FUNCTIONS
! ----------------------------------------------------------------------
       ELSE
          IF (RLMO .lt. 0.)THEN
             PSMZ = PSLMU (ZETAU)
             SIMM = PSLMU (ZETALU) - PSMZ + RLOGU
             PSHZ = PSLHU (ZETAT)
             SIMH = PSLHU (ZETALT) - PSHZ + RLOGT
          ELSE
             ZETALU = MIN (ZETALU,ZTMAX)
             ZETALT = MIN (ZETALT,ZTMAX)
             PSMZ = PSLMS (ZETAU)
             SIMM = PSLMS (ZETALU) - PSMZ + RLOGU
             PSHZ = PSLHS (ZETAT)
             SIMH = PSLHS (ZETALT) - PSHZ + RLOGT
          END IF
! ----------------------------------------------------------------------
       END IF

! ----------------------------------------------------------------------
! BELJAARS CORRECTION FOR USTAR
! ----------------------------------------------------------------------
       USTAR = MAX (SQRT (AKMS * SQRT (DU2+ WSTAR2)),EPSUST)

! ZILITINKEVITCH FIX FOR ZT
       ZT = MAX(1.E-6,EXP (ZILFC * SQRT (USTAR * Z0))* Z0)
       ZSLT = ZLM + ZT
!-----------------------------------------------------------------------
       RLOGT = log (ZSLT / ZT)
       USTARK = USTAR * VKRM
       AKMS = MAX (USTARK / SIMM,CXCH)
!-----------------------------------------------------------------------
! IF STATEMENTS TO AVOID TANGENT LINEAR PROBLEMS NEAR ZERO
!-----------------------------------------------------------------------
       AKHS = MAX (USTARK / SIMH,CXCH)

       IF (BTGH * AKHS * DTHV .ne. 0.0) THEN
          WSTAR2 = WWST2* ABS (BTGH * AKHS * DTHV)** (2./3.)
       ELSE
          WSTAR2 = 0.0
       END IF
!-----------------------------------------------------------------------
       RLMN = ELFC * AKHS * DTHV / USTAR **3
!-----------------------------------------------------------------------
!     IF(ABS((RLMN-RLMO)/RLMA).LT.EPSIT)    GO TO 110
!-----------------------------------------------------------------------
       RLMA = RLMO * WOLD+ RLMN * WNEW
!-----------------------------------------------------------------------
       RLMO = RLMA

!       write(*,'(a20,10f15.6)')'SFCDIF: RLMO=',RLMO,RLMN,ELFC , AKHS , DTHV , USTAR
!    END DO
! ----------------------------------------------------------------------
  END SUBROUTINE SFCDIF2
! ==================================================================================================
  SUBROUTINE ESAT(T, ESW, ESI, DESW, DESI)
!---------------------------------------------------------------------------------------------------
! use polynomials to calculate saturation vapor pressure and derivative with
! respect to temperature: over water when t > 0 c and over ice when t <= 0 c
  IMPLICIT NONE
!---------------------------------------------------------------------------------------------------
! in

  REAL, intent(in)  :: T              !temperature

!out

  REAL, intent(out) :: ESW            !saturation vapor pressure over water (pa)
  REAL, intent(out) :: ESI            !saturation vapor pressure over ice (pa)
  REAL, intent(out) :: DESW           !d(esat)/dt over water (pa/K)
  REAL, intent(out) :: DESI           !d(esat)/dt over ice (pa/K)

! local

  REAL :: A0,A1,A2,A3,A4,A5,A6  !coefficients for esat over water
  REAL :: B0,B1,B2,B3,B4,B5,B6  !coefficients for esat over ice
  REAL :: C0,C1,C2,C3,C4,C5,C6  !coefficients for dsat over water
  REAL :: D0,D1,D2,D3,D4,D5,D6  !coefficients for dsat over ice

  PARAMETER (A0=6.107799961    , A1=4.436518521E-01,  &
             A2=1.428945805E-02, A3=2.650648471E-04,  &
             A4=3.031240396E-06, A5=2.034080948E-08,  &
             A6=6.136820929E-11)

  PARAMETER (B0=6.109177956    , B1=5.034698970E-01,  &
             B2=1.886013408E-02, B3=4.176223716E-04,  &
             B4=5.824720280E-06, B5=4.838803174E-08,  &
             B6=1.838826904E-10)

  PARAMETER (C0= 4.438099984E-01, C1=2.857002636E-02,  &
             C2= 7.938054040E-04, C3=1.215215065E-05,  &
             C4= 1.036561403E-07, C5=3.532421810e-10,  &
             C6=-7.090244804E-13)

  PARAMETER (D0=5.030305237E-01, D1=3.773255020E-02,  &
             D2=1.267995369E-03, D3=2.477563108E-05,  &
             D4=3.005693132E-07, D5=2.158542548E-09,  &
             D6=7.131097725E-12)

  ESW  = 100.*(A0+T*(A1+T*(A2+T*(A3+T*(A4+T*(A5+T*A6))))))
  ESI  = 100.*(B0+T*(B1+T*(B2+T*(B3+T*(B4+T*(B5+T*B6))))))
  DESW = 100.*(C0+T*(C1+T*(C2+T*(C3+T*(C4+T*(C5+T*C6))))))
  DESI = 100.*(D0+T*(D1+T*(D2+T*(D3+T*(D4+T*(D5+T*D6))))))

  END SUBROUTINE ESAT
! ==================================================================================================
! ----------------------------------------------------------------------
  SUBROUTINE STOMATA (VEGTYP  ,MPE     ,APAR    ,FOLN    ,FR      ,ix,iy, & !in
                      TV      ,EI      ,EA      ,SFCTMP  ,SFCPRS  , & !in
                      O2      ,CO2     ,IGS     ,BTRAN   ,RB      , & !in
                      RS      ,PSN     )                              !out
! --------------------------------------------------------------------------------------------------
  USE VEG_PARAMETERS
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! input
  INTEGER,                         INTENT(IN) :: ix,iy
      INTEGER,INTENT(IN)  :: VEGTYP !vegetation physiology type

      REAL, INTENT(IN)    :: IGS    !growing season index (0=off, 1=on)
      REAL, INTENT(IN)    :: MPE    !prevents division by zero errors

      REAL, INTENT(IN)    :: TV     !foliage temperature (k)
      REAL, INTENT(IN)    :: EI     !vapor pressure inside leaf (sat vapor press at tv) (pa)
      REAL, INTENT(IN)    :: EA     !vapor pressure of canopy air (pa)
      REAL, INTENT(IN)    :: APAR   !par absorbed per unit lai (w/m2)
      REAL, INTENT(IN)    :: O2     !atmospheric o2 concentration (pa)
      REAL, INTENT(IN)    :: CO2    !atmospheric co2 concentration (pa)
      REAL, INTENT(IN)    :: SFCPRS !air pressure at reference height (pa)
      REAL, INTENT(IN)    :: SFCTMP !air temperature at reference height (k)
      REAL, INTENT(IN)    :: BTRAN  !soil water transpiration factor (0 to 1)
      REAL, INTENT(IN)    :: FOLN   !foliage nitrogen concentration (%)
      REAL, INTENT(IN)    :: RB     !boundary layer resistance (s/m)
      REAL, INTENT(IN)    :: FR

! output
      REAL, INTENT(OUT)   :: RS     !leaf stomatal resistance (s/m)
      REAL, INTENT(OUT)   :: PSN    !foliage photosynthesis (umol co2 /m2/ s) [always +]

! ---------------------------------------------------------------------------------------------

! ------------------------ local variables ----------------------------------------------------
      INTEGER :: ITER     !iteration index
      INTEGER :: NITER    !number of iterations

      DATA NITER /10/
      SAVE NITER

      REAL :: AB          !used in statement functions
      REAL :: BC          !used in statement functions
      REAL :: F1          !generic temperature response (statement function)
      REAL :: F2          !generic temperature inhibition (statement function)
      REAL :: F3          !
      REAL :: TC          !foliage temperature (degree Celsius)
      REAL :: CS          !co2 concentration at leaf surface (pa)
      REAL :: KC          !co2 Michaelis-Menten constant (pa)
      REAL :: KO          !o2 Michaelis-Menten constant (pa)
      REAL :: A,B,C,Q     !intermediate calculations for RS
      REAL :: R1,R2       !roots for RS
      REAL :: FNF         !foliage nitrogen adjustment factor (0 to 1)
      REAL :: PPF         !absorb photosynthetic photon flux (umol photons/m2/s)
      REAL :: WC          !Rubisco limited photosynthesis (umol co2/m2/s)
      REAL :: WJ          !light limited photosynthesis (umol co2/m2/s)
      REAL :: WE          !export limited photosynthesis (umol co2/m2/s)
      REAL :: CP          !co2 compensation point (pa)
      REAL :: AWC         !intermediate calculation for wc
      REAL :: VCMX        !maximum rate of carbonylation (umol co2/m2/s)
      REAL :: J           !electron transport (umol co2/m2/s)
      REAL :: CEA         !constrain ea or else model blows up
      REAL :: CF          !s m2/umol -> s/m
      REAL :: RLB         !boundary layer resistance (s m2 / umol)
      REAL :: CI          !internal co2 (pa)
      REAL :: C3PSN       !photosynthetic pathway: 0. = c4, 1. = c3

      REAL :: GM25TOP
      REAL :: GM
      REAL :: RM
      REAL :: DCM
      REAL :: DPSN
      REAL :: PSN0

      F1(AB,BC) = AB**((BC-25.)/10.)
      F2(AB)    = 1. + EXP((-2.2E05+710.*(AB+273.16))/(8.314*(AB+273.16)))
      F3(AB)    = EXP(20.-49600./(8.314*AB)) / (1.+EXP((1400.*AB-437400.)/(8.314*AB)))
      REAL :: T

! ---------------------------------------------------------------------------------------------

! initialize RS=RSMAX and PSN=0 because will only do calculations
! for APAR > 0, in which case RS <= RSMAX and PSN >= 0

         CF = SFCPRS/(8.314*SFCTMP)*1.e06
         RS = 1./BP(VEGTYP) * CF
         PSN = 0.

         IF (APAR .LE. 0.) RETURN

         FNF = MIN( FOLN/MAX(MPE,FOLNMX(VEGTYP)), 1.0 )
         TC  = TV-TFRZ
         PPF = 4.6*APAR
         J   = PPF*QE25(VEGTYP)
         KC  = KC25(VEGTYP) * F1(AKC(VEGTYP),TC)
         KO  = KO25(VEGTYP) * F1(AKO(VEGTYP),TC)
         AWC = KC * (1.+O2/KO)
         CP  = 0.5*KC/KO*O2*0.21
         VCMX = VCMX25(VEGTYP) / F2(TC) * FNF * BTRAN * F1(AVCMX(VEGTYP),TC)

         GM25TOP = 24.240338*(1000./SLA(VEGTYP))**(-0.6509)
         GM      = GM25TOP * F3(TV) * FR * BTRAN
         RM      = 1.0/(GM*SFCPRS)

         C3PSN = 1.0
         IF(TC > 36.) THEN
           C3PSN = 1.0 - MAX(0.,(TC-36.)/20.)
         END IF

    !IF(IX == 196.and. IY == 56) THEN  !grass dry
    !    write(*,*) 'C3SPN,TC =',C3PSN,TC
    !END IF

! first guess ci

         CI = 0.7*CO2*C3PSN + 0.4*CO2*(1.-C3PSN)

! rb: s/m -> s m**2 / umol

         RLB = RB/CF

! constrain ea

         CEA = MAX(0.25*EI*C3PSN+0.40*EI*(1.-C3PSN), MIN(EA,EI) )

! ci iteration

       PSN0 = 0.0

!       IF(IX == 196.and. IY == 56) THEN  !grass dry
!       write(*,*) 'RM,CI/CO2,PSN,DPSN'
!       END IF

       DO ITER = 1, NITER
            WJ = MAX(CI-CP,0.)*   J/(CI+2.*CP)*C3PSN + J                   *(1.-C3PSN)
            WC = MAX(CI-CP,0.)*VCMX/(CI+  AWC)*C3PSN + VCMX                *(1.-C3PSN)
            WE = 0.5          *VCMX           *C3PSN + 4000.*VCMX*CI/SFCPRS*(1.-C3PSN)
            PSN = MIN(WJ,WC,WE) * IGS

!           CS = MAX( CO2-1.37*RLB*SFCPRS*PSN, MPE )
            CS = MAX( CO2-1.393*RLB*SFCPRS*PSN, MPE )  !see CH21 of Shuttleworth TH Book
            A = MP(VEGTYP)*PSN*SFCPRS*CEA / (CS*EI) + BP(VEGTYP)
            B = (MP(VEGTYP)*PSN*SFCPRS/CS + BP(VEGTYP) ) * RLB - 1.
            C = -RLB
            IF (B .GE. 0.) THEN
               Q = -0.5*( B + SQRT(B*B-4.*A*C) )
            ELSE
               Q = -0.5*( B - SQRT(B*B-4.*A*C) )
            END IF
            R1 = Q/A
            R2 = C/Q
            RS = MAX(R1,R2)
            CI = MAX( CS-PSN*SFCPRS*1.65*RS, 0. )

           !DCM= MIN(PSN*SFCPRS*RM,0.2*CS)
           !CI = MAX( CS-PSN*SFCPRS*1.58*RS-DCM, 0. )

            DPSN = ABS(PSN-PSN0)
            PSN0 = PSN

!           IF(IX == 196.and. IY == 56) THEN  !grass dry
!              write(*,'(10F12.8)') RM,CI/CO2,PSN,DPSN
!           END IF
            IF(DPSN < 0.001) EXIT
         
       END DO 

! rs, rb:  s m**2 / umol -> s/m

         RS = RS*CF

  END SUBROUTINE STOMATA
! ==================================================================================================
  SUBROUTINE CANRES (PAR   ,SFCTMP,RCSOIL ,EAH   ,SFCPRS , & !in
                     RGL   ,HS    ,RSMIN  ,                & !in
                     RC    ,PSN   )                  !out

! --------------------------------------------------------------------------------------------------
! calculate canopy resistance which depends on incoming solar radiation,
! air temperature, atmospheric water vapor pressure deficit at the
! lowest model level, and soil moisture (preferably unfrozen soil
! moisture rather than total)
! --------------------------------------------------------------------------------------------------
! source:  Jarvis (1976), Noilhan and Planton (1989, MWR), Jacquemin and
! Noilhan (1990, BLM). Chen et al (1996, JGR, Vol 101(D3), 7251-7268), 
! eqns 12-14 and table 2 of sec. 3.1.2
! --------------------------------------------------------------------------------------------------
    USE module_Noahlsm_utility
! --------------------------------------------------------------------------------------------------
    IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
! inputs

  REAL    ,INTENT(IN) :: RGL          !parameter used in radiation stress function
  REAL    ,INTENT(IN) :: RSMIN        !minimum canopy Resistance [s/m]
  REAL    ,INTENT(IN) :: HS           !parameter used in vapor pressure deficit function

    REAL,                     INTENT(IN)  :: PAR    !par absorbed per unit sunlit lai (w/m2)
    REAL,                     INTENT(IN)  :: SFCTMP !canopy air temperature
    REAL,                     INTENT(IN)  :: SFCPRS !surface pressure (pa)
    REAL,                     INTENT(IN)  :: EAH    !water vapor pressure (pa)
    REAL,                     INTENT(IN)  :: RCSOIL !soil moisture stress factor

!outputs

    REAL,                     INTENT(OUT) :: RC     !canopy resistance per unit LAI
    REAL,                     INTENT(OUT) :: PSN    !foliage photosynthesis (umolco2/m2/s)

!local

    REAL                                  :: RCQ
    REAL                                  :: RCS
    REAL                                  :: RCT
    REAL                                  :: FF
    REAL                                  :: Q2     !water vapor mixing ratio (kg/kg)
    REAL                                  :: Q2SAT  !saturation Q2
    REAL                                  :: DQSDT2 !d(Q2SAT)/d(T)

! RSMIN, RSMAX, TOPT, RGL, HS are canopy stress parameters set in REDPRM
! ----------------------------------------------------------------------
! initialize canopy resistance multiplier terms.
! ----------------------------------------------------------------------
    RC     = 0.0
    RCS    = 0.0
    RCT    = 0.0
    RCQ    = 0.0

!  compute Q2 and Q2SAT

    Q2 = 0.622 *  EAH  / (SFCPRS - 0.378 * EAH) !specific humidity [kg/kg]
    Q2 = Q2 / (1.0 + Q2)                        !mixing ratio [kg/kg]

    CALL CALHUM(SFCTMP, SFCPRS, Q2SAT, DQSDT2)

! contribution due to incoming solar radiation

    FF  = 2.0 * PAR / RGL                
    RCS = (FF + RSMIN / RSMAX) / (1.0+ FF)
    RCS = MAX (RCS,0.0001)

! contribution due to air temperature

    RCT = 1.0- 0.0016* ( (TOPT - SFCTMP)**2.0)
    RCT = MAX (RCT,0.0001)

! contribution due to vapor pressure deficit

    RCQ = 1.0/ (1.0+ HS * MAX(0.,Q2SAT-Q2))
    RCQ = MAX (RCQ,0.01)

! determine canopy resistance due to all factors

    RC  = RSMIN / (RCS * RCT * RCQ * RCSOIL)
    PSN = -999.99       ! PSN not applied for dynamic carbon

  END SUBROUTINE CANRES
! ==================================================================================================
  SUBROUTINE TSNOSOI (ICE     ,NSOIL   ,NSNOW   ,ISNOW   ,IST     , & !in
                      TBOT    ,ZSNSO   ,SSOIL   ,DF      ,HCPCT   , & !in
                      ZBOT    ,SAG     ,DT      ,SNOWH   ,DZSNSO  , & !in
                      TG      ,                            & !in
                      STC     )                                       !inout
! --------------------------------------------------------------------------------------------------
! Compute snow (up to 3L) and soil (4L) temperature. Note that snow temperatures
! during melting season may exceed melting point (TFRZ) but later in PHASECHANGE
! subroutine the snow temperatures are reset to TFRZ for melting snow.
! --------------------------------------------------------------------------------------------------
  IMPLICIT NONE
! --------------------------------------------------------------------------------------------------
!input

    INTEGER,                         INTENT(IN)  :: ICE    !
    INTEGER,                         INTENT(IN)  :: NSOIL  !no of soil layers (4)
    INTEGER,                         INTENT(IN)  :: NSNOW  !maximum no of snow layers (3)
    INTEGER,                         INTENT(IN)  :: ISNOW  !actual no of snow layers
    INTEGER,                         INTENT(IN)  :: IST    !surface type

    REAL,                            INTENT(IN)  :: DT     !time step (s)
    REAL,                            INTENT(IN)  :: TBOT   !
    REAL,                            INTENT(IN)  :: SSOIL  !ground heat flux (w/m2)
    REAL,                            INTENT(IN)  :: SAG    !solar rad. absorbed by ground (w/m2)
    REAL,                            INTENT(IN)  :: SNOWH  !snow depth (m)
    REAL,                            INTENT(IN)  :: ZBOT   !from soil surface (m)
    REAL,                            INTENT(IN)  :: TG     !ground temperature (k)
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: ZSNSO  !layer-bot. depth from snow surf.(m)
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: DZSNSO !snow/soil layer thickness (m)
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: DF     !thermal conductivity
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: HCPCT  !heat capacity (J/m3/k)

!input and output

    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC

!local

    INTEGER                                      :: IZ
    REAL                                         :: ZBOTSNO   !ZBOT from snow surface
    REAL, DIMENSION(-NSNOW+1:NSOIL)              :: AI, BI, CI, RHSTS
    REAL                                         :: EFLXB !energy influx from soil bottom (w/m2)
    REAL, DIMENSION(-NSNOW+1:NSOIL)              :: PHI   !light through water (w/m2)

    REAL                          :: BEG_EST !heat storage of snow/soil before updating STC (J/m2)
    REAL                          :: END_EST !heat storage of snow/soil after updating STC (J/m2)
    REAL                          :: ERR_EST !heat storage error  (w/m2)
    REAL                          :: SSOIL2  !ground heat flux (w/m2) (for energy check)
    REAL                          :: EFLXB2  !heat flux from the bottom (w/m2) (for energy check)
! ----------------------------------------------------------------------
! compute solar penetration through water, needs more work

    PHI(ISNOW+1:NSOIL) = 0.

! adjust ZBOT from soil surface to ZBOTSNO from snow surface

    ZBOTSNO = ZBOT - SNOWH    !from snow surface

! snow/soil heat storage for energy balance check

    BEG_EST = 0.
    DO IZ = ISNOW+1, NSOIL
      BEG_EST = BEG_EST  + STC(IZ)*DZSNSO(IZ)*HCPCT(IZ)
    END DO

! compute soil temperatures

      CALL HRT   (NSNOW     ,NSOIL     ,ISNOW     ,ZSNSO     , &
                  STC       ,TBOT      ,ZBOTSNO   ,DT        , &
                  DF        ,HCPCT     ,SSOIL     ,PHI       , &
                  AI        ,BI        ,CI        ,RHSTS     , &
                  EFLXB     )

      CALL HSTEP (NSNOW     ,NSOIL     ,ISNOW     ,DT        , &
                  AI        ,BI        ,CI        ,RHSTS     , &
                  STC       ) 

    END_EST = 0.
    DO IZ = ISNOW+1, NSOIL
      END_EST = END_EST  + STC(IZ)*DZSNSO(IZ)*HCPCT(IZ)-PHI(IZ)*DT
    END DO

! update ground heat flux just for energy check, but not for final output
! otherwise, it would break the surface energy balance

    SSOIL2 = DF(ISNOW+1)*(TG-STC(ISNOW+1))/(0.5*DZSNSO(ISNOW+1))   !M. Barlage

    IF(OPT_TBOT == 1) THEN
        EFLXB2  = 0.
    END IF
    IF(OPT_TBOT == 2) THEN
        EFLXB2  = DF(NSOIL)*(TBOT-STC(NSOIL)) / &
                 (0.5*(ZSNSO(NSOIL-1)+ZSNSO(NSOIL)) - ZBOTSNO)
    END IF

! energy balance check

    IF(OPT_STC == 1) THEN   ! semi-implicit
       ERR_EST = (END_EST-BEG_EST) - (SSOIL +EFLXB )*DT
    ELSE                    ! full-implicit
       ERR_EST = (END_EST-BEG_EST) - (SSOIL2+EFLXB2)*DT
    END IF

    ERR_EST = ERR_EST / DT

    IF (ERR_EST > 1.) THEN    ! W/m2
      WRITE(*,*) 'TSNOSOI is losing(-)/gaining(+) false energy',ERR_EST,' W/m2'
      WRITE(*,'(i3,F8.3,2F20.3,5F10.2)') &
      IST,ERR_EST,END_EST,BEG_EST,SSOIL,SNOWH,TG,STC(ISNOW+1),EFLXB
      !niuSTOP
    END IF

  END SUBROUTINE TSNOSOI
! ==================================================================================================
! ----------------------------------------------------------------------
  SUBROUTINE HRT (NSNOW     ,NSOIL     ,ISNOW     ,ZSNSO     , &
                  STC       ,TBOT      ,ZBOT      ,DT        , &
                  DF        ,HCPCT     ,SSOIL     ,PHI       , &
                  AI        ,BI        ,CI        ,RHSTS     , &
                  BOTFLX    )
! ----------------------------------------------------------------------
! ----------------------------------------------------------------------
! calculate the right hand side of the time tendency term of the soil
! thermal diffusion equation.  also to compute ( prepare ) the matrix
! coefficients for the tri-diagonal matrix of the implicit time scheme.
! ----------------------------------------------------------------------
    IMPLICIT NONE
! ----------------------------------------------------------------------
! input

    INTEGER,                         INTENT(IN)  :: NSOIL  !no of soil layers (4)
    INTEGER,                         INTENT(IN)  :: NSNOW  !maximum no of snow layers (3)
    INTEGER,                         INTENT(IN)  :: ISNOW  !actual no of snow layers
    REAL,                            INTENT(IN)  :: TBOT   !bottom soil temp. at ZBOT (k)
    REAL,                            INTENT(IN)  :: ZBOT   !depth of lower boundary condition (m)
                                                           !from soil surface not snow surface
    REAL,                            INTENT(IN)  :: DT     !time step (s)
    REAL,                            INTENT(IN)  :: SSOIL  !ground heat flux (w/m2)
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: ZSNSO  !depth of layer-bottom of snow/soil (m)
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: STC    !snow/soil temperature (k)
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: DF     !thermal conductivity [w/m/k]
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: HCPCT  !heat capacity [j/m3/k]
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)  :: PHI    !light through water (w/m2)

! output

    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(OUT) :: RHSTS  !right-hand side of the matrix
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(OUT) :: AI     !left-hand side coefficient
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(OUT) :: BI     !left-hand side coefficient
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(OUT) :: CI     !left-hand side coefficient
    REAL,                            INTENT(OUT) :: BOTFLX !energy influx from soil bottom (w/m2)

! local

    INTEGER                                      :: K
    REAL, DIMENSION(-NSNOW+1:NSOIL)              :: DDZ
    REAL, DIMENSION(-NSNOW+1:NSOIL)              :: DZ
    REAL, DIMENSION(-NSNOW+1:NSOIL)              :: DENOM
    REAL, DIMENSION(-NSNOW+1:NSOIL)              :: DTSDZ
    REAL, DIMENSION(-NSNOW+1:NSOIL)              :: EFLUX
    REAL                                         :: TEMP1
! ----------------------------------------------------------------------

    DO K = ISNOW+1, NSOIL
        IF (K == ISNOW+1) THEN
           DENOM(K)  = - ZSNSO(K) * HCPCT(K)
           TEMP1     = - ZSNSO(K+1)
           DDZ(K)    = 2.0 / TEMP1
           DTSDZ(K)  = 2.0 * (STC(K) - STC(K+1)) / TEMP1
           EFLUX(K)  = DF(K) * DTSDZ(K) - SSOIL - PHI(K)
        ELSE IF (K < NSOIL) THEN
           DENOM(K)  = (ZSNSO(K-1) - ZSNSO(K)) * HCPCT(K)
           TEMP1     = ZSNSO(K-1) - ZSNSO(K+1)
           DDZ(K)    = 2.0 / TEMP1
           DTSDZ(K)  = 2.0 * (STC(K) - STC(K+1)) / TEMP1
           EFLUX(K)  = (DF(K)*DTSDZ(K) - DF(K-1)*DTSDZ(K-1)) - PHI(K)
        ELSE IF (K == NSOIL) THEN
           DENOM(K)  = (ZSNSO(K-1) - ZSNSO(K)) * HCPCT(K)
           TEMP1     =  ZSNSO(K-1) - ZSNSO(K)
           IF(OPT_TBOT == 1) THEN
               BOTFLX     = 0. 
           END IF
           IF(OPT_TBOT == 2) THEN
               DTSDZ(K)  = (STC(K) - TBOT) / ( 0.5*(ZSNSO(K-1)+ZSNSO(K)) - ZBOT)
               BOTFLX    = -DF(K) * DTSDZ(K)
           END IF
           EFLUX(K)  = (-BOTFLX - DF(K-1)*DTSDZ(K-1) ) - PHI(K)
        END IF
    END DO

    DO K = ISNOW+1, NSOIL
        IF (K == ISNOW+1) THEN
           AI(K)    =   0.0
           CI(K)    = - DF(K)   * DDZ(K) / DENOM(K)
           IF (OPT_STC == 1) THEN
              BI(K) = - CI(K)
           END IF                                        
           IF (OPT_STC == 2) THEN
              BI(K) = - CI(K) + DF(K)/(0.5*ZSNSO(K)*ZSNSO(K)*HCPCT(K))
           END IF
        ELSE IF (K < NSOIL) THEN
           AI(K)    = - DF(K-1) * DDZ(K-1) / DENOM(K) 
           CI(K)    = - DF(K  ) * DDZ(K  ) / DENOM(K) 
           BI(K)    = - (AI(K) + CI (K))
        ELSE IF (K == NSOIL) THEN
           AI(K)    = - DF(K-1) * DDZ(K-1) / DENOM(K) 
           CI(K)    = 0.0
           BI(K)    = - (AI(K) + CI(K))
        END IF
           RHSTS(K)  = EFLUX(K)/ (-DENOM(K))
    END DO

  END SUBROUTINE HRT
! ==================================================================================================
! ----------------------------------------------------------------------
  SUBROUTINE HSTEP (NSNOW     ,NSOIL     ,ISNOW     ,DT        ,  &
                    AI        ,BI        ,CI        ,RHSTS     ,  &
                    STC       )  
! ----------------------------------------------------------------------
! CALCULATE/UPDATE THE SOIL TEMPERATURE FIELD.
! ----------------------------------------------------------------------
    implicit none
! ----------------------------------------------------------------------
! input

    INTEGER,                         INTENT(IN)    :: NSOIL
    INTEGER,                         INTENT(IN)    :: NSNOW
    INTEGER,                         INTENT(IN)    :: ISNOW
    REAL,                            INTENT(IN)    :: DT

! output & input
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: RHSTS
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: AI
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: BI
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: CI
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC

! local
    INTEGER                                        :: K
    REAL, DIMENSION(-NSNOW+1:NSOIL)                :: RHSTSIN
    REAL, DIMENSION(-NSNOW+1:NSOIL)                :: CIIN
! ----------------------------------------------------------------------

    DO K = ISNOW+1,NSOIL
       RHSTS(K) =   RHSTS(K) * DT
       AI(K)    =      AI(K) * DT
       BI(K)    = 1. + BI(K) * DT
       CI(K)    =      CI(K) * DT
    END DO

! copy values for input variables before call to rosr12

    DO K = ISNOW+1,NSOIL
       RHSTSIN(K) = RHSTS(K)
       CIIN(K)    = CI(K)
    END DO

! solve the tri-diagonal matrix equation

    CALL ROSR12 (CI,AI,BI,CIIN,RHSTSIN,RHSTS,ISNOW+1,NSOIL,NSNOW)

! update snow & soil temperature

    DO K = ISNOW+1,NSOIL
       STC (K) = STC (K) + CI (K)
    END DO

  END SUBROUTINE HSTEP
! ==================================================================================================
  SUBROUTINE ROSR12 (P,A,B,C,D,DELTA,NTOP,NSOIL,NSNOW)
! ----------------------------------------------------------------------
! SUBROUTINE ROSR12
! ----------------------------------------------------------------------
! INVERT (SOLVE) THE TRI-DIAGONAL MATRIX PROBLEM SHOWN BELOW:
! ###                                            ### ###  ###   ###  ###
! #B(1), C(1),  0  ,  0  ,  0  ,   . . .  ,    0   # #      #   #      #
! #A(2), B(2), C(2),  0  ,  0  ,   . . .  ,    0   # #      #   #      #
! # 0  , A(3), B(3), C(3),  0  ,   . . .  ,    0   # #      #   # D(3) #
! # 0  ,  0  , A(4), B(4), C(4),   . . .  ,    0   # # P(4) #   # D(4) #
! # 0  ,  0  ,  0  , A(5), B(5),   . . .  ,    0   # # P(5) #   # D(5) #
! # .                                          .   # #  .   # = #   .  #
! # .                                          .   # #  .   #   #   .  #
! # .                                          .   # #  .   #   #   .  #
! # 0  , . . . , 0 , A(M-2), B(M-2), C(M-2),   0   # #P(M-2)#   #D(M-2)#
! # 0  , . . . , 0 ,   0   , A(M-1), B(M-1), C(M-1)# #P(M-1)#   #D(M-1)#
! # 0  , . . . , 0 ,   0   ,   0   ,  A(M) ,  B(M) # # P(M) #   # D(M) #
! ###                                            ### ###  ###   ###  ###
! ----------------------------------------------------------------------
    IMPLICIT NONE

    INTEGER, INTENT(IN)   :: NTOP           
    INTEGER, INTENT(IN)   :: NSOIL,NSNOW
    INTEGER               :: K, KK

    REAL, DIMENSION(-NSNOW+1:NSOIL),INTENT(IN):: A, B, D
    REAL, DIMENSION(-NSNOW+1:NSOIL),INTENT(INOUT):: C,P,DELTA

! ----------------------------------------------------------------------
! INITIALIZE EQN COEF C FOR THE LOWEST SOIL LAYER
! ----------------------------------------------------------------------
    C (NSOIL) = 0.0
    P (NTOP) = - C (NTOP) / B (NTOP)
! ----------------------------------------------------------------------
! SOLVE THE COEFS FOR THE 1ST SOIL LAYER
! ----------------------------------------------------------------------
    DELTA (NTOP) = D (NTOP) / B (NTOP)
! ----------------------------------------------------------------------
! SOLVE THE COEFS FOR SOIL LAYERS 2 THRU NSOIL
! ----------------------------------------------------------------------
    DO K = NTOP+1,NSOIL
       P (K) = - C (K) * ( 1.0 / (B (K) + A (K) * P (K -1)) )
       DELTA (K) = (D (K) - A (K)* DELTA (K -1))* (1.0/ (B (K) + A (K)&
            * P (K -1)))
    END DO
! ----------------------------------------------------------------------
! SET P TO DELTA FOR LOWEST SOIL LAYER
! ----------------------------------------------------------------------
    P (NSOIL) = DELTA (NSOIL)
! ----------------------------------------------------------------------
! ADJUST P FOR SOIL LAYERS 2 THRU NSOIL
! ----------------------------------------------------------------------
    DO K = NTOP+1,NSOIL
       KK = NSOIL - K + (NTOP-1) + 1
       P (KK) = P (KK) * P (KK +1) + DELTA (KK)
    END DO
! ----------------------------------------------------------------------
  END SUBROUTINE ROSR12
! ----------------------------------------------------------------------
! ==================================================================================================
  SUBROUTINE PHASECHANGE (NSNOW   ,NSOIL   ,ISNOW   ,DT      ,FACT    , & !in
                          DZSNSO  ,HCPCT   ,IST     ,BEXP    ,SMCMAX  , & !in
                          PSISAT  ,VGPSAT  ,VGM     ,SMCR    ,          & !in
                          STC     ,SNICE   ,SNLIQ   ,SNEQV   ,SNOWH   , & !inout
                          SMC     ,SH2O    ,                            & !inout
                          QMELT   ,IMELT   ,PONDING )                     !out
! ----------------------------------------------------------------------
! melting/freezing of snow water and soil water
! ----------------------------------------------------------------------
  IMPLICIT NONE
! ----------------------------------------------------------------------
! inputs

  REAL    ,INTENT(IN) :: BEXP         !B parameter
  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: PSISAT       !saturated soil matric potential
  REAL    ,INTENT(IN) :: VGM          !1.-1./n, van Genuchten n
  REAL    ,INTENT(IN) :: VGPSAT       !PSAT, van Genuchten air-entry pressure
  REAL    ,INTENT(IN) :: SMCR         !residual moisture [m3/m3]

  INTEGER, INTENT(IN)                             :: NSNOW  !maximum no. of snow layers [=3]
  INTEGER, INTENT(IN)                             :: NSOIL  !No. of soil layers [=4]
  INTEGER, INTENT(IN)                             :: ISNOW  !actual no. of snow layers [<=3]
  INTEGER, INTENT(IN)                             :: IST    !surface type: 1->soil; 2->lake
  REAL, INTENT(IN)                                :: DT     !land model time step (sec)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)     :: FACT   !temporary
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)     :: DZSNSO !snow/soil layer thickness [m]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)     :: HCPCT  !heat capacity (J/m3/k)

! outputs
  INTEGER, DIMENSION(-NSNOW+1:NSOIL), INTENT(OUT) :: IMELT  !phase change index
  REAL,                               INTENT(OUT) :: QMELT  !snowmelt rate [mm/s]
  REAL,                               INTENT(OUT) :: PONDING!snowmelt when snow has no layer [mm]

! inputs and outputs

  REAL, INTENT(INOUT) :: SNEQV
  REAL, INTENT(INOUT) :: SNOWH
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT)  :: STC    !snow/soil layer temperature [k]
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT)  :: SH2O   !soil liquid water [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT)  :: SMC    !total soil water [m3/m3]
  REAL, DIMENSION(-NSNOW+1:0)    , INTENT(INOUT)  :: SNICE  !snow layer ice [mm]
  REAL, DIMENSION(-NSNOW+1:0)    , INTENT(INOUT)  :: SNLIQ  !snow layer liquid water [mm]

! local

  INTEGER                         :: J         !do loop index
  REAL, DIMENSION(-NSNOW+1:NSOIL) :: HM        !energy residual [w/m2]
  REAL, DIMENSION(-NSNOW+1:NSOIL) :: XM        !melting or freezing water [kg/m2]
  REAL, DIMENSION(-NSNOW+1:NSOIL) :: WMASS0
  REAL, DIMENSION(-NSNOW+1:NSOIL) :: WICE0 
  REAL, DIMENSION(-NSNOW+1:NSOIL) :: WLIQ0 
  REAL, DIMENSION(-NSNOW+1:NSOIL) :: MICE      !soil/snow ice mass [mm]
  REAL, DIMENSION(-NSNOW+1:NSOIL) :: MLIQ      !soil/snow liquid water mass [mm]
  REAL, DIMENSION(-NSNOW+1:NSOIL) :: SUPERCOOL !supercooled water in soil (kg/m2)
  REAL                            :: HEATR     !energy residual or loss after melting/freezing
  REAL                            :: TEMP1     !temporary variables [kg/m2]
  REAL                            :: PROPOR
  REAL                            :: SMP       !frozen water potential (mm)
  REAL                            :: XMF       !total latent heat of phase change
  REAL                            :: BETA

! ----------------------------------------------------------------------
! Initialization

    QMELT   = 0.
    PONDING = 0.
    XMF     = 0.

    DO J = -NSNOW+1, NSOIL
         SUPERCOOL(J) = 0.0
         IMELT(J)     = 0
    END DO

    DO J = ISNOW+1,0       ! all layers
         MICE(J) = SNICE(J)
         MLIQ(J) = SNLIQ(J)
    END DO

    DO J = 1, NSOIL               ! soil
         MLIQ(J) =  SH2O(J)            * DZSNSO(J) * 1000.
         MICE(J) = (SMC(J) - SH2O(J))  * DZSNSO(J) * 1000.
    END DO

    DO J = ISNOW+1,NSOIL       ! all layers
         IMELT(J)    = 0
         HM(J)       = 0.
         XM(J)       = 0.
         WICE0(J)    = MICE(J)
         WLIQ0(J)    = MLIQ(J)
         WMASS0(J)   = MICE(J) + MLIQ(J)
    ENDDO

    if(ist == 1) then
      DO J = 1,NSOIL
         IF (OPT_FRZ == 1) THEN
            IF(STC(J) < TFRZ) THEN
               SMP = HFUS*(TFRZ-STC(J))/(GRAV*STC(J))             !(m)

               IF(OPT_WATRET == 1) THEN
                  BETA         = (SMP/VGPSAT)**(1.0/(1-VGM))
                  SUPERCOOL(J) = SMCR + (SMCMAX-SMCR)*(1+BETA)**(-VGM)
               END IF
              
               IF(OPT_WATRET == 2) THEN
                  SUPERCOOL(J) = SMCMAX*(SMP/PSISAT)**(-1./BEXP)
               END IF

               SUPERCOOL(J) = SUPERCOOL(J)*DZSNSO(J)*1000.        !(mm)
            END IF
         END IF
         IF (OPT_FRZ == 2) THEN
               CALL FRH2O (SUPERCOOL(J),STC(J),SMC(J),SH2O(J), &
                           BEXP,PSISAT,SMCMAX)
               SUPERCOOL(J) = SUPERCOOL(J)*DZSNSO(J)*1000.        !(mm)
         END IF
      ENDDO
    end if

    DO J = ISNOW+1,NSOIL
         IF (MICE(J) > 0. .AND. STC(J) >= TFRZ) THEN  !melting 
             IMELT(J) = 1
         ENDIF
         IF (MLIQ(J) > SUPERCOOL(J) .AND. STC(J) < TFRZ) THEN
             IMELT(J) = 2
         ENDIF

         ! If snow exists, but its thickness is not enough to create a layer
         IF (ISNOW == 0 .AND. SNEQV > 0. .AND. J == 1) THEN
             IF (STC(J) >= TFRZ) THEN
                IMELT(J) = 1
             ENDIF
         ENDIF
    ENDDO

! Calculate the energy surplus and loss for melting and freezing

    DO J = ISNOW+1,NSOIL
         IF (IMELT(J) > 0) THEN
             HM(J) = (STC(J)-TFRZ)/FACT(J)
             STC(J) = TFRZ
         ENDIF

         IF (IMELT(J) == 1 .AND. HM(J) < 0.) THEN
            HM(J) = 0.
            IMELT(J) = 0
         ENDIF
         IF (IMELT(J) == 2 .AND. HM(J) > 0.) THEN
            HM(J) = 0.
            IMELT(J) = 0
         ENDIF
         XM(J) = HM(J)*DT/HFUS                           
    ENDDO

! The rate of melting and freezing for snow without a layer, needs more work.

    IF (ISNOW == 0 .AND. SNEQV > 0. .AND. XM(1) > 0.) THEN  
        TEMP1  = SNEQV
        SNEQV  = MAX(0.,TEMP1-XM(1))  
        PROPOR = SNEQV/TEMP1
        SNOWH  = MAX(0.,PROPOR * SNOWH)
        HEATR  = HM(1) - HFUS*(TEMP1-SNEQV)/DT  
        IF (HEATR > 0.) THEN
              XM(1) = HEATR*DT/HFUS             
              HM(1) = HEATR                    
        ELSE
              XM(1) = 0.
              HM(1) = 0.
        ENDIF
        QMELT   = MAX(0.,(TEMP1-SNEQV))/DT
        XMF     = HFUS*QMELT
        PONDING = TEMP1-SNEQV
    ENDIF

! The rate of melting and freezing for snow and soil

    DO J = ISNOW+1,NSOIL
      IF (IMELT(J) > 0 .AND. ABS(HM(J)) > 0.) THEN

         HEATR = 0.
         IF (XM(J) > 0.) THEN                            
            MICE(J) = MAX(0., WICE0(J)-XM(J))
            HEATR = HM(J) - HFUS*(WICE0(J)-MICE(J))/DT
         ELSE IF (XM(J) < 0.) THEN                      
            IF (J <= 0) THEN                             ! snow
               MICE(J) = MIN(WMASS0(J), WICE0(J)-XM(J))  
            ELSE                                         ! soil
               IF (WMASS0(J) < SUPERCOOL(J)) THEN
                  MICE(J) = 0.
               ELSE
                  MICE(J) = MIN(WMASS0(J) - SUPERCOOL(J),WICE0(J)-XM(J))
                  MICE(J) = MAX(MICE(J),0.0)
               ENDIF
            ENDIF
            HEATR = HM(J) - HFUS*(WICE0(J)-MICE(J))/DT
         ENDIF

         MLIQ(J) = MAX(0.,WMASS0(J)-MICE(J))

         IF (ABS(HEATR) > 0.) THEN
            STC(J) = STC(J) + FACT(J)*HEATR
            IF (J <= 0) THEN                             ! snow
               IF (MLIQ(J)*MICE(J)>0.) STC(J) = TFRZ
            END IF
         ENDIF

         XMF = XMF + HFUS * (WICE0(J)-MICE(J))/DT

         IF (J < 1) THEN
            QMELT = QMELT + MAX(0.,(WICE0(J)-MICE(J)))/DT
         ENDIF
      ENDIF
    ENDDO

    DO J = ISNOW+1,0             ! snow
       SNLIQ(J) = MLIQ(J)
       SNICE(J) = MICE(J)
    END DO

    DO J = 1, NSOIL              ! soil
       SH2O(J) =  MLIQ(J)            / (1000. * DZSNSO(J))
       SMC(J)  = (MLIQ(J) + MICE(J)) / (1000. * DZSNSO(J))
    END DO
   
  END SUBROUTINE PHASECHANGE
! ==================================================================================================
  SUBROUTINE FRH2O (FREE,TKELV,SMC,SH2O,&
                    BEXP,PSISAT,SMCMAX)

! ----------------------------------------------------------------------
! SUBROUTINE FRH2O
! ----------------------------------------------------------------------
! CALCULATE AMOUNT OF SUPERCOOLED LIQUID SOIL WATER CONTENT IF
! TEMPERATURE IS BELOW 273.15K (TFRZ).  REQUIRES NEWTON-TYPE ITERATION
! TO SOLVE THE NONLINEAR IMPLICIT EQUATION GIVEN IN EQN 17 OF KOREN ET AL
! (1999, JGR, VOL 104(D16), 19569-19585).
! ----------------------------------------------------------------------
! NEW VERSION (JUNE 2001): MUCH FASTER AND MORE ACCURATE NEWTON
! ITERATION ACHIEVED BY FIRST TAKING LOG OF EQN CITED ABOVE -- LESS THAN
! 4 (TYPICALLY 1 OR 2) ITERATIONS ACHIEVES CONVERGENCE.  ALSO, EXPLICIT
! 1-STEP SOLUTION OPTION FOR SPECIAL CASE OF PARAMETER CK=0, WHICH
! REDUCES THE ORIGINAL IMPLICIT EQUATION TO A SIMPLER EXPLICIT FORM,
! KNOWN AS THE "FLERCHINGER EQN". IMPROVED HANDLING OF SOLUTION IN THE
! LIMIT OF FREEZING POINT TEMPERATURE TFRZ.
! ----------------------------------------------------------------------
! INPUT:

!   TKELV.........TEMPERATURE (Kelvin)
!   SMC...........TOTAL SOIL MOISTURE CONTENT (VOLUMETRIC)
!   SH2O..........LIQUID SOIL MOISTURE CONTENT (VOLUMETRIC)
!   B.............SOIL TYPE "B" PARAMETER (FROM REDPRM)
!   PSISAT........SATURATED SOIL MATRIC POTENTIAL (FROM REDPRM)

! OUTPUT:
!   FREE..........SUPERCOOLED LIQUID WATER CONTENT [m3/m3]
! ----------------------------------------------------------------------
    IMPLICIT NONE

    REAL    ,INTENT(IN) :: BEXP         !B parameter
    REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
    REAL    ,INTENT(IN) :: PSISAT       !saturated soil matric potential

    REAL, INTENT(IN)     :: SH2O,SMC,TKELV
    REAL, INTENT(OUT)    :: FREE
    REAL                 :: BX,DENOM,DF,DSWL,FK,SWL,SWLK
    INTEGER              :: NLOG,KCOUNT
!      PARAMETER(CK = 0.0)
    REAL, PARAMETER      :: CK = 8.0, BLIM = 5.5, ERROR = 0.005,       &
         DICE = 920.0

! ----------------------------------------------------------------------
! LIMITS ON PARAMETER B: B < 5.5  (use parameter BLIM)
! SIMULATIONS SHOWED IF B > 5.5 UNFROZEN WATER CONTENT IS
! NON-REALISTICALLY HIGH AT VERY LOW TEMPERATURES.
! ----------------------------------------------------------------------
    BX = BEXP
! ----------------------------------------------------------------------
! INITIALIZING ITERATIONS COUNTER AND ITERATIVE SOLUTION FLAG.
! ----------------------------------------------------------------------

    IF (BEXP >  BLIM) BX = BLIM
    NLOG = 0

! ----------------------------------------------------------------------
!  IF TEMPERATURE NOT SIGNIFICANTLY BELOW FREEZING (TFRZ), SH2O = SMC
! ----------------------------------------------------------------------
    KCOUNT = 0
    IF (TKELV > (TFRZ- 1.E-3)) THEN
       FREE = SMC
    ELSE

! ----------------------------------------------------------------------
! OPTION 1: ITERATED SOLUTION IN KOREN ET AL, JGR, 1999, EQN 17
! ----------------------------------------------------------------------
! INITIAL GUESS FOR SWL (frozen content)
! ----------------------------------------------------------------------
       IF (CK /= 0.0) THEN
          SWL = SMC - SH2O
! ----------------------------------------------------------------------
! KEEP WITHIN BOUNDS.
! ----------------------------------------------------------------------
          IF (SWL > (SMC -0.02)) SWL = SMC -0.02
! ----------------------------------------------------------------------
!  START OF ITERATIONS
! ----------------------------------------------------------------------
          IF (SWL < 0.) SWL = 0.
1001      Continue
          IF (.NOT.( (NLOG < 10) .AND. (KCOUNT == 0)))   goto 1002
          NLOG = NLOG +1
          DF = ALOG ( ( PSISAT * GRAV / hfus ) * ( ( 1. + CK * SWL )**2.) * &
               ( SMCMAX / (SMC - SWL) )** BX) - ALOG ( - (               &
               TKELV - TFRZ)/ TKELV)
          DENOM = 2. * CK / ( 1. + CK * SWL ) + BX / ( SMC - SWL )
          SWLK = SWL - DF / DENOM
! ----------------------------------------------------------------------
! BOUNDS USEFUL FOR MATHEMATICAL SOLUTION.
! ----------------------------------------------------------------------
          IF (SWLK > (SMC -0.02)) SWLK = SMC - 0.02
          IF (SWLK < 0.) SWLK = 0.

! ----------------------------------------------------------------------
! MATHEMATICAL SOLUTION BOUNDS APPLIED.
! ----------------------------------------------------------------------
          DSWL = ABS (SWLK - SWL)
! IF MORE THAN 10 ITERATIONS, USE EXPLICIT METHOD (CK=0 APPROX.)
! WHEN DSWL LESS OR EQ. ERROR, NO MORE ITERATIONS REQUIRED.
! ----------------------------------------------------------------------
          SWL = SWLK
          IF ( DSWL <= ERROR ) THEN
             KCOUNT = KCOUNT +1
          END IF
! ----------------------------------------------------------------------
!  END OF ITERATIONS
! ----------------------------------------------------------------------
! BOUNDS APPLIED WITHIN DO-BLOCK ARE VALID FOR PHYSICAL SOLUTION.
! ----------------------------------------------------------------------
          goto 1001
1002      continue
          FREE = SMC - SWL
       END IF
! ----------------------------------------------------------------------
! END OPTION 1
! ----------------------------------------------------------------------
! ----------------------------------------------------------------------
! OPTION 2: EXPLICIT SOLUTION FOR FLERCHINGER EQ. i.e. CK=0
! IN KOREN ET AL., JGR, 1999, EQN 17
! APPLY PHYSICAL BOUNDS TO FLERCHINGER SOLUTION
! ----------------------------------------------------------------------
       IF (KCOUNT == 0) THEN
          PRINT *,'Flerchinger USEd in NEW version. Iterations=',NLOG
          FK = ( ( (hfus / (GRAV * ( - PSISAT)))*                    &
               ( (TKELV - TFRZ)/ TKELV))** ( -1/ BX))* SMCMAX
          IF (FK < 0.02) FK = 0.02
          FREE = MIN (FK, SMC)
! ----------------------------------------------------------------------
! END OPTION 2
! ----------------------------------------------------------------------
       END IF
    END IF
! ----------------------------------------------------------------------
  END SUBROUTINE FRH2O
! ----------------------------------------------------------------------
! ==================================================================================================
! **********************End of energy subroutines***********************
! ==================================================================================================
  SUBROUTINE WATER (VEGTYP ,NSNOW  ,NSOIL  ,IMELT  ,DT     ,UU     , & !in
                    VV     ,FCEV   ,FCTR   ,QPRECC ,QPRECL ,ELAI   , & !in
                    ESAI   ,SFCTMP ,QVAP   ,QDEW   ,ZSOIL  ,BTRANI , & !in
                    FICEOLD,PONDING,TG     ,IST    ,FVEG   ,NROOT  , & !in
                    SMCMAX ,PSISAT ,DKSAT  ,DWSAT  ,SMCWLT ,SLOPE  , & !in
                    BEXP   ,KDT    ,FRZX   ,MQ     ,TWET   ,SMCR   , & !in
                    VGM    ,VGPSAT ,ix     ,iy     ,         & !in
                    ISNOW  ,CANLIQ ,CANICE ,TV     ,SNOWH  ,SNEQV  , & !inout
                    SNICE  ,SNLIQ  ,STC    ,ZSNSO  ,SH2O   ,SMC    , & !inout
                    SICE   ,ZWT    ,WA     ,WT     ,DZSNSO ,WSLAKE , & !inout
                    CMC    ,ECAN   ,ETRAN  ,FWET   ,RUNSRF ,RUNSUB , & !out
                    QIN    ,QDIS   ,QSNOW  ,QSEVA  ,ETRANI ,PDDUM  , & !out
                    LWFLUX ,WCND   ,QSUBCAN,QSUBGRD)                   !out
! ----------------------------------------------------------------------  
! Code history:
! Initial code: Guo-Yue Niu, Oct. 2007
! ----------------------------------------------------------------------
  implicit none
! ----------------------------------------------------------------------
! input
 
  INTEGER ,INTENT(IN) :: ix,iy
  INTEGER ,INTENT(IN) :: NROOT        !rooting depth [as number of layers]
  REAL    ,INTENT(IN) :: BEXP         !B parameter
  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: PSISAT       !saturated soil matric potential
  REAL    ,INTENT(IN), DIMENSION(       1:NSOIL) :: DKSAT        !saturated soil hydraulic conductivity
  REAL    ,INTENT(IN) :: DWSAT        !saturated soil hydraulic diffusivity
  REAL    ,INTENT(IN) :: SMCWLT       !wilting point soil moisture (volumetric)
  REAL    ,INTENT(IN) :: SLOPE        !slope index (0 - 1)
  REAL    ,INTENT(IN) :: KDT
  REAL    ,INTENT(IN) :: FRZX
  REAL    ,INTENT(IN) :: VGM          !1.-1./n, van Genuchten n
  REAL    ,INTENT(IN) :: SMCR         !residual moisture [m3/m3]
  REAL    ,INTENT(IN) :: VGPSAT       !VG PSAT


  INTEGER,                         INTENT(IN)    :: VEGTYP  !vegetation type
  INTEGER,                         INTENT(IN)    :: NSNOW   !maximum no. of snow layers
  INTEGER                        , INTENT(IN)    :: IST     !surface type 1-soil; 2-lake
  INTEGER,                         INTENT(IN)    :: NSOIL   !no. of soil layers
  INTEGER, DIMENSION(-NSNOW+1:0) , INTENT(IN)    :: IMELT   !melting state index [1-melt; 2-freeze]
  REAL,                            INTENT(IN)    :: DT      !main time step (s)
  REAL,                            INTENT(IN)    :: UU      !u-direction wind speed [m/s]
  REAL,                            INTENT(IN)    :: VV      !v-direction wind speed [m/s]
  REAL,                            INTENT(IN)    :: FCEV    !canopy evaporation (w/m2) [+ to atm ]
  REAL,                            INTENT(IN)    :: FCTR    !transpiration (w/m2) [+ to atm]
  REAL,                            INTENT(IN)    :: QPRECC  !convective precipitation (mm/s)
  REAL,                            INTENT(IN)    :: QPRECL  !large-scale precipitation (mm/s)
  REAL,                            INTENT(IN)    :: ELAI    !leaf area index, after burying by snow
  REAL,                            INTENT(IN)    :: ESAI    !stem area index, after burying by snow
  REAL,                            INTENT(IN)    :: SFCTMP  !surface air temperature [k]
  REAL,                            INTENT(IN)    :: QVAP    !soil surface evaporation rate[mm/s]
  REAL,                            INTENT(IN)    :: QDEW    !soil surface dew rate[mm/s]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN)    :: ZSOIL   !depth of layer-bottom from soil surface
  REAL, DIMENSION(       1:NSOIL), INTENT(IN)    :: BTRANI  !soil water stress factor (0 to 1)
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(IN)    :: FICEOLD !ice fraction at last timestep
  REAL                           , INTENT(IN)    :: PONDING ![mm]
  REAL                           , INTENT(IN)    :: TG      !ground temperature (k)
  REAL                           , INTENT(IN)    :: FVEG    !greeness vegetation fraction (-)
  REAL                           , INTENT(IN)    :: MQ      !water stored in living tissues [mm]
  REAL                           , INTENT(IN)    :: TWET    !wet-bulb T (C)

! input/output
  INTEGER,                         INTENT(INOUT) :: ISNOW   !actual no. of snow layers
  REAL,                            INTENT(INOUT) :: CANLIQ  !intercepted liquid water (mm)
  REAL,                            INTENT(INOUT) :: CANICE  !intercepted ice mass (mm)
  REAL,                            INTENT(INOUT) :: TV      !vegetation temperature (k)
  REAL,                            INTENT(INOUT) :: SNOWH   !snow height [m]
  REAL,                            INTENT(INOUT) :: SNEQV   !snow water eqv. [mm]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNICE   !snow layer ice [mm]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNLIQ   !snow layer liquid water [mm]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC     !snow/soil layer temperature [k]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: ZSNSO   !depth of snow/soil layer-bottom
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: DZSNSO  !snow/soil layer thickness [m]
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SH2O    !soil liquid water content [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SICE    !soil ice content [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SMC     !total soil water content [m3/m3]
  REAL,                            INTENT(INOUT) :: ZWT     !the depth to water table [m]
  REAL,                            INTENT(INOUT) :: WA      !water storage in aquifer [mm]
  REAL,                            INTENT(INOUT) :: WT      !water storage in aquifer 
                                                            !+ stuarated soil [mm]
  REAL,                            INTENT(INOUT) :: WSLAKE  !water storage in lake (can be -) (mm)

! output
  REAL,                            INTENT(OUT)   :: CMC     !intercepted water per ground area (mm)
  REAL,                            INTENT(OUT)   :: ECAN    !evap of intercepted water (mm/s) [+]
  REAL,                            INTENT(OUT)   :: ETRAN   !transpiration rate (mm/s) [+]
  REAL,                            INTENT(OUT)   :: FWET    !wetted/snowed fraction of canopy (-)
  REAL,                            INTENT(OUT)   :: RUNSRF  !surface runoff [mm/s] 
  REAL,                            INTENT(OUT)   :: RUNSUB  !baseflow (sturation excess) [mm/s]
  REAL,                            INTENT(OUT)   :: QIN     !groundwater recharge [mm/s]
  REAL,                            INTENT(OUT)   :: QDIS    !groundwater discharge [mm/s]
  REAL,                            INTENT(OUT)   :: QSNOW   !snowfall at ground srf (mm/s) [+]
  REAL                            ,INTENT(OUT)   :: QSEVA   !soil surface evap rate [m/s]
  REAL, DIMENSION(       1:NSOIL) ,INTENT(OUT)   :: ETRANI  !transpiration rate [m/s[ [+]
  REAL, DIMENSION(       1:NSOIL) ,INTENT(OUT)   :: LWFLUX  !liq. water flux at bottom of soil layers [m/s]
  REAL,                            INTENT(OUT)   :: PDDUM   !surface infiltration rate [m/s]
  REAL, DIMENSION(       1:NSOIL) ,INTENT(OUT)   :: WCND    !hydraulic conductivity (m/s)
  REAL,                            INTENT(OUT)   :: QSUBCAN !sublimation (+ and -) from the canopy snow (mm/s)
  REAL,                            INTENT(OUT)   :: QSUBGRD !sublimation (+ and -) from the ground snow (mm/s)

! local
  INTEGER                                        :: IZ
  REAL                                           :: QINSUR  !water input on soil surface [m/s]
  REAL                                           :: QRAIN   !rain at ground srf (mm) [+]
  REAL                                           :: QSNBOT  !melting water out of snow bottom [mm/s]
  REAL                                           :: QSDEW   !soil surface dew rate [mm/s]
  REAL                                           :: QSNFRO  !snow surface frost rate[mm/s]
  REAL                                           :: QSNSUB  !snow surface sublimation rate [mm/s]
  REAL                                           :: SNOWHIN !snow depth increasing rate (m/s)
  REAL                                           :: QDRAIN  !soil-bottom free drainage [mm/s] 
  REAL                                           :: SNOFLOW !glacier flow [mm/s]
  REAL                                           :: FCRMAX !maximum of FCR (-)

  REAL, PARAMETER ::  WSLMAX = 50000.      !maximum lake water storage (mm)
! ----------------------------------------------------------------------
! initialize

   ETRANI(1:NSOIL) = 0.
   SNOFLOW         = 0.
   RUNSUB          = 0.
   QINSUR          = 0.

! canopy-intercepted snowfall/rainfall, drips, and throughfall

   CALL CANWATER (VEGTYP ,DT     ,SFCTMP ,UU     ,VV     , & !in
                  FCEV   ,FCTR   ,QPRECC ,QPRECL ,ELAI   , & !in
                  ESAI   ,IST    ,TG     ,FVEG   ,TWET   , & !in
                  CANLIQ ,CANICE ,TV     ,                 & !inout
                  CMC    ,ECAN   ,ETRAN  ,QRAIN  ,QSNOW  , & !out
                  SNOWHIN,FWET   ,QSUBCAN)                   !out

! sublimation, frost, evaporation, and dew

     QSNSUB = 0.
     IF (SNEQV > 0.) THEN
       QSNSUB = MIN(QVAP, SNEQV/DT)
     ENDIF
     QSEVA = QVAP-QSNSUB

     QSNFRO = 0.
     IF (SNEQV > 0.) THEN
        QSNFRO = QDEW
     ENDIF
     QSDEW = QDEW - QSNFRO

     QSUBGRD = QSNSUB + QSNFRO

   CALL SNOWWATER (NSNOW  ,NSOIL  ,IMELT  ,DT     ,ZSOIL  , & !in
                   SFCTMP ,SNOWHIN,QSNOW  ,QSNFRO ,QSNSUB , & !in
                   QRAIN  ,FICEOLD,                 & !in
                   ISNOW  ,SNOWH  ,SNEQV  ,SNICE  ,SNLIQ  , & !inout
                   SH2O   ,SICE   ,STC    ,ZSNSO  ,DZSNSO , & !inout
                   QSNBOT ,SNOFLOW)                           !out

! convert units (mm/s -> m/s)

    !PONDING: melting water from snow when there is no layer
    QINSUR = PONDING/DT * 0.001

    IF(ISNOW == 0) THEN
       QINSUR = QINSUR+(QSNBOT + QSDEW + QRAIN) * 0.001
    ELSE
       QINSUR = QINSUR+(QSNBOT + QSDEW) * 0.001
    ENDIF

    QSEVA  = QSEVA * 0.001 

    DO IZ = 1, NROOT
       IF(OPT_ROOT == 1) ETRANI(IZ) = 0.0
       IF(OPT_ROOT == 2) ETRANI(IZ) = ETRAN * BTRANI(IZ) * 0.001
    ENDDO

! lake/soil water balances

    IF (IST == 2) THEN                                        ! lake

       !needs river routing as water inputs for ET; causing errors in runoff

       RUNSRF = 0.
       RUNSUB = 0.

       IF(WSLAKE >= WSLMAX) RUNSRF = QINSUR*1000.             !mm/s
       !WSLAKE = WSLAKE + (QINSUR-QSEVA)*1000.*DT -RUNSRF*DT   !mm
       WSLAKE = WSLAKE + (QRAIN+QSNOW)*DT-QSEVA*1000.*DT-RUNSRF*DT   !mm
       WA     = -1.0E+20                                      !for outputs niu
       ZWT    = 0.

    ELSE                                                      ! soil
       CALL      SOILWATER (NSOIL  ,NSNOW  ,DT     ,ZSOIL  ,DZSNSO , & !in
                            QINSUR ,QSEVA  ,ETRANI ,SICE   ,SMCMAX , & !in
                            BEXP   ,PSISAT ,SMCWLT ,DKSAT  ,DWSAT  , & !in
                            SLOPE  ,KDT    ,FRZX   ,VGM    ,ix     ,iy     , & !in
                            SH2O   ,SMC    ,ZWT    ,                 & !inout
                            RUNSRF ,QDRAIN ,RUNSUB ,WCND   ,FCRMAX , & !out
                            PDDUM  ,  LWFLUX)   !out

       IF(OPT_RUN == 1) THEN 
          CALL GROUNDWATER (NSNOW  ,NSOIL  ,DT     ,SICE   ,ZSOIL  , & !in
                            STC    ,WCND   ,FCRMAX ,BEXP   ,PSISAT , & !in
                            SMCMAX ,DKSAT  ,SMCR   ,VGM    ,VGPSAT , &
                            ix     ,iy     ,                 & !in
                            SH2O   ,ZWT    ,WA     ,WT     ,         & !inout
                            QIN    ,QDIS   )                           !out
          RUNSUB       = QDIS          !mm/s
       END IF

       IF(OPT_RUN == 3 .or. OPT_RUN == 4) THEN 
          RUNSUB       = RUNSUB + QDRAIN        !mm/s
       END IF

       DO IZ = 1,NSOIL
           SMC(IZ) = SH2O(IZ) + SICE(IZ)
       ENDDO
    ENDIF

    RUNSUB       = RUNSUB + SNOFLOW         !mm/s

  END SUBROUTINE WATER
! ==================================================================================================
  SUBROUTINE CANWATER (VEGTYP ,DT     ,SFCTMP ,UU     ,VV     , & !in
                       FCEV   ,FCTR   ,QPRECC ,QPRECL ,ELAI   , & !in
                       ESAI   ,IST    ,TG     ,FVEG   ,TWET   , & !in
                       CANLIQ ,CANICE ,TV     ,                 & !inout
                       CMC    ,ECAN   ,ETRAN  ,QRAIN  ,QSNOW  , & !out
                       SNOWHIN,FWET   ,QSUBCAN)                   !out

! ------------------------ code history ------------------------------
! canopy hydrology
! --------------------------------------------------------------------
  USE VEG_PARAMETERS
! --------------------------------------------------------------------
  IMPLICIT NONE
! ------------------------ input/output variables --------------------
! input
  INTEGER,INTENT(IN)  :: VEGTYP  !vegetation type
  REAL,   INTENT(IN)  :: DT      !main time step (s)
  REAL,   INTENT(IN)  :: SFCTMP  !air temperature (k)
  REAL,   INTENT(IN)  :: UU      !u-direction wind speed [m/s]
  REAL,   INTENT(IN)  :: VV      !v-direction wind speed [m/s]
  REAL,   INTENT(IN)  :: FCEV    !canopy evaporation (w/m2) [+ = to atm]
  REAL,   INTENT(IN)  :: FCTR    !transpiration (w/m2) [+ = to atm]
  REAL,   INTENT(IN)  :: QPRECC  !convective precipitation (mm/s)
  REAL,   INTENT(IN)  :: QPRECL  !large-scale precipitation (mm/s)
  REAL,   INTENT(IN)  :: ELAI    !leaf area index, after burying by snow
  REAL,   INTENT(IN)  :: ESAI    !stem area index, after burying by snow
  INTEGER,INTENT(IN)  :: IST     !surface type 1-soil; 2-lake
  REAL,   INTENT(IN)  :: TG      !ground temperature (k)
  REAL,   INTENT(IN)  :: FVEG    !greeness vegetation fraction (-)
  REAL,   INTENT(IN)  :: TWET    !wet-bulb T (C)

! input & output
  REAL, INTENT(INOUT) :: CANLIQ  !intercepted liquid water (mm)
  REAL, INTENT(INOUT) :: CANICE  !intercepted ice mass (mm)
  REAL, INTENT(INOUT) :: TV      !vegetation temperature (k)

! output
  REAL, INTENT(OUT)   :: CMC     !intercepted water (mm)
  REAL, INTENT(OUT)   :: ECAN    !evaporation of intercepted water (mm/s) [+]
  REAL, INTENT(OUT)   :: ETRAN   !transpiration rate (mm/s) [+]
  REAL, INTENT(OUT)   :: QRAIN   !rain at ground srf (mm/s) [+]
  REAL, INTENT(OUT)   :: QSNOW   !snow at ground srf (mm/s) [+]
  REAL, INTENT(OUT)   :: SNOWHIN !snow depth increasing rate (m/s)
  REAL, INTENT(OUT)   :: FWET    !wetted or snowed fraction of the canopy (-)
  REAL, INTENT(OUT)   :: QSUBCAN !sublimation (+ and -) from the canopy (mm/s)
! --------------------------------------------------------------------

! ------------------------ local variables ---------------------------
  REAL                :: MAXSNO  !canopy capacity for snow interception (mm)
  REAL                :: MAXLIQ  !canopy capacity for rain interception (mm)
  REAL                :: FP      !fraction of the gridcell that receives precipitation
  REAL                :: FPICE   !snow fraction in precipitation
  REAL                :: BDFALL  !bulk density of snowfall (kg/m3)
  REAL                :: QINTR   !interception rate for rain (mm/s)
  REAL                :: QDRIPR  !drip rate for rain (mm/s)
  REAL                :: QTHROR  !throughfall for rain (mm/s)
  REAL                :: QINTS   !interception (loading) rate for snowfall (mm/s)
  REAL                :: QDRIPS  !drip (unloading) rate for intercepted snow (mm/s)
  REAL                :: QTHROS  !throughfall of snowfall (mm/s)
  REAL                :: QEVAC   !evaporation rate (mm/s)
  REAL                :: QDEWC   !dew rate (mm/s)
  REAL                :: QFROC   !frost rate (mm/s)
  REAL                :: QSUBC   !sublimation rate (mm/s)
  REAL                :: FT      !temperature factor for unloading rate
  REAL                :: FV      !wind factor for unloading rate
  REAL                :: QMELTC  !melting rate of canopy snow (mm/s)
  REAL                :: QFRZC   !refreezing rate of canopy liquid water (mm/s)
  REAL                :: RAIN    !rainfall (mm/s)
  REAL                :: SNOW    !snowfall (mm/s)
  REAL                :: CANMAS  !total canopy mass (kg/m2)
! --------------------------------------------------------------------
! initialization

      FP      = 0.0
      RAIN    = 0.0
      SNOW    = 0.0 
      QINTR   = 0.
      QDRIPR  = 0.
      QTHROR  = 0.
      QINTR   = 0.
      QINTS   = 0.
      QDRIPS  = 0.0
      QTHROS  = 0.
      QRAIN   = 0.0
      QSNOW   = 0.0
      SNOWHIN = 0.0
      ECAN    = 0.0
! --------------------------------------------------------------------
! partition precipitation into rain and snow.

! Jordan (1991)

     IF(OPT_SNF == 1) THEN
       IF(SFCTMP > TFRZ+2.5)THEN
           FPICE = 0.
       ELSE
         IF(SFCTMP <= TFRZ+0.5)THEN
           FPICE = 1.0
         ELSE IF(SFCTMP <= TFRZ+2.)THEN
           FPICE = 1.-(-54.632 + 0.2*SFCTMP)
         ELSE
           FPICE = 0.6
         ENDIF
       ENDIF
     ENDIF

     IF(OPT_SNF == 2) THEN
       IF(SFCTMP >= TFRZ+2.2) THEN
           FPICE = 0.
       ELSE
           FPICE = 1.0
       ENDIF
     ENDIF

     IF(OPT_SNF == 3) THEN
       IF(SFCTMP >= TFRZ) THEN
           FPICE = 0.
       ELSE
           FPICE = 1.0
       ENDIF
     ENDIF

! Behrangi et al. (2018) Q J R Meteorol Soc. 2018;144 (Suppl. 1):89â€“102

     IF(OPT_SNF == 4) THEN
           FPICE = 1.0/(1.0+5.E-5*exp(2.0*(TWET+4.))) !Figure 5c of Behrangi et al. (2018)
     ENDIF

! Hedstrom NR and JW Pomeroy (1998), Hydrol. Processes, 12, 1611-1625
! fresh snow density

 !niuBDFALL = MAX(120.,67.92+51.25*EXP((SFCTMP-TFRZ)/2.59))
     BDFALL = MAX(120.,67.92+51.25*EXP(MIN(2.5,(SFCTMP-TFRZ))/2.59))

     RAIN   = (QPRECC + QPRECL) * (1.-FPICE)
     SNOW   = (QPRECC + QPRECL) * FPICE

! fractional area that receives precipitation (see, Niu et al. 2005)
   
    IF(QPRECC + QPRECL > 0.) & 
       FP = (QPRECC + QPRECL) / (10.*QPRECC + QPRECL)

! --------------------------- liquid water ------------------------------
! maximum canopy water

      MAXLIQ =  CH2OP(VEGTYP) * (ELAI+ ESAI)

! average interception and throughfall

      IF((ELAI+ ESAI).GT.0.) THEN
         QINTR  = FVEG * RAIN * FP  ! interception capability
         QINTR  = MIN(QINTR, (MAXLIQ - CANLIQ)/DT * (1.-EXP(-RAIN*DT/MAXLIQ)) )
         QINTR  = MAX(QINTR, 0.)
         QDRIPR = FVEG * RAIN - QINTR
         QTHROR = (1.-FVEG) * RAIN
      ELSE
         QINTR  = 0.
         QDRIPR = 0.
         QTHROR = RAIN
      END IF

! evaporation, transpiration, and dew

      IF (TV .GT. TFRZ) THEN
        ETRAN = MAX( FCTR/HVAP, 0. )
        QEVAC = MAX( FCEV/HVAP, 0. )
        QDEWC = ABS( MIN( FCEV/HVAP, 0. ) )
        QSUBC = 0.
        QFROC = 0.
      ELSE
        ETRAN = MAX( FCTR/HSUB, 0. )
        QEVAC = 0.
        QDEWC = 0.
        QSUBC = MAX( FCEV/HSUB, 0. )
        QFROC = ABS( MIN( FCEV/HSUB, 0. ) )
      ENDIF

      QSUBCAN = QSUBC + QFROC   !sublimation from the canopy (mm/s)

! canopy water balance. for convenience allow dew to bring CANLIQ above
! maxh2o or else would have to re-adjust drip

       QEVAC = MIN(CANLIQ/DT,QEVAC)
       CANLIQ=MAX(0.,CANLIQ+(QINTR+QDEWC-QEVAC)*DT)
       IF(CANLIQ <= 1.E-03) CANLIQ = 0.0

! --------------------------- canopy ice ------------------------------
! for canopy ice

      MAXSNO = 6.6*(0.27+46./BDFALL) * (ELAI+ ESAI)

      IF((ELAI+ ESAI).GT.0.) THEN
         QINTS = FVEG * SNOW * FP
         QINTS = MIN(QINTS, (MAXSNO - CANICE)/DT * (1.-EXP(-SNOW*DT/MAXSNO)) )
         QINTS = MAX(QINTS, 0.)
         FT = MAX(0.0,(TV - 270.15) / 1.87E5)
         FV = SQRT(UU*UU + VV*VV) / 1.56E5
         QDRIPS = MAX(0.,CANICE/DT) * (FV+FT)
         QTHROS = (1.0-FVEG) * SNOW + (FVEG * SNOW - QINTS)
      ELSE
         QINTS  = 0.
         QDRIPS = 0.
         QTHROS = SNOW
      ENDIF

      QSUBC = MIN(CANICE/DT,QSUBC) 
      CANICE= MAX(0.,CANICE+(QINTS-QDRIPS)*DT + (QFROC-QSUBC)*DT)
      IF(CANICE.LE.1.E-3) CANICE = 0.
     
! wetted fraction of canopy

      IF(CANICE.GT.0.) THEN
           FWET = MAX(0.,CANICE) / MAX(MAXSNO,1.E-06)
      ELSE
           FWET = MAX(0.,CANLIQ) / MAX(MAXLIQ,1.E-06)
      ENDIF
      FWET = MIN(FWET, 1.) ** 0.667

! phase change

      QMELTC = 0.
      QFRZC = 0.

      IF(CANICE.GT.1.E-3.AND.TV.GT.TFRZ) THEN
         QMELTC = MIN(CANICE/DT,(TV-TFRZ)*CICE*CANICE/DENICE/(DT*HFUS))
         CANICE = MAX(0.,CANICE - QMELTC*DT)
         CANLIQ = MAX(0.,CANLIQ + QMELTC*DT)
         TV     = FWET*TFRZ + (1.-FWET)*TV
      ENDIF

      IF(CANLIQ.GT.1.E-3.AND.TV.LT.TFRZ) THEN
         QFRZC  = MIN(CANLIQ/DT,(TFRZ-TV)*CWAT*CANLIQ/DENH2O/(DT*HFUS))
         CANLIQ = MAX(0.,CANLIQ - QFRZC*DT)
         CANICE = MAX(0.,CANICE + QFRZC*DT)
         TV     = FWET*TFRZ + (1.-FWET)*TV
      ENDIF

! total canopy water

      CMC = CANLIQ + CANICE

! total canopy evaporation

      ECAN = QEVAC + QSUBC - QDEWC - QFROC

! rain or snow on the ground

      QRAIN   = QDRIPR + QTHROR
      QSNOW   = QDRIPS + QTHROS
      SNOWHIN = QSNOW/BDFALL

      IF (IST == 2 .AND. TG > TFRZ) THEN
         !niuQSNOW   = 0.
         SNOWHIN = 0.
      END IF

  END SUBROUTINE CANWATER
! ==================================================================================================
! ----------------------------------------------------------------------
  SUBROUTINE SNOWWATER (NSNOW  ,NSOIL  ,IMELT  ,DT     ,ZSOIL  , & !in
                        SFCTMP ,SNOWHIN,QSNOW  ,QSNFRO ,QSNSUB , & !in
                        QRAIN  ,FICEOLD,                 & !in
                        ISNOW  ,SNOWH  ,SNEQV  ,SNICE  ,SNLIQ  , & !inout
                        SH2O   ,SICE   ,STC    ,ZSNSO  ,DZSNSO , & !inout
                        QSNBOT ,SNOFLOW)                           !out
! ----------------------------------------------------------------------
  IMPLICIT NONE
! ----------------------------------------------------------------------
! input
  INTEGER,                         INTENT(IN)    :: NSNOW  !maximum no. of snow layers
  INTEGER,                         INTENT(IN)    :: NSOIL  !no. of soil layers
  INTEGER, DIMENSION(-NSNOW+1:0) , INTENT(IN)    :: IMELT  !melting state index [0-no melt;1-melt]
  REAL,                            INTENT(IN)    :: DT     !time step (s)
  REAL, DIMENSION(       1:NSOIL), INTENT(IN)    :: ZSOIL  !depth of layer-bottom from soil surface
  REAL,                            INTENT(IN)    :: SFCTMP !surface air temperature [k]
  REAL,                            INTENT(IN)    :: SNOWHIN!snow depth increasing rate (m/s)
  REAL,                            INTENT(IN)    :: QSNOW  !snow at ground srf (mm/s) [+]
  REAL,                            INTENT(IN)    :: QSNFRO !snow surface frost rate[mm/s]
  REAL,                            INTENT(IN)    :: QSNSUB !snow surface sublimation rate[mm/s]
  REAL,                            INTENT(IN)    :: QRAIN  !snow surface rain rate[mm/s]
  REAL, DIMENSION(-NSNOW+1:0)    , INTENT(IN)    :: FICEOLD!ice fraction at last timestep

! input & output
  INTEGER,                         INTENT(INOUT) :: ISNOW  !actual no. of snow layers
  REAL,                            INTENT(INOUT) :: SNOWH  !snow height [m]
  REAL,                            INTENT(INOUT) :: SNEQV  !snow water eqv. [mm]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNICE  !snow layer ice [mm]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNLIQ  !snow layer liquid water [mm]
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SH2O   !soil liquid moisture (m3/m3)
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SICE   !soil ice moisture (m3/m3)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC    !snow layer temperature [k]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: ZSNSO  !depth of snow/soil layer-bottom
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: DZSNSO !snow/soil layer thickness [m]

! output
  REAL,                              INTENT(OUT) :: QSNBOT !melting water out of snow bottom [mm/s]
  REAL,                              INTENT(OUT) :: SNOFLOW!glacier flow [mm]

! local
  INTEGER :: IZ,i
  REAL    :: BDSNOW  !bulk density of snow (kg/m3)
! ----------------------------------------------------------------------
   SNOFLOW = 0.0

   CALL SNOWFALL (NSOIL  ,NSNOW  ,DT     ,QSNOW  ,SNOWHIN, & !in
                  SFCTMP ,                         & !in
                  ISNOW  ,SNOWH  ,DZSNSO ,STC    ,SNICE  , & !inout
                  SNLIQ  ,SNEQV  )                           !inout

   if(isnow < 0) then        !when more than one layer
   CALL  COMPACT (NSNOW  ,NSOIL  ,DT     ,STC    ,SNICE  , & !in
                  SNLIQ  ,ZSOIL  ,IMELT  ,FICEOLD, & !in
                  ISNOW  ,DZSNSO ,ZSNSO  )                   !inout

   CALL  COMBINE (NSNOW  ,NSOIL  ,                 & !in
                  ISNOW  ,SH2O   ,STC    ,SNICE  ,SNLIQ  , & !inout
                  DZSNSO ,SICE   ,SNOWH  ,SNEQV  )           !inout

   CALL   DIVIDE (NSNOW  ,NSOIL  ,                         & !in
                  ISNOW  ,STC    ,SNICE  ,SNLIQ  ,DZSNSO )   !inout
   end if

!set empty snow layers to zero

   do iz = -nsnow+1, isnow
        snice(iz) = 0.
        snliq(iz) = 0.
        stc(iz)   = 0.
        dzsnso(iz)= 0.
        zsnso(iz) = 0.
   enddo

   CALL  SNOWH2O (NSNOW  ,NSOIL  ,DT     ,QSNFRO ,QSNSUB , & !in 
                  QRAIN  ,                                 & !in
                  ISNOW  ,DZSNSO ,SNOWH  ,SNEQV  ,SNICE  , & !inout
                  SNLIQ  ,SH2O   ,SICE   ,STC    ,         & !inout
                  QSNBOT )                                   !out

!to obtain equilibrium state of snow in glacier region
       
   IF(SNEQV > 2000.) THEN   ! 2000 mm -> maximum water depth
      BDSNOW      = SNICE(0) / DZSNSO(0)
      SNOFLOW     = (SNEQV - 2000.)
      SNICE(0)    = SNICE(0)  - SNOFLOW 
      DZSNSO(0)   = DZSNSO(0) - SNOFLOW/BDSNOW
      SNOFLOW     = SNOFLOW / DT
   END IF

! sum up snow mass for layered snow

   IF(ISNOW /= 0) THEN
       SNEQV = 0.
       DO IZ = ISNOW+1,0
             SNEQV = SNEQV + SNICE(IZ) + SNLIQ(IZ)
       ENDDO
   END IF

! Reset ZSNSO and layer thinkness DZSNSO

   DO IZ = ISNOW+1, 0
        DZSNSO(IZ) = -DZSNSO(IZ)
   END DO

   DZSNSO(1) = ZSOIL(1)
   DO IZ = 2,NSOIL
        DZSNSO(IZ) = (ZSOIL(IZ) - ZSOIL(IZ-1))
   END DO

   ZSNSO(ISNOW+1) = DZSNSO(ISNOW+1)
   DO IZ = ISNOW+2 ,NSOIL
       ZSNSO(IZ) = ZSNSO(IZ-1) + DZSNSO(IZ)
   ENDDO

   DO IZ = ISNOW+1 ,NSOIL
       DZSNSO(IZ) = -DZSNSO(IZ)
   END DO

  END SUBROUTINE SNOWWATER
! ==================================================================================================
  SUBROUTINE SNOWFALL (NSOIL  ,NSNOW  ,DT     ,QSNOW  ,SNOWHIN , & !in
                       SFCTMP ,                          & !in
                       ISNOW  ,SNOWH  ,DZSNSO ,STC    ,SNICE   , & !inout
                       SNLIQ  ,SNEQV  )                            !inout
! ----------------------------------------------------------------------
! snow depth and density to account for the new snowfall.
! new values of snow depth & density returned.
! ----------------------------------------------------------------------
    IMPLICIT NONE
! ----------------------------------------------------------------------
! input

  INTEGER,                            INTENT(IN) :: NSOIL  !no. of soil layers
  INTEGER,                            INTENT(IN) :: NSNOW  !maximum no. of snow layers
  REAL,                               INTENT(IN) :: DT     !main time step (s)
  REAL,                               INTENT(IN) :: QSNOW  !snow at ground srf (mm/s) [+]
  REAL,                               INTENT(IN) :: SNOWHIN!snow depth increasing rate (m/s)
  REAL,                               INTENT(IN) :: SFCTMP !surface air temperature [k]

! input and output

  INTEGER,                         INTENT(INOUT) :: ISNOW  !actual no. of snow layers
  REAL,                            INTENT(INOUT) :: SNOWH  !snow depth [m]
  REAL,                            INTENT(INOUT) :: SNEQV  !swow water equivalent [m]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: DZSNSO !thickness of snow/soil layers (m)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC    !snow layer temperature [k]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNICE  !snow layer ice [mm]
  REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNLIQ  !snow layer liquid water [mm]

! local

  INTEGER :: NEWNODE            ! 0-no new layers, 1-creating new layers
! ----------------------------------------------------------------------
    NEWNODE  = 0

! shallow snow / no layer

    IF(ISNOW == 0 .and. QSNOW > 0.)  THEN
      SNOWH = SNOWH + SNOWHIN * DT
      SNEQV = SNEQV + QSNOW * DT
    END IF

! creating a new layer
 
    IF(ISNOW == 0  .AND. QSNOW>0. .AND. SNOWH >= 0.05) THEN
      ISNOW    = -1
      NEWNODE  =  1
      DZSNSO(0)= SNOWH
      SNOWH    = 0.
      STC(0)   = MIN(273.16, SFCTMP)   ! temporary setup
      SNICE(0) = SNEQV
      SNLIQ(0) = 0.
    END IF

! snow with layers

    IF(ISNOW <  0 .AND. NEWNODE == 0 .AND. QSNOW > 0.) then
         SNICE(ISNOW+1)  = SNICE(ISNOW+1)   + QSNOW   * DT
         DZSNSO(ISNOW+1) = DZSNSO(ISNOW+1)  + SNOWHIN * DT
    ENDIF

! ----------------------------------------------------------------------
  END SUBROUTINE SNOWFALL
! ==================================================================================================
  SUBROUTINE COMBINE (NSNOW  ,NSOIL  ,                 & !in
                      ISNOW  ,SH2O   ,STC    ,SNICE  ,SNLIQ  , & !inout
                      DZSNSO ,SICE   ,SNOWH  ,SNEQV  )           !inout
! ----------------------------------------------------------------------
    IMPLICIT NONE
! ----------------------------------------------------------------------
! input

    INTEGER, INTENT(IN)     :: NSNOW                        !maximum no. of snow layers
    INTEGER, INTENT(IN)     :: NSOIL                        !no. of soil layers

! input and output

    INTEGER,                         INTENT(INOUT) :: ISNOW !actual no. of snow layers
    REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SH2O  !soil liquid moisture (m3/m3)
    REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SICE  !soil ice moisture (m3/m3)
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC   !snow layer temperature [k]
    REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNICE !snow layer ice [mm]
    REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNLIQ !snow layer liquid water [mm]
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: DZSNSO!snow layer depth [m]
    REAL,                            INTENT(INOUT) :: sneqv !snow water equivalent [m]
    REAL,                            INTENT(INOUT) :: snowh !snow depth [m]

! local variables:

    INTEGER :: I,J,K,L               ! node indices
    INTEGER :: ISNOW_OLD             ! number of top snow layer
    INTEGER :: MSSI                  ! node index
    INTEGER :: NEIBOR                ! adjacent node selected for combination
    REAL    :: ZWICE                 ! total ice mass in snow
    REAL    :: ZWLIQ                 ! total liquid water in snow

    REAL    :: DZMIN(3)              ! minimum of top snow layer
    DATA DZMIN /0.045, 0.05, 0.2/
!-----------------------------------------------------------------------

       ISNOW_OLD = ISNOW

       DO J = ISNOW_OLD+1,0
          IF (SNICE(J) <= .1) THEN
             IF(J /= 0) THEN
                SNLIQ(J+1) = SNLIQ(J+1) + SNLIQ(J)
                SNICE(J+1) = SNICE(J+1) + SNICE(J)
             ELSE
                SH2O(1) = SH2O(1)+SNLIQ(J)/(DZSNSO(1)*1000.)
                SICE(1) = SICE(1)+SNICE(J)/(DZSNSO(1)*1000.)
             ENDIF

             ! shift all elements above this down by one.
             IF (J > ISNOW+1 .AND. ISNOW < -1) THEN
                DO I = J, ISNOW+2, -1
                   STC(I)   = STC(I-1)
                   SNLIQ(I) = SNLIQ(I-1)
                   SNICE(I) = SNICE(I-1)
                   DZSNSO(I)= DZSNSO(I-1)
                END DO
             END IF
             ISNOW = ISNOW + 1
          END IF
       END DO

! to conserve water in case of too large surface sublimation

       IF(SICE(1) < 0.) THEN
          SH2O(1) = SH2O(1) + SICE(1)
          SICE(1) = 0.
       END IF

       SNEQV  = 0.
       SNOWH  = 0.
       ZWICE  = 0.
       ZWLIQ  = 0.

       DO J = ISNOW+1,0
             SNEQV = SNEQV + SNICE(J) + SNLIQ(J)
             SNOWH = SNOWH + DZSNSO(J)
             ZWICE = ZWICE + SNICE(J)
             ZWLIQ = ZWLIQ + SNLIQ(J)
       END DO

! check the snow depth - all snow gone
! the liquid water assumes ponding on soil surface.

       IF (SNOWH < 0.05 ) THEN
          ISNOW  = 0
          SNEQV = ZWICE
          SH2O(1) = SH2O(1) + ZWLIQ / (DZSNSO(1) * 1000.)
          IF(SNEQV <= 0.) SNOWH = 0.
       END IF

! check the snow depth - snow layers combined

       IF (ISNOW < -1) THEN

          ISNOW_OLD = ISNOW
          MSSI     = 1

          DO I = ISNOW_OLD+1,0
             IF (DZSNSO(I) < DZMIN(MSSI)) THEN

                IF (I == ISNOW+1) THEN
                   NEIBOR = I + 1
                ELSE IF (I == 0) THEN
                   NEIBOR = I - 1
                ELSE
                   NEIBOR = I + 1
                   IF ((DZSNSO(I-1)+DZSNSO(I)) < (DZSNSO(I+1)+DZSNSO(I))) NEIBOR = I-1
                END IF

                ! Node l and j are combined and stored as node j.
                IF (NEIBOR > I) THEN
                   J = NEIBOR
                   L = I
                ELSE
                   J = I
                   L = NEIBOR
                END IF

                CALL COMBO (DZSNSO(J), SNLIQ(J), SNICE(J), &
                   STC(J), DZSNSO(L), SNLIQ(L), SNICE(L), STC(L) )

                ! Now shift all elements above this down one.
                IF (J-1 > ISNOW+1) THEN
                   DO K = J-1, ISNOW+2, -1
                      STC(K)   = STC(K-1)
                      SNICE(K) = SNICE(K-1)
                      SNLIQ(K) = SNLIQ(K-1)
                      DZSNSO(K) = DZSNSO(K-1)
                   END DO
                END IF

                ! Decrease the number of snow layers
                ISNOW = ISNOW + 1
                IF (ISNOW >= -1) EXIT
             ELSE

                ! The layer thickness is greater than the prescribed minimum value
                MSSI = MSSI + 1

             END IF
          END DO

       END IF

  END SUBROUTINE COMBINE
! ==================================================================================================
  SUBROUTINE DIVIDE (NSNOW  ,NSOIL  ,                         & !in
                     ISNOW  ,STC    ,SNICE  ,SNLIQ  ,DZSNSO  )  !inout
! ----------------------------------------------------------------------
    IMPLICIT NONE
! ----------------------------------------------------------------------
! input

    INTEGER, INTENT(IN)                            :: NSNOW !maximum no. of snow layers [ =3]
    INTEGER, INTENT(IN)                            :: NSOIL !no. of soil layers [ =4]

! input and output

    INTEGER                        , INTENT(INOUT) :: ISNOW !actual no. of snow layers 
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC   !snow layer temperature [k]
    REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNICE !snow layer ice [mm]
    REAL, DIMENSION(-NSNOW+1:    0), INTENT(INOUT) :: SNLIQ !snow layer liquid water [mm]
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: DZSNSO!snow layer depth [m]

! local variables:

    INTEGER                                        :: J     !indices
    INTEGER                                        :: MSNO  !number of layer (top) to MSNO (bot)
    REAL                                           :: DRR   !thickness of the combined [m]
    REAL, DIMENSION(       1:NSNOW)                :: DZ    !snow layer thickness [m]
    REAL, DIMENSION(       1:NSNOW)                :: SWICE !partial volume of ice [m3/m3]
    REAL, DIMENSION(       1:NSNOW)                :: SWLIQ !partial volume of liquid water [m3/m3]
    REAL, DIMENSION(       1:NSNOW)                :: TSNO  !node temperature [k]
    REAL                                           :: ZWICE !temporary
    REAL                                           :: ZWLIQ !temporary
    REAL                                           :: PROPOR!temporary
    REAL                                           :: DTDZ  !temporary
! ----------------------------------------------------------------------

    DO J = 1,NSNOW
          IF (J <= ABS(ISNOW)) THEN
             DZ(J)    = DZSNSO(J+ISNOW)
             SWICE(J) = SNICE(J+ISNOW)
             SWLIQ(J) = SNLIQ(J+ISNOW)
             TSNO(J)  = STC(J+ISNOW)
          END IF
    END DO

       MSNO = ABS(ISNOW)

       IF (MSNO == 1) THEN
          ! Specify a new snow layer
          IF (DZ(1) > 0.05) THEN
             MSNO = 2
             DZ(1)    = DZ(1)/2.
             SWICE(1) = SWICE(1)/2.
             SWLIQ(1) = SWLIQ(1)/2.
             DZ(2)    = DZ(1)
             SWICE(2) = SWICE(1)
             SWLIQ(2) = SWLIQ(1)
             TSNO(2)  = TSNO(1)
          END IF
       END IF

       IF (MSNO > 1) THEN
          IF (DZ(1) > 0.05) THEN
             DRR      = DZ(1) - 0.05
             PROPOR   = DRR/DZ(1)
             ZWICE    = PROPOR*SWICE(1)
             ZWLIQ    = PROPOR*SWLIQ(1)
             PROPOR   = 0.05/DZ(1)
             SWICE(1) = PROPOR*SWICE(1)
             SWLIQ(1) = PROPOR*SWLIQ(1)
             DZ(1)    = 0.05

             CALL COMBO (DZ(2), SWLIQ(2), SWICE(2), TSNO(2), DRR, &
                  ZWLIQ, ZWICE, TSNO(1))

             ! subdivide a new layer
             IF (MSNO <= 2 .AND. DZ(2) > 0.10) THEN
                MSNO = 3
                DTDZ = (TSNO(1) - TSNO(2))/((DZ(1)+DZ(2))/2.)
                DZ(2)    = DZ(2)/2.
                SWICE(2) = SWICE(2)/2.
                SWLIQ(2) = SWLIQ(2)/2.
                DZ(3)    = DZ(2)
                SWICE(3) = SWICE(2)
                SWLIQ(3) = SWLIQ(2)
                TSNO(3) = TSNO(2) - DTDZ*DZ(2)/2.
                IF (TSNO(3) >= TFRZ) THEN
                   TSNO(3)  = TSNO(2)
                ELSE
                   TSNO(2) = TSNO(2) + DTDZ*DZ(2)/2.
                ENDIF

             END IF
          END IF
       END IF

       IF (MSNO > 2) THEN
          IF (DZ(2) > 0.2) THEN
             DRR = DZ(2) - 0.2
             PROPOR   = DRR/DZ(2)
             ZWICE    = PROPOR*SWICE(2)
             ZWLIQ    = PROPOR*SWLIQ(2)
             PROPOR   = 0.2/DZ(2)
             SWICE(2) = PROPOR*SWICE(2)
             SWLIQ(2) = PROPOR*SWLIQ(2)
             DZ(2)    = 0.2
             CALL COMBO (DZ(3), SWLIQ(3), SWICE(3), TSNO(3), DRR, &
                  ZWLIQ, ZWICE, TSNO(2))
          END IF
       END IF

       ISNOW = -MSNO

    DO J = ISNOW+1,0
             DZSNSO(J) = DZ(J-ISNOW)
             SNICE(J) = SWICE(J-ISNOW)
             SNLIQ(J) = SWLIQ(J-ISNOW)
             STC(J)   = TSNO(J-ISNOW)
    END DO


!    DO J = ISNOW+1,NSOIL
!    WRITE(*,'(I5,7F10.3)') J, DZSNSO(J), SNICE(J), SNLIQ(J),STC(J)
!    END DO

  END SUBROUTINE DIVIDE
! ==================================================================================================

! ----------------------------------------------------------------------
  SUBROUTINE COMBO(DZ,  WLIQ,  WICE, T, DZ2, WLIQ2, WICE2, T2)
! ----------------------------------------------------------------------
    IMPLICIT NONE
! ----------------------------------------------------------------------

! ----------------------------------------------------------------------s
! input

    REAL, INTENT(IN)    :: DZ2   !nodal thickness of 2 elements being combined [m]
    REAL, INTENT(IN)    :: WLIQ2 !liquid water of element 2 [kg/m2]
    REAL, INTENT(IN)    :: WICE2 !ice of element 2 [kg/m2]
    REAL, INTENT(IN)    :: T2    !nodal temperature of element 2 [k]
    REAL, INTENT(INOUT) :: DZ    !nodal thickness of 1 elements being combined [m]
    REAL, INTENT(INOUT) :: WLIQ  !liquid water of element 1
    REAL, INTENT(INOUT) :: WICE  !ice of element 1 [kg/m2]
    REAL, INTENT(INOUT) :: T     !node temperature of element 1 [k]

! local 

    REAL                :: DZC   !total thickness of nodes 1 and 2 (DZC=DZ+DZ2).
    REAL                :: WLIQC !combined liquid water [kg/m2]
    REAL                :: WICEC !combined ice [kg/m2]
    REAL                :: TC    !combined node temperature [k]
    REAL                :: H     !enthalpy of element 1 [J/m2]
    REAL                :: H2    !enthalpy of element 2 [J/m2]
    REAL                :: HC    !temporary

!-----------------------------------------------------------------------

    DZC = DZ+DZ2
    WICEC = (WICE+WICE2)
    WLIQC = (WLIQ+WLIQ2)
    H = (CICE*WICE+CWAT*WLIQ) * (T-TFRZ)+HFUS*WLIQ
    H2= (CICE*WICE2+CWAT*WLIQ2) * (T2-TFRZ)+HFUS*WLIQ2

    HC = H + H2
    IF(HC < 0.)THEN
       TC = TFRZ + HC/(CICE*WICEC + CWAT*WLIQC)
    ELSE IF (HC.LE.HFUS*WLIQC) THEN
       TC = TFRZ
    ELSE
       TC = TFRZ + (HC - HFUS*WLIQC) / (CICE*WICEC + CWAT*WLIQC)
    END IF

    DZ = DZC
    WICE = WICEC
    WLIQ = WLIQC
    T = TC

  END SUBROUTINE COMBO
! ==================================================================================================
! ----------------------------------------------------------------------
  SUBROUTINE COMPACT (NSNOW  ,NSOIL  ,DT     ,STC    ,SNICE  , & !in
                      SNLIQ  ,ZSOIL  ,IMELT  ,FICEOLD, & !in
                      ISNOW  ,DZSNSO ,ZSNSO )                    !inout
! ----------------------------------------------------------------------
! ----------------------------------------------------------------------
  IMPLICIT NONE
! ----------------------------------------------------------------------
! input
   INTEGER,                         INTENT(IN)    :: NSOIL  !no. of soil layers [ =4]
   INTEGER,                         INTENT(IN)    :: NSNOW  !maximum no. of snow layers [ =3]
   INTEGER, DIMENSION(-NSNOW+1:0) , INTENT(IN)    :: IMELT  !melting state index [0-no melt;1-melt]
   REAL,                            INTENT(IN)    :: DT     !time step (sec)
   REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)    :: STC    !snow layer temperature [k]
   REAL, DIMENSION(-NSNOW+1:    0), INTENT(IN)    :: SNICE  !snow layer ice [mm]
   REAL, DIMENSION(-NSNOW+1:    0), INTENT(IN)    :: SNLIQ  !snow layer liquid water [mm]
   REAL, DIMENSION(       1:NSOIL), INTENT(IN)    :: ZSOIL  !depth of layer-bottom from soil srf
   REAL, DIMENSION(-NSNOW+1:    0), INTENT(IN)    :: FICEOLD!ice fraction at last timestep

! input and output
   INTEGER,                         INTENT(INOUT) :: ISNOW  ! actual no. of snow layers
   REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: DZSNSO ! snow layer thickness [m]
   REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: ZSNSO  ! depth of snow/soil layer-bottom

! local
   REAL, PARAMETER     :: C2 = 21.e-3   ![m3/kg] ! default 21.e-3
   REAL, PARAMETER     :: C3 = 2.5e-6   ![1/s]  
   REAL, PARAMETER     :: C4 = 0.04     ![1/k]
   REAL, PARAMETER     :: C5 = 2.0      !
   REAL, PARAMETER     :: DM = 100.0    !upper Limit on destructive metamorphism compaction [kg/m3]
   REAL, PARAMETER     :: ETA0 = 0.8e+6 !viscosity coefficient [kg-s/m2] 
                                        !according to Anderson, it is between 0.52e6~1.38e6
   REAL :: BURDEN !pressure of overlying snow [kg/m2]
   REAL :: DDZ1   !rate of settling of snow pack due to destructive metamorphism.
   REAL :: DDZ2   !rate of compaction of snow pack due to overburden.
   REAL :: DDZ3   !rate of compaction of snow pack due to melt [1/s]
   REAL :: DEXPF  !EXPF=exp(-c4*(273.15-STC)).
   REAL :: TD     !STC - TFRZ [K]
   REAL :: PDZDTC !nodal rate of change in fractional-thickness due to compaction [fraction/s]
   REAL :: VOID   !void (1 - SNICE - SNLIQ)
   REAL :: WX     !water mass (ice + liquid) [kg/m2]
   REAL :: BI     !partial density of ice [kg/m3]
   REAL, DIMENSION(-NSNOW+1:0) :: FICE   !fraction of ice at current time step

   INTEGER  :: J

! ----------------------------------------------------------------------
    BURDEN = 0.0

    DO J = ISNOW+1, 0

        WX      = SNICE(J) + SNLIQ(J)
        FICE(J) = SNICE(J) / WX
        VOID    = 1. - (SNICE(J)/DENICE + SNLIQ(J)/DENH2O) / DZSNSO(J)

        ! Allow compaction only for non-saturated node and higher ice lens node.
        IF (VOID > 0.001 .AND. SNICE(J) > 0.1) THEN
           BI = SNICE(J) / DZSNSO(J)
           TD = MAX(0.,TFRZ-STC(J))
           DEXPF = EXP(-C4*TD)

           ! Settling as a result of destructive metamorphism

           DDZ1 = -C3*DEXPF

           IF (BI > DM) DDZ1 = DDZ1*EXP(-46.0E-3*(BI-DM))

           ! Liquid water term

           IF (SNLIQ(J) > 0.01*DZSNSO(J)) DDZ1=DDZ1*C5

           ! Compaction due to overburden

           DDZ2 = -(BURDEN+0.5*WX)*EXP(-0.08*TD-C2*BI)/ETA0 ! 0.5*WX -> self-burden

           ! Compaction occurring during melt

           IF (IMELT(J) == 1) THEN
              DDZ3 = MAX(0.,(FICEOLD(J) - FICE(J))/MAX(1.E-6,FICEOLD(J)))
              DDZ3 = - DDZ3/DT           ! sometimes too large
           ELSE
              DDZ3 = 0.
           END IF

           ! Time rate of fractional change in DZ (units of s-1)

           PDZDTC = (DDZ1 + DDZ2 + DDZ3)*DT
           PDZDTC = MAX(-0.5,PDZDTC)

           ! The change in DZ due to compaction

           DZSNSO(J) = DZSNSO(J)*(1.+PDZDTC)
        END IF

        ! Pressure of overlying snow

        BURDEN = BURDEN + WX

    END DO

  END SUBROUTINE COMPACT
! ==================================================================================================
  SUBROUTINE SNOWH2O (NSNOW  ,NSOIL  ,DT     ,QSNFRO ,QSNSUB , & !in 
                      QRAIN  ,                         & !in
                      ISNOW  ,DZSNSO ,SNOWH  ,SNEQV  ,SNICE  , & !inout
                      SNLIQ  ,SH2O   ,SICE   ,STC    ,         & !inout
                      QSNBOT )                                   !out
! ----------------------------------------------------------------------
! Renew the mass of ice lens (SNICE) and liquid (SNLIQ) of the
! surface snow layer resulting from sublimation (frost) / evaporation (dew)
! ----------------------------------------------------------------------
   IMPLICIT NONE
! ----------------------------------------------------------------------
! input

   INTEGER,                         INTENT(IN) :: NSNOW  !maximum no. of snow layers[=3]
   INTEGER,                         INTENT(IN) :: NSOIL  !No. of soil layers[=4]
   REAL,                            INTENT(IN) :: DT     !time step
   REAL,                            INTENT(IN) :: QSNFRO !snow surface frost rate[mm/s]
   REAL,                            INTENT(IN) :: QSNSUB !snow surface sublimation rate[mm/s]
   REAL,                            INTENT(IN) :: QRAIN  !snow surface rain rate[mm/s]

! output

   REAL, INTENT(OUT)                           :: QSNBOT !melting water out of snow bottom [mm/s]

! input and output

   INTEGER,                         INTENT(INOUT) :: ISNOW  !actual no. of snow layers
   REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: DZSNSO ! snow layer depth [m]
   REAL,                            INTENT(INOUT) :: SNOWH  !snow height [m]
   REAL,                            INTENT(INOUT) :: SNEQV  !snow water eqv. [mm]
   REAL, DIMENSION(-NSNOW+1:0),     INTENT(INOUT) :: SNICE  !snow layer ice [mm]
   REAL, DIMENSION(-NSNOW+1:0),     INTENT(INOUT) :: SNLIQ  !snow layer liquid water [mm]
   REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SH2O   !soil liquid moisture (m3/m3)
   REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SICE   !soil ice moisture (m3/m3)
   REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(INOUT) :: STC    !snow layer temperature [k]

! local variables:

   INTEGER                     :: J         !do loop/array indices
   REAL                        :: QIN       !water flow into the element (mm/s)
   REAL                        :: QOUT      !water flow out of the element (mm/s)
   REAL                        :: WGDIF     !ice mass after minus sublimation
   REAL, DIMENSION(-NSNOW+1:0) :: VOL_LIQ   !partial volume of liquid water in layer
   REAL, DIMENSION(-NSNOW+1:0) :: VOL_ICE   !partial volume of ice lens in layer
   REAL, DIMENSION(-NSNOW+1:0) :: EPORE     !effective porosity = porosity - VOL_ICE
   REAL :: DSNOWH, TEMP, BDSNOW
! ----------------------------------------------------------------------

!for the case when SNEQV becomes '0' after 'COMBINE'

     IF(SNEQV == 0.) THEN
           SH2O(1) =  SH2O(1) + (QSNFRO-QSNSUB)*DT/(DZSNSO(1)*1000.)
     END IF

! for shallow snow without a layer
! snow surface sublimation may be larger than existing snow mass. To conserve water,
! excessive sublimation is used to reduce soil water. Smaller time steps would tend 
! to aviod this problem.

     IF(ISNOW == 0 .and. SNEQV > 0.) THEN
        BDSNOW = SNEQV/SNOWH   !niu added
        TEMP   = SNEQV
        SNEQV  = SNEQV - QSNSUB*DT + QSNFRO*DT
        DSNOWH = (SNEQV-TEMP)/BDSNOW
        SNOWH  = MAX(0.,SNOWH + DSNOWH)

        IF(SNEQV < 0.) THEN
           SICE(1) = SICE(1) + SNEQV/(DZSNSO(1)*1000.)
           SNEQV   = 0.
        END IF
        IF(SICE(1) < 0.) THEN
           SH2O(1) = SH2O(1) + SICE(1)
           SICE(1) = 0.
        END IF
     END IF

      IF(SNEQV <= 1.E-6) THEN
         SNEQV = 0.0
         SNOWH = 0.0
      END IF

! for deep snow

     if(isnow <0) then
       WGDIF = SNICE(ISNOW+1) - QSNSUB*DT + QSNFRO*DT
       SNICE(ISNOW+1) = WGDIF
            IF (WGDIF < 1.e-6 .and. ISNOW <0) THEN
                CALL  COMBINE (NSNOW  ,NSOIL  ,              & !in
                    ISNOW  ,SH2O   ,STC    ,SNICE  ,SNLIQ  , & !inout
                    DZSNSO ,SICE   ,SNOWH  ,SNEQV  )           !inout
            ENDIF

       if(isnow == 0) go to 100

       SNLIQ(ISNOW+1) = SNLIQ(ISNOW+1) + QRAIN * DT
       SNLIQ(ISNOW+1) = MAX(0., SNLIQ(ISNOW+1))
     end if

  100 continue

! Porosity and partial volume

    DO J = ISNOW+1, 0
             VOL_ICE(J)      = MIN(1., SNICE(J)/(DZSNSO(J)*DENICE))
             EPORE(J)        = 1. - VOL_ICE(J)
    END DO

    QIN = 0.
    QOUT = 0.

    DO J = ISNOW+1, 0
             SNLIQ(J)   = SNLIQ(J) + QIN
             VOL_LIQ(J) = SNLIQ(J)/(DZSNSO(J)*DENH2O)   !niu: allowed to be > EPORE

             QOUT = MAX(0.,(VOL_LIQ(J)-SSI*EPORE(J))*DZSNSO(J))

             QOUT     = QOUT*DENH2O
             SNLIQ(J) = SNLIQ(J) - QOUT
             QIN      = QOUT
    END DO

! Liquid water from snow bottom to soil

    QSNBOT = QOUT / DT           ! mm/s

  END SUBROUTINE SNOWH2O
! ==================================================================================================
  SUBROUTINE SOILWATER (NSOIL  ,NSNOW  ,DT     ,ZSOIL  ,DZSNSO , & !in
                        QINSUR ,QSEVA  ,ETRANI ,SICE   ,SMCMAX , & !in
                        BEXP   ,PSISAT ,SMCWLT ,DKSAT  ,DWSAT  , & !in
                        SLOPE  ,KDT    ,FRZX   ,VGM    ,ix     ,iy     , & !in
                        SH2O   ,SMC    ,ZWT    ,                 & !inout
                        RUNSRF ,QDRAIN ,RUNSUB ,WCND   ,FCRMAX , & !out
                        PDDUM  ,LWFLUX)   !out

! ----------------------------------------------------------------------
! calculate surface runoff and soil moisture.
! ----------------------------------------------------------------------
! ----------------------------------------------------------------------
  IMPLICIT NONE
! ----------------------------------------------------------------------
! input

  INTEGER ,INTENT(IN) :: ix,iy
  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: BEXP         !B parameter
  REAL    ,INTENT(IN) :: VGM          !
  REAL    ,INTENT(IN) :: PSISAT       !saturated soil matric potential
  REAL    ,INTENT(IN) :: SMCWLT       !wilting point soil moisture (volumetric)
  REAL    ,INTENT(IN), DIMENSION(       1:NSOIL) :: DKSAT        !saturated soil hydraulic conductivity
  REAL    ,INTENT(IN) :: DWSAT        !saturated soil hydraulic diffusivity
  REAL    ,INTENT(IN) :: SLOPE        !slope index (0 - 1)
  REAL    ,INTENT(IN) :: KDT, FRZX

  INTEGER,                     INTENT(IN) :: NSOIL  !no. of soil layers
  INTEGER,                     INTENT(IN) :: NSNOW  !maximum no. of snow layers
  REAL,                        INTENT(IN) :: DT     !time step (sec)
  REAL, INTENT(IN)                        :: QINSUR !water input on soil surface [m/s]
  REAL, INTENT(IN)                        :: QSEVA  !evap from soil surface [m/s]
  REAL, DIMENSION(1:NSOIL),    INTENT(IN) :: ZSOIL  !depth of soil layer-bottom [m]
  REAL, DIMENSION(1:NSOIL),    INTENT(IN) :: ETRANI !evapotranspiration from soil layers [m/s]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DZSNSO !snow/soil layer depth [m]
  REAL, DIMENSION(1:NSOIL), INTENT(IN)   :: SICE   !soil ice content [m3/m3]

! input & output
  REAL, DIMENSION(1:NSOIL), INTENT(INOUT) :: SH2O   !soil liquid water content [m3/m3]
  REAL, DIMENSION(1:NSOIL), INTENT(INOUT) :: SMC    !total soil water content [m3/m3]
  REAL, INTENT(INOUT)                     :: ZWT    !water table depth [m]

! output
  REAL, INTENT(OUT)                       :: QDRAIN !soil-bottom free drainage [mm/s] 
  REAL, INTENT(OUT)                       :: RUNSRF !surface runoff [mm/s] 
  REAL, INTENT(OUT)                       :: RUNSUB !subsurface runoff [mm/s] 
  REAL, INTENT(OUT)                       :: FCRMAX !maximum of FCR (-)
  REAL, DIMENSION(1:NSOIL), INTENT(OUT)   :: WCND   !hydraulic conductivity (m/s)
  REAL, INTENT(OUT)                       :: PDDUM  !infiltration rate at surface (m/s)
  REAL, DIMENSION(1:NSOIL), INTENT(OUT)   :: LWFLUX !liq. water flux at bottom of soil layers [m/s]

! local
  INTEGER                                 :: K,IZ   !do-loop index
  INTEGER                                 :: ITER   !iteration index
  REAl                                    :: DTFINE !fine time step (s)
  REAL, DIMENSION(1:NSOIL)                :: RHSTT  !right-hand side term of the matrix
  REAL, DIMENSION(1:NSOIL)                :: AI     !left-hand side term
  REAL, DIMENSION(1:NSOIL)                :: BI     !left-hand side term
  REAL, DIMENSION(1:NSOIL)                :: CI     !left-hand side term

  REAL                                    :: FICE   !ice fraction in frozen soil
  REAL                                    :: WPLUS  !saturation excess of the total soil [m]
  REAL                                    :: RSAT   !accumulation of WPLUS (saturation excess) [m]
  REAL                                    :: SICEMAX!maximum soil ice content (m3/m3)
  REAL                                    :: SH2OMIN!minimum soil liquid water content (m3/m3)
  REAL                                    :: WTSUB  !sum of WCND(K)*DZSNSO(K)
  REAL                                    :: MH2O   !water mass removal (mm)
  REAL                                    :: FSAT   !fractional saturated area (-)
  REAL, DIMENSION(1:NSOIL)                :: MLIQ   !
  REAL                                    :: XS     !
  REAL                                    :: WATMIN !
  REAL                                    :: EPORE  !effective porosity [m3/m3]
  REAL, DIMENSION(1:NSOIL)                :: FCR    !impermeable fraction due to frozen soil
  INTEGER                                 :: NITER  !iteration times soil moisture (-)
  REAL                                    :: SMCTOT !2-m averaged soil moisture (m3/m3)
  REAL                                    :: DZTOT  !2-m soil depth (m)
  REAL, PARAMETER :: A = 3.5
  REAL :: FFF                        !runoff decay factor (m-1)
! ----------------------------------------------------------------------
    RUNSRF = 0.0
    PDDUM  = 0.0
    RSAT   = 0.0

! for the case when snowmelt water is too large

    DO K = 1,NSOIL
       EPORE   = SMCMAX-SICE(K)
       RSAT    = RSAT + MAX(0.,SH2O(K)-EPORE)*DZSNSO(K)  
       SH2O(K) = MIN(EPORE,SH2O(K))             
    END DO

!impermeable fraction due to frozen soil

    DO K = 1,NSOIL
       FICE    = MIN(1.0,SICE(K)/SMCMAX)
       FCR(K)  = MAX(0.0,EXP(-A*(1.-FICE))- EXP(-A)) /  &
                        (1.0              - EXP(-A))
    END DO

! maximum soil ice content and minimum liquid water of all layers

    SICEMAX = 0.0
    FCRMAX  = 0.0
    SH2OMIN = SMCMAX
    DO K = 1,NSOIL
       IF (SICE(K) > SICEMAX) SICEMAX = SICE(K)
       IF (FCR(K)  > FCRMAX)  FCRMAX  = FCR(K)
       IF (SH2O(K) < SH2OMIN) SH2OMIN = SH2O(K)
    END DO

!subsurface runoff for runoff scheme option 2

    IF(OPT_RUN == 2) THEN 
        FFF   = 2.0
        RSBMX = 4.0
        CALL ZWTEQ (NSOIL  ,NSNOW  ,ZSOIL  ,DZSNSO ,SH2O   ,&
                    SMCMAX ,BEXP   ,PSISAT ,ZWT)
        RUNSUB = (1.0-FCRMAX) * RSBMX * EXP(-TIMEAN) * EXP(-FFF*ZWT)   ! mm/s
    END IF

!surface runoff and infiltration rate using different schemes

    IF(OPT_RUN == 1) THEN

       IF(OPT_WATRET == 1) THEN
          FFF    = 0.5/VGM
       ELSE  
          FFF    = BEXP/3.
       END IF

       FSAT   = FSATMX*EXP(-0.5*FFF*ZWT)
       IF(QINSUR > 0.) THEN
         RUNSRF = QINSUR * ( (1.0-FCR(1))*FSAT + FCR(1) )
         PDDUM  = QINSUR - RUNSRF                          ! m/s 
       END IF
    END IF

    IF(OPT_RUN == 2) THEN
       FFF   = 2.0
       FSAT   = FSATMX*EXP(-0.5*FFF*ZWT)
       IF(QINSUR > 0.) THEN
         RUNSRF = QINSUR * ( (1.0-FCR(1))*FSAT + FCR(1) )
         PDDUM  = QINSUR - RUNSRF                          ! m/s 
       END IF
    END IF

    IF(OPT_RUN == 3) THEN
       CALL INFIL (NSOIL  ,DT     ,ZSOIL  ,SH2O   ,SICE   , & !in
                   SICEMAX,QINSUR ,SMCMAX ,SMCWLT ,BEXP   , & !in
                   DWSAT  ,DKSAT  ,KDT    ,FRZX   ,         & !in
                   PDDUM  ,RUNSRF )                           !out
    END IF

    IF(OPT_RUN == 4) THEN
       SMCTOT = 0.
       DZTOT  = 0.
       DO K = 1,NSOIL
          DZTOT   = DZTOT  + DZSNSO(K)  
          IF(DZTOT >= 2.0) EXIT
          SMCTOT  = SMCTOT + SMC(K)*DZSNSO(K)
       END DO
       SMCTOT = SMCTOT/DZTOT
       FSAT   = MAX(0.01,SMCTOT/SMCMAX) ** 4.        !BATS

       IF(QINSUR > 0.) THEN
         RUNSRF = QINSUR * ((1.0-FCR(1))*FSAT+FCR(1))  
         PDDUM  = QINSUR - RUNSRF                       ! m/s
       END IF
    END IF

! determine iteration times and finer time step

    NITER = 1

    IF (PDDUM*DT>=0.98*DZSNSO(1)*SMCMAX ) THEN           !niu
       RUNSRF = RUNSRF + (PDDUM-0.98*DZSNSO(1)*SMCMAX/DT)
       PDDUM  = 0.98*DZSNSO(1)*SMCMAX/DT
    END IF          

!    IF(OPT_INF == 1) THEN    !OPT_INF =2 may cause water imbalance
!       NITER = 3
!       IF (PDDUM*DT>DZSNSO(1)*SMCMAX ) THEN
!          NITER = NITER*2
!       END IF
!    END IF         
        
    DTFINE  = DT / NITER

! solve soil moisture

    DO ITER = 1, NITER
       CALL SRT   (NSOIL  ,ZSOIL  ,DTFINE ,PDDUM  ,ETRANI , & !in
                   QSEVA  ,SH2O   ,SMC    ,ZWT    ,FCR    , & !in
                   SICEMAX,FCRMAX ,SLOPE  ,BEXP   ,DWSAT  , & !in
                   DKSAT  ,SMCMAX ,                         & !in
                   RHSTT  ,AI     ,BI     ,CI     ,QDRAIN , & !out
                   WCND   ,LWFLUX )                           !out

       CALL SSTEP (NSOIL  ,NSNOW  ,DTFINE ,ZSOIL  ,DZSNSO , & !in
                   SICE   ,SMCMAX ,ix,iy,                   & !in
                   SH2O   ,SMC    ,AI     ,BI     ,CI     , & !inout
                   RHSTT  ,                                 & !inout
                   WPLUS)                                     !out
       RSAT =  RSAT + WPLUS
    END DO

    RUNSRF = RUNSRF * 1000. + RSAT * 1000./DT  ! m/s -> mm/s
    QDRAIN = QDRAIN * 1000.

! removal of soil water due to groundwater flow (option 2)

    IF(OPT_RUN == 2) THEN
         WTSUB = 0.
         DO K = 1, NSOIL
           WTSUB = WTSUB + WCND(K)*DZSNSO(K)
         END DO

         DO K = 1, NSOIL
           MH2O    = RUNSUB*DT*(WCND(K)*DZSNSO(K))/WTSUB       ! mm
           SH2O(K) = SH2O(K) - MH2O/(DZSNSO(K)*1000.)
         END DO
    END IF

! Limit MLIQ to be greater than or equal to watmin.
! Get water needed to bring MLIQ equal WATMIN from lower layer.

   IF(OPT_RUN /= 1) THEN
      DO IZ = 1, NSOIL
         MLIQ(IZ) = SH2O(IZ)*DZSNSO(IZ)*1000.
      END DO

      WATMIN = 0.0001           ! mm
      DO IZ = 1, NSOIL-1
          IF (MLIQ(IZ) .LT. 0.) THEN
             XS = WATMIN-MLIQ(IZ)
          ELSE
             XS = 0.
          END IF
          MLIQ(IZ  ) = MLIQ(IZ  ) + XS
          MLIQ(IZ+1) = MLIQ(IZ+1) - XS
      END DO

        IZ = NSOIL
        IF (MLIQ(IZ) .LT. WATMIN) THEN
           XS = WATMIN-MLIQ(IZ)
        ELSE
           XS = 0.
        END IF
        MLIQ(IZ) = MLIQ(IZ) + XS
        RUNSUB   = RUNSUB - XS/DT

      DO IZ = 1, NSOIL
        SH2O(IZ)     = MLIQ(IZ) / (DZSNSO(IZ)*1000.)
      END DO
   END IF

  END SUBROUTINE SOILWATER
! ==================================================================================================
  SUBROUTINE ZWTEQ (NSOIL  ,NSNOW  ,ZSOIL  ,DZSNSO ,SH2O   ,&
                    SMCMAX ,BEXP   ,PSISAT ,ZWT)
! ----------------------------------------------------------------------
! calculate equilibrium water table depth (Niu et al., 2005)
! ----------------------------------------------------------------------
  IMPLICIT NONE
! ----------------------------------------------------------------------
! input

  REAL    ,INTENT(IN) :: BEXP         !B parameter
  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: PSISAT       !saturated soil matric potential

  INTEGER,                         INTENT(IN) :: NSOIL  !no. of soil layers
  INTEGER,                         INTENT(IN) :: NSNOW  !maximum no. of snow layers
  REAL, DIMENSION(1:NSOIL),        INTENT(IN) :: ZSOIL  !depth of soil layer-bottom [m]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DZSNSO !snow/soil layer depth [m]
  REAL, DIMENSION(1:NSOIL),        INTENT(IN) :: SH2O   !soil liquid water content [m3/m3]

! output

  REAL,                           INTENT(OUT) :: ZWT    !water table depth [m]

! locals

  INTEGER :: K                      !do-loop index
  INTEGER, PARAMETER :: NFINE = 100 !no. of fine soil layers of 6m soil
  REAL    :: WD1                    !water deficit from coarse (4-L) soil moisture profile
  REAL    :: WD2                    !water deficit from fine (100-L) soil moisture profile
  REAL    :: DZFINE                 !layer thickness of the 100-L soil layers to 6.0 m
  REAL    :: TEMP                   !temporary variable
  REAL, DIMENSION(1:NFINE) :: ZFINE !layer-bottom depth of the 100-L soil layers to 6.0 m
! ----------------------------------------------------------------------

   WD1 = 0.
   DO K = 1,NSOIL
     WD1 = WD1 + (SMCMAX-SH2O(K)) * DZSNSO(K) ! [m]
   ENDDO

   DZFINE = 3.0 * (-ZSOIL(NSOIL)) / NFINE  
   do K =1,NFINE
      ZFINE(K) = FLOAT(K) * DZFINE
   ENDDO

   ZWT = -3.*ZSOIL(NSOIL) - 0.001   ! initial value [m]

   WD2 = 0.
   DO K = 1,NFINE
     TEMP  = 1. + (ZWT-ZFINE(K))/PSISAT
     WD2   = WD2 + SMCMAX*(1.-TEMP**(-1./BEXP))*DZFINE
     IF(ABS(WD2-WD1).LE.0.01) THEN
        ZWT = ZFINE(K)
        EXIT
     ENDIF
   ENDDO

  END SUBROUTINE ZWTEQ
! ----------------------------------------------------------------------
! ==================================================================================================
  SUBROUTINE INFIL (NSOIL  ,DT     ,ZSOIL  ,SH2O   ,SICE   , & !in
                    SICEMAX,QINSUR ,SMCMAX ,SMCWLT ,BEXP   , & !in
                    DWSAT  ,DKSAT  ,KDT    ,FRZX   ,         & !in
                    PDDUM  ,RUNSRF )                           !out
! --------------------------------------------------------------------------------
! compute inflitration rate at soil surface and surface runoff
! --------------------------------------------------------------------------------
    IMPLICIT NONE
! --------------------------------------------------------------------------------
! inputs

  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: SMCWLT       !wilting point soil moisture (volumetric)
  REAL    ,INTENT(IN) :: BEXP         !B parameter
  REAL    ,INTENT(IN), DIMENSION(       1:NSOIL) :: DKSAT        !saturated soil hydraulic conductivity
  REAL    ,INTENT(IN) :: DWSAT        !saturated soil hydraulic diffusivity
  REAL    ,INTENT(IN) :: KDT
  REAL    ,INTENT(IN) :: FRZX

  INTEGER,                  INTENT(IN) :: NSOIL  !no. of soil layers
  REAL,                     INTENT(IN) :: DT     !time step (sec)
  REAL, DIMENSION(1:NSOIL), INTENT(IN) :: ZSOIL  !depth of soil layer-bottom [m]
  REAL, DIMENSION(1:NSOIL), INTENT(IN) :: SH2O   !soil liquid water content [m3/m3]
  REAL, DIMENSION(1:NSOIL), INTENT(IN) :: SICE   !soil ice content [m3/m3]
  REAL,                     INTENT(IN) :: QINSUR !water input on soil surface [m/s]
  REAL,                     INTENT(IN) :: SICEMAX!maximum soil ice content (m3/m3)

! outputs
  REAL,                    INTENT(OUT) :: RUNSRF !surface runoff [m/s] 
  REAL,                    INTENT(OUT) :: PDDUM  !infiltration rate at surface

! locals
  INTEGER :: IALP1, J, JJ,  K
  REAL                     :: VAL
  REAL                     :: DDT
  REAL                     :: PX
  REAL                     :: DT1, DD, DICE
  REAL                     :: FCR
  REAL                     :: SUM
  REAL                     :: ACRT
  REAL                     :: WDF
  REAL                     :: WCND
  REAL                     :: SMCAV
  REAL                     :: INFMAX
  REAL, DIMENSION(1:NSOIL) :: DMAX
  INTEGER, PARAMETER       :: CVFRZ = 3
! --------------------------------------------------------------------------------

    IF (QINSUR >  0.0) THEN
       DT1 = DT /86400.
       SMCAV = SMCMAX - SMCWLT

! maximum infiltration rate

       DMAX(1)= -ZSOIL(1) * SMCAV
       DICE   = -ZSOIL(1) * SICE(1)
       DMAX(1)= DMAX(1)* (1.0-(SH2O(1) + SICE(1) - SMCWLT)/SMCAV)

       DD = DMAX(1)

       DO K = 2,NSOIL
          DICE    = DICE + (ZSOIL(K-1) - ZSOIL(K) ) * SICE(K)
          DMAX(K) = (ZSOIL(K-1) - ZSOIL(K)) * SMCAV
          DMAX(K) = DMAX(K) * (1.0-(SH2O(K) + SICE(K) - SMCWLT)/SMCAV)
          DD      = DD + DMAX(K)
       END DO

       VAL = (1. - EXP ( - KDT * DT1))
       DDT = DD * VAL
       PX  = MAX(0.,QINSUR * DT)
       INFMAX = (PX * (DDT / (PX + DDT)))/ DT

! impermeable fraction due to frozen soil

       FCR = 1.
       IF (DICE >  1.E-2) THEN
          ACRT = CVFRZ * FRZX / DICE
          SUM = 1.
          IALP1 = CVFRZ - 1
          DO J = 1,IALP1
             K = 1
             DO JJ = J +1,IALP1
                K = K * JJ
             END DO
             SUM = SUM + (ACRT ** (CVFRZ - J)) / FLOAT(K)
          END DO
          FCR = 1. - EXP (-ACRT) * SUM
       END IF

! correction of infiltration limitation

       INFMAX = INFMAX * FCR

       CALL WDFCND2 (WDF,WCND,SH2O(1),SICEMAX,&
                      BEXP,DWSAT,DKSAT(1),SMCMAX)
       INFMAX = MAX (INFMAX,WCND)
       INFMAX = MIN (INFMAX,PX)

       RUNSRF= MAX(0., QINSUR - INFMAX)
       PDDUM = QINSUR - RUNSRF

    END IF

  END SUBROUTINE INFIL
! ==================================================================================================
  SUBROUTINE SRT (NSOIL  ,ZSOIL  ,DT     ,PDDUM  ,ETRANI , & !in
                  QSEVA  ,SH2O   ,SMC    ,ZWT    ,FCR    , & !in
                  SICEMAX,FCRMAX ,SLOPE  ,BEXP   ,DWSAT  , & !in
                  DKSAT  ,SMCMAX ,                         & !in
                  RHSTT  ,AI     ,BI     ,CI     ,QDRAIN , & !out
                  WCND   ,LWFLUX )                           !out
! ----------------------------------------------------------------------
! calculate the right hand side of the time tendency term of the soil
! water diffusion equation.  also to compute ( prepare ) the matrix
! coefficients for the tri-diagonal matrix of the implicit time scheme.
! ----------------------------------------------------------------------
    IMPLICIT NONE
! ----------------------------------------------------------------------
!input

    REAL    ,INTENT(IN) :: SLOPE        !slope index (0 - 1)
    REAL    ,INTENT(IN) :: BEXP         !B parameter
    REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
    REAL    ,INTENT(IN), DIMENSION(       1:NSOIL) :: DKSAT        !saturated soil hydraulic conductivity
    REAL    ,INTENT(IN) :: DWSAT        !saturated soil hydraulic diffusivity

    INTEGER,                  INTENT(IN)  :: NSOIL
    REAL, DIMENSION(1:NSOIL), INTENT(IN)  :: ZSOIL
    REAL,                     INTENT(IN)  :: DT
    REAL,                     INTENT(IN)  :: PDDUM
    REAL,                     INTENT(IN)  :: QSEVA
    REAL, DIMENSION(1:NSOIL), INTENT(IN)  :: ETRANI
    REAL, DIMENSION(1:NSOIL), INTENT(IN)  :: SH2O
    REAL, DIMENSION(1:NSOIL), INTENT(IN)  :: SMC
    REAL,                     INTENT(IN)  :: ZWT    ! water table depth [m]
    REAL, DIMENSION(1:NSOIL), INTENT(IN)  :: FCR
    REAL, INTENT(IN)                      :: FCRMAX !maximum of FCR (-)
    REAL,                     INTENT(IN)  :: SICEMAX!maximum soil ice content (m3/m3)

! output

    REAL, DIMENSION(1:NSOIL), INTENT(OUT) :: RHSTT
    REAL, DIMENSION(1:NSOIL), INTENT(OUT) :: AI
    REAL, DIMENSION(1:NSOIL), INTENT(OUT) :: BI
    REAL, DIMENSION(1:NSOIL), INTENT(OUT) :: CI
    REAL, DIMENSION(1:NSOIL), INTENT(OUT) :: WCND    !hydraulic conductivity (m/s)
    REAL,                     INTENT(OUT) :: QDRAIN  !bottom drainage (m/s)
    REAL, DIMENSION(1:NSOIL), INTENT(OUT) :: LWFLUX  !liq. water flux at bottom of soil layer [m/s]

! local
    INTEGER                               :: K
    REAL, DIMENSION(1:NSOIL)              :: DDZ
    REAL, DIMENSION(1:NSOIL)              :: DENOM
    REAL, DIMENSION(1:NSOIL)              :: DSMDZ
    REAL, DIMENSION(1:NSOIL)              :: WFLUX
    REAL, DIMENSION(1:NSOIL)              :: WDF
    REAL, DIMENSION(1:NSOIL)              :: SMX
    REAL                                  :: TEMP1

! Niu and Yang (2006), J. of Hydrometeorology
! ----------------------------------------------------------------------

    IF(OPT_INF == 1) THEN
      DO K = 1, NSOIL
        CALL WDFCND1 (WDF(K),WCND(K),SMC(K),FCR(K),&
                      BEXP,DWSAT,DKSAT(K),SMCMAX)
        SMX(K) = SMC(K)
      END DO
    END IF

    IF(OPT_INF == 2) THEN
      DO K = 1, NSOIL
        CALL WDFCND2 (WDF(K),WCND(K),SH2O(K),SICEMAX, &
                      BEXP,DWSAT,DKSAT(K),SMCMAX)
        SMX(K) = SH2O(K)
      END DO
    END IF

    DO K = 1, NSOIL
       IF(K == 1) THEN
          DENOM(K) = - ZSOIL (K)
          TEMP1    = - ZSOIL (K+1)
          DDZ(K)   = 2.0 / TEMP1
          DSMDZ(K) = 2.0 * (SMX(K) - SMX(K+1)) / TEMP1
          WFLUX(K) = WDF(K) * DSMDZ(K) + WCND(K) - PDDUM + ETRANI(K) + QSEVA

          LWFLUX(K)=  WDF(K) * DSMDZ(K) + WCND(K)
       ELSE IF (K < NSOIL) THEN
          DENOM(k) = (ZSOIL(K-1) - ZSOIL(K))
          TEMP1    = (ZSOIL(K-1) - ZSOIL(K+1))
          DDZ(K)   = 2.0 / TEMP1
          DSMDZ(K) = 2.0 * (SMX(K) - SMX(K+1)) / TEMP1
          WFLUX(K) = WDF(K  ) * DSMDZ(K  ) + WCND(K  )         &
                   - WDF(K-1) * DSMDZ(K-1) - WCND(K-1) + ETRANI(K)
          LWFLUX(K)=  WDF(K) * DSMDZ(K) + WCND(K)
       ELSE
          DENOM(K) = (ZSOIL(K-1) - ZSOIL(K))
          IF(OPT_RUN == 1 .or. OPT_RUN == 2) THEN
             QDRAIN   = 0.
          END IF
          IF(OPT_RUN == 3) THEN
             QDRAIN   = SLOPE*WCND(K)
          END IF
          IF(OPT_RUN == 4) THEN
             QDRAIN   = (1.0-FCRMAX)*WCND(K)
          END IF
          WFLUX(K) = -(WDF(K-1)*DSMDZ(K-1))-WCND(K-1)+ETRANI(K) + QDRAIN
          LWFLUX(K) = QDRAIN
       END IF
    END DO

    DO K = 1, NSOIL
       IF(K == 1) THEN
          AI(K)    =   0.0
          BI(K)    =   WDF(K  ) * DDZ(K  ) / DENOM(K)
          CI(K)    = - BI (K)
       ELSE IF (K < NSOIL) THEN
          AI(K)    = - WDF(K-1) * DDZ(K-1) / DENOM(K)
          CI(K)    = - WDF(K  ) * DDZ(K  ) / DENOM(K)
          BI(K)    = - ( AI (K) + CI (K) )
       ELSE
          AI(K)    = - WDF(K-1) * DDZ(K-1) / DENOM(K)
          CI(K)    = 0.0
          BI(K)    = - ( AI (K) + CI (K) )
       END IF
          RHSTT(K) = WFLUX(K) / (-DENOM(K))
    END DO

! ----------------------------------------------------------------------
  END SUBROUTINE SRT
! ----------------------------------------------------------------------
! ==================================================================================================
  SUBROUTINE SSTEP (NSOIL  ,NSNOW  ,DT     ,ZSOIL  ,DZSNSO , & !in
                    SICE   ,SMCMAX ,ix,iy,                   & !in
                    SH2O   ,SMC    ,AI     ,BI     ,CI     , & !inout
                    RHSTT  ,                                 & !inout
                    WPLUS  )                                   !out

! ----------------------------------------------------------------------
! calculate/update soil moisture content values 
! ----------------------------------------------------------------------
    IMPLICIT NONE
! ----------------------------------------------------------------------
!input

    INTEGER ,INTENT(IN) :: ix,iy
    REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)

    INTEGER,                         INTENT(IN) :: NSOIL  !
    INTEGER,                         INTENT(IN) :: NSNOW  !
    REAL, INTENT(IN)                            :: DT
    REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: ZSOIL
    REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SICE
    REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DZSNSO ! snow/soil layer thickness [m]

!input and output
    REAL, DIMENSION(1:NSOIL), INTENT(INOUT) :: SH2O
    REAL, DIMENSION(1:NSOIL), INTENT(INOUT) :: SMC
    REAL, DIMENSION(1:NSOIL), INTENT(INOUT) :: AI
    REAL, DIMENSION(1:NSOIL), INTENT(INOUT) :: BI
    REAL, DIMENSION(1:NSOIL), INTENT(INOUT) :: CI
    REAL, DIMENSION(1:NSOIL), INTENT(INOUT) :: RHSTT

!output
    REAL, INTENT(OUT)                       :: WPLUS     !saturation excess water (m)

!local
    INTEGER                                 :: K
    REAL, DIMENSION(1:NSOIL)                :: RHSTTIN
    REAL, DIMENSION(1:NSOIL)                :: CIIN
    REAL                                    :: STOT
    REAL                                    :: EPORE
! ----------------------------------------------------------------------
    WPLUS = 0.0

    DO K = 1,NSOIL
       RHSTT (K) =   RHSTT(K) * DT
       AI (K)    =      AI(K) * DT
       BI (K)    = 1. + BI(K) * DT
       CI (K)    =      CI(K) * DT
    END DO

! copy values for input variables before calling rosr12

    DO K = 1,NSOIL
       RHSTTIN(k) = RHSTT(K)
       CIIN(k)    = CI(K)
    END DO

! call ROSR12 to solve the tri-diagonal matrix

    CALL ROSR12 (CI,AI,BI,CIIN,RHSTTIN,RHSTT,1,NSOIL,0)

    DO K = 1,NSOIL
        SH2O(K) = SH2O(K) + CI(K)
    ENDDO

!  excessive water above saturation in a layer is moved to
!  its unsaturated layer like in a bucket

    DO K = NSOIL,2,-1
      EPORE        = SMCMAX - SICE(K)
      WPLUS        = MAX((SH2O(K)-EPORE), 0.0) * DZSNSO(K)
      SH2O(K)      = MIN(EPORE,SH2O(K))
      SH2O(K-1)    = SH2O(K-1) + WPLUS/DZSNSO(K-1)
    END DO

    EPORE        = SMCMAX - SICE(1)
    WPLUS        = MAX((SH2O(1)-EPORE), 0.0) * DZSNSO(1) 
    SH2O(1)      = MIN(EPORE,SH2O(1))

  END SUBROUTINE SSTEP
! ==================================================================================================
  SUBROUTINE WDFCND1 (WDF,WCND,SMC,FCR, &
                      BEXP,DWSAT,DKSAT,SMCMAX)
! ----------------------------------------------------------------------
! calculate soil water diffusivity and soil hydraulic conductivity.
! ----------------------------------------------------------------------
    IMPLICIT NONE
! ----------------------------------------------------------------------
! input 

    REAL    ,INTENT(IN) :: BEXP         !B parameter
    REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
    REAL    ,INTENT(IN) :: DKSAT        !saturated soil hydraulic conductivity
    REAL    ,INTENT(IN) :: DWSAT        !saturated soil hydraulic diffusivity

    REAL,INTENT(IN)  :: SMC
    REAL,INTENT(IN)  :: FCR

! output
    REAL,INTENT(OUT) :: WCND
    REAL,INTENT(OUT) :: WDF

! local
    REAL :: EXPON
    REAL :: FACTR
    REAL :: VKWGT
! ----------------------------------------------------------------------

! soil water diffusivity

    FACTR = MAX(0.01, SMC/SMCMAX)
    EXPON = BEXP + 2.0
    WDF   = DWSAT * FACTR ** EXPON
    WDF   = WDF * (1.0 - FCR)

! hydraulic conductivity

    EXPON = 2.0*BEXP + 3.0
    WCND  = DKSAT * FACTR ** EXPON
    WCND  = WCND * (1.0 - FCR)

  END SUBROUTINE WDFCND1
! ==================================================================================================
  SUBROUTINE WDFCND2 (WDF,WCND,SMC,SICE,&
                      BEXP,DWSAT,DKSAT,SMCMAX)
! ----------------------------------------------------------------------
! calculate soil water diffusivity and soil hydraulic conductivity.
! ----------------------------------------------------------------------
    IMPLICIT NONE
! ----------------------------------------------------------------------
! input

    REAL    ,INTENT(IN) :: BEXP         !B parameter
    REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
    REAL    ,INTENT(IN) :: DKSAT        !saturated soil hydraulic conductivity
    REAL    ,INTENT(IN) :: DWSAT        !saturated soil hydraulic diffusivity

    REAL,INTENT(IN)  :: SMC
    REAL,INTENT(IN)  :: SICE

! output
    REAL,INTENT(OUT) :: WCND
    REAL,INTENT(OUT) :: WDF

! local
    REAL :: EXPON
    REAL :: FACTR
    REAL :: VKWGT
! ----------------------------------------------------------------------

! soil water diffusivity

    FACTR = MAX(0.01, SMC/SMCMAX)
    EXPON = BEXP + 2.0
    WDF   = DWSAT * FACTR ** EXPON

    IF (SICE > 0.0) THEN
    VKWGT = 1./ (1. + (500.* SICE)**3.)
    WDF   = VKWGT * WDF + (1.-VKWGT)*DWSAT*(0.2/SMCMAX)**EXPON
    END IF

! hydraulic conductivity

    EXPON = 2.0*BEXP + 3.0
    WCND  = DKSAT * FACTR ** EXPON

  END SUBROUTINE WDFCND2
! ==================================================================================================
! ----------------------------------------------------------------------
  SUBROUTINE GROUNDWATER(NSNOW  ,NSOIL  ,DT     ,SICE   ,ZSOIL  , & !in
                         STC    ,WCND   ,FCRMAX ,BEXP   ,PSISAT , & !in
                         SMCMAX ,DKSAT  ,SMCR   ,VGM    ,VGPSAT , &
                         ix     ,iy     ,                 & !in
                         SH2O   ,ZWT    ,WA     ,WT     ,         & !inout
                         QIN    ,QDIS   )                           !out
! ----------------------------------------------------------------------
  IMPLICIT NONE
! ----------------------------------------------------------------------
! input

  INTEGER,                         INTENT(IN) :: ix
  INTEGER,                         INTENT(IN) :: iy
  REAL    ,INTENT(IN) :: BEXP         !B parameter
  REAL    ,INTENT(IN) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(IN) :: PSISAT       !saturated soil matric potential [m]
  REAL    ,INTENT(IN), DIMENSION(       1:NSOIL) :: DKSAT        !saturated soil hydraulic conductivity
  REAL    ,INTENT(IN) :: VGM          !1.-1./n, van Genuchten n
  REAL    ,INTENT(IN) :: SMCR         !residual moisture [m3/m3]
  REAL    ,INTENT(IN) :: VGPSAT       !VG PSAT

  INTEGER,                         INTENT(IN) :: NSNOW !maximum no. of snow layers
  INTEGER,                         INTENT(IN) :: NSOIL !no. of soil layers
  REAL,                            INTENT(IN) :: DT    !timestep [sec]
  REAL,                            INTENT(IN) :: FCRMAX!maximum FCR (-)
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SICE  !soil ice content [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: ZSOIL !depth of soil layer-bottom [m]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: WCND  !hydraulic conductivity (m/s)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: STC   !snow/soil temperature (k)

! input and output
  REAL, DIMENSION(    1:NSOIL), INTENT(INOUT) :: SH2O  !liquid soil water [m3/m3]
  REAL,                         INTENT(INOUT) :: ZWT   !the depth to water table [m]
  REAL,                         INTENT(INOUT) :: WA    !water storage in aquifer [mm]
  REAL,                         INTENT(INOUT) :: WT    !water storage in aquifer 
                                                           !+ saturated soil [mm]
! output
  REAL,                           INTENT(OUT) :: QIN   !groundwater recharge [mm/s]
  REAL,                           INTENT(OUT) :: QDIS  !groundwater discharge [mm/s]

! local
  INTEGER                                     :: IZ    !do-loop index
  INTEGER                                     :: IWT   !layer index above water table layer
  REAL,  DIMENSION(    1:NSOIL)               :: DZMM  !layer thickness [mm]
  REAL,  DIMENSION(    1:NSOIL)               :: ZNODE !node depth [m]
  REAL,  DIMENSION(    1:NSOIL)               :: MLIQ  !liquid water mass [kg/m2 or mm]
  REAL,  DIMENSION(    1:NSOIL)               :: EPORE !effective porosity [-]
  REAL,  DIMENSION(    1:NSOIL)               :: HK    !hydraulic conductivity [mm/s]
  REAL,  DIMENSION(    1:NSOIL)               :: SMC   !total soil water  content [m3/m3]
  REAL*8                                      :: S_NODE!degree of saturation of IWT layer
  REAL                                        :: DZSUM !cumulative depth above water table [m]
  REAL                                        :: SMPFZ !matric potential (frozen effects) [mm]
  REAL                                        :: KA    !aquifer hydraulic conductivity [mm/s]
  REAL                                        :: WH_ZWT!water head at water table [mm]
  REAL                                        :: WH    !water head at layer above ZWT [mm]
  REAL                                        :: WS    !water used to fill air pore [mm]
  REAL                                        :: WTSUB !sum of HK*DZMM
  REAL                                        :: WATMIN!minimum soil vol soil moisture [m3/m3]
  REAL                                        :: XS    !excessive water above saturation [mm]
  REAL, PARAMETER                             :: ROUS = 0.2    !specific yield [-]
 !REAL, PARAMETER                             :: CMIC = 0.20   !microprore content (0.0-1.0)
  REAL                                        :: CMIC          != 0.40   !microprore content (0.0-1.0)
 !REAL, PARAMETER                             :: CMIC = 1.00   !microprore content (0.0-1.0)
                                                               !0.0-close to free drainage
  REAL :: FFF                        !runoff decay factor (m-1)
! -------------------------------------------------------------
      QDIS      = 0.0
      QIN       = 0.0

! Derive layer-bottom depth in [mm]

      DZMM(1) = -ZSOIL(1)*1.E3
      DO IZ = 2, NSOIL
         DZMM(IZ)  = 1.E3 * (ZSOIL(IZ - 1) - ZSOIL(IZ))
      ENDDO

! Derive node (middle) depth in [m]

      ZNODE(1) = -ZSOIL(1) / 2.
      DO IZ = 2, NSOIL
         ZNODE(IZ)  = -ZSOIL(IZ-1) + 0.5 * (ZSOIL(IZ-1) - ZSOIL(IZ))
      ENDDO

! Convert volumetric soil moisture "sh2o" to mass

      DO IZ = 1, NSOIL
         SMC(IZ)      = SH2O(IZ) + SICE(IZ)
         MLIQ(IZ)     = SH2O(IZ) * DZMM(IZ)
         EPORE(IZ)    = MAX(0.01,SMCMAX - SICE(IZ))
         HK(IZ)       = 1.E3*WCND(IZ)
      ENDDO

! The layer index of the first unsaturated layer,
! i.e., the layer right above the water table

      IWT = NSOIL
      DO IZ = 2,NSOIL
         IF(ZWT   .LE. -ZSOIL(IZ) ) THEN
            IWT = IZ-1
            GOTO 888
         END IF
      ENDDO
 888  CONTINUE

! Groundwater discharge [mm/s]

      IF(OPT_WATRET == 1) THEN
         FFF    = 0.5/VGM
         RSBMX  = HK(IWT)*1.E3*EXP(4.0)  ! mm/s
         CMIC   = 0.30
      END IF

      IF(OPT_WATRET == 2) THEN
         FFF   = BEXP/3.
         RSBMX  = HK(IWT)*1.E3*EXP(3.0)  ! mm/s
         CMIC   = 0.35
      END IF

     !QDIS = (1.0-FCRMAX)*RSBMX*EXP(-TIMEAN)*EXP(-FFF*(ZWT-2.0))
     !QDIS = (1.0-FCRMAX)*RSBMX*EXP(-TIMEAN)*EXP(-FFF*ZWT)
      QDIS = RSBMX*EXP(-TIMEAN)*EXP(-FFF*ZWT)

! Matric potential at the layer above the water table

      IF(OPT_WATRET == 1) THEN
          S_NODE = (MAX(SMCR+0.001,SMC(IWT))-SMCR)/(SMCMAX-SMCR)
          SMPFZ  =  -VGPSAT*1000.*(S_NODE**(-1.0/VGM)-1.0)**(1.-VGM)
          WH_ZWT = - (VGPSAT+ZWT)     * 1.E3             !(mm)
      END IF

      IF(OPT_WATRET == 2) THEN
          S_NODE = MIN(1.0,SMC(IWT)/SMCMAX )
          S_NODE = MAX(S_NODE,0.001)
          SMPFZ  =  -PSISAT*1000.*S_NODE**(-BEXP)   ! m --> mm
          WH_ZWT =  - (PSISAT+ZWT)     * 1.E3             !(mm)
      END IF

      SMPFZ  = MAX(-750000.0,CMIC*SMPFZ)

! Recharge rate qin to groundwater

!      KA  = 2.*(HK(IWT)*DKSAT(IWT)*1.E3)/(HK(IWT)+DKSAT(IWT)*1.E3)
       KA  = (HK(IWT)*4.+DKSAT(IWT)*1.E3/(MAX(0.001,ZWT-2.0)**2.))/(4.+1./(MAX(0.001,ZWT-2.0)**2.))
!      KA  = HK(IWT)*(1.0-exp(-FFF*(ZWT-ZNODE(NSOIL))))/ &
!                            ( FFF*(ZWT-ZNODE(NSOIL)))

      WH      =  SMPFZ  - ZNODE(IWT)* 1.E3             !(mm)
     !QIN     = - KA * (WH_ZWT-WH)  /((ZWT-ZNODE(IWT))*1.E3)
      QIN     = - KA * (WH_ZWT-WH)  /(((ZWT-VGPSAT)-ZNODE(IWT))*1.E3)
      QIN     = MAX(-10.0/DT,MIN(10./DT,QIN))

! Water storage in the aquifer + saturated soil

      WT  = WT + (QIN - QDIS) * DT     !(mm)

      IF(IWT.EQ.NSOIL) THEN
         WA          = WA + (QIN - QDIS) * DT     !(mm)
         WT          = WA
         ZWT         = (-ZSOIL(NSOIL) + 25.) - WA/1000./ROUS      !(m)
         MLIQ(NSOIL) = MLIQ(NSOIL) - QIN * DT        ! [mm]

         MLIQ(NSOIL) = MLIQ(NSOIL) + MAX(0.,(WA - 5000.))
         WA          = MIN(WA, 5000.)
      ELSE
         
         IF (IWT.EQ.NSOIL-1) THEN
            ZWT = -ZSOIL(NSOIL)                   &
                 - (WT-ROUS*1000*25.) / (EPORE(NSOIL))/1000.
         ELSE
            WS = 0.   ! water used to fill soil air pores
            DO IZ = IWT+2,NSOIL
               WS = WS + EPORE(IZ) * DZMM(IZ)
            ENDDO
            ZWT = -ZSOIL(IWT+1)                  &
                  - (WT-ROUS*1000.*25.-WS) /(EPORE(IWT+1))/1000.
         ENDIF

         WTSUB = 0.
         DO IZ = 1, NSOIL
           WTSUB = WTSUB + HK(IZ)*DZMM(IZ)
         END DO

         DO IZ = 1, NSOIL           ! Removing subsurface runoff
         MLIQ(IZ) = MLIQ(IZ) - QDIS*DT*HK(IZ)*DZMM(IZ)/WTSUB
         END DO
      END IF

      ZWT = MAX(1.5,ZWT)

    !IF(IX == 196.and. IY == 56) THEN  !grass dry
    !IF(IX == 262.and. IY == 92) THEN  !grass dry
    !  write(*,*) 'WH ,SMPFZ,ZNODE(IWT)*1.E3  =',WH,SMPFZ,-ZNODE(IWT)*1.E3,' mm'
    !  write(*,*) 'WH_ZWT  =',WH_ZWT,ZWT*1000.,' mm'
    !  write(*,*) 'QIN*DT  =',QIN*DT,' mm/h'
    !  write(*,*) 'FFF; VGM  =',FFF,VGM
    !END IF

!
! Limit MLIQ to be greater than or equal to watmin.
! Get water needed to bring MLIQ equal WATMIN from lower layer.
!
      WATMIN = 0.0001
      DO IZ = 1, NSOIL-1
          IF (MLIQ(IZ) .LT. 0.) THEN
             XS = WATMIN-MLIQ(IZ)
          ELSE
             XS = 0.
          END IF
          MLIQ(IZ  ) = MLIQ(IZ  ) + XS
          MLIQ(IZ+1) = MLIQ(IZ+1) - XS
      END DO

        IZ = NSOIL
        IF (MLIQ(IZ) .LT. WATMIN) THEN
           XS = WATMIN-MLIQ(IZ)
        ELSE
           XS = 0.
        END IF
        MLIQ(IZ) = MLIQ(IZ) + XS
        WA       = WA - XS
        WT       = WT - XS

      DO IZ = 1, NSOIL
        SH2O(IZ)     = MLIQ(IZ) / DZMM(IZ)
      END DO

  END SUBROUTINE GROUNDWATER
! ==================================================================================================
! ********************* end of water subroutines ******************************************
! ==================================================================================================
  SUBROUTINE CARBON (NSNOW  ,NSOIL  ,VEGTYP ,NROOT  ,DT     ,ZSOIL  , & !in
                     DZSNSO ,STC    ,SMC    ,TV     ,TG     ,PSN    , & !in
                     FOLN   ,SMCMAX ,BTRAN  ,APAR   ,FVEG   ,IGS    , & !in
                     TROOT  ,IST    ,IMONTH ,LAT    ,SH2OOLD,SICEOLD, & !in 
                     SH2O   ,SICE   ,KR     ,PSISAT ,DKSAT  ,BEXP   , & !in
                     ix     ,iy     ,PSI    ,ETRAN  ,SMCWLT ,SMCREF , & !in
                     LFMASS ,ROOTMS ,STMASS ,WOOD   ,SOC    ,WDOC   , & !inout
                     DDOC   ,MIC    ,WENZ   ,DENZ   ,SO2    ,MQ     , & !inout
                     SADR   ,RTMASS , & !inout
                     GPP    ,NPP    ,NEE    ,AUTORS ,HETERS ,TOTSC  , & !out
                     TOTLB  ,XLAI   ,XSAI   ,QCO2   ,VMAX   ,KM     , & !out
                     VMAXUP ,KMUP   ,EPSLON ,QROOT  ,FROOT  )  !out
! ------------------------------------------------------------------------------------------
  USE VEG_PARAMETERS
! ------------------------------------------------------------------------------------------
      IMPLICIT NONE
! ------------------------------------------------------------------------------------------
! inputs (carbon)

  INTEGER                        , INTENT(IN) :: ix,iy
  INTEGER                        , INTENT(IN) :: VEGTYP !vegetation type 
  INTEGER                        , INTENT(IN) :: IMONTH !month index
  INTEGER                        , INTENT(IN) :: NSNOW  !number of snow layers
  INTEGER                        , INTENT(IN) :: NSOIL  !number of soil layers
  INTEGER                        , INTENT(IN) :: NROOT  !no. of root layers
  INTEGER                        , INTENT(IN) :: IST    !surface type 1->soil; 2->lake
  REAL                           , INTENT(IN) :: LAT    !latitude (radians)
  REAL                           , INTENT(IN) :: DT     !time step (s)
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: ZSOIL  !depth of layer-bottom from soil surface
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DZSNSO !snow/soil layer thickness [m]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: STC    !snow/soil temperature [k]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SMC    !soil moisture (ice + liq.) [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SICE   !soil moisture (ice) at present time
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SICEOLD!soil moisture (ice) at previous time
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SH2OOLD!soil moisture (liq) at previous time
  REAL                           , INTENT(IN) :: TV     !vegetation temperature (k)
  REAL                           , INTENT(IN) :: TG     !ground temperature (k)
  REAL                           , INTENT(IN) :: FOLN   !foliage nitrogen (%)
  REAL                           , INTENT(IN) :: SMCMAX !soil porosity (m3/m3)
  REAL                           , INTENT(IN) :: BTRAN  !soil water transpiration factor (0 to 1)
  REAL    ,INTENT(IN) :: SMCWLT       !wilting point soil moisture (volumetric)
  REAL    ,INTENT(IN) :: SMCREF       !reference soil moisture (field capacity) (volumetric)
  REAL                           , INTENT(IN) :: PSN    !total leaf photosyn (umolco2/m2/s) [+]
  REAL                           , INTENT(IN) :: APAR   !PAR by canopy (w/m2)
  REAL                           , INTENT(IN) :: IGS    !growing season index (0=off, 1=on)
  REAL                           , INTENT(IN) :: FVEG   !vegetation greenness fraction
  REAL                           , INTENT(IN) :: TROOT  !root-zone averaged temperature (k)
  REAL                           , INTENT(IN) :: ETRAN  !transpiration rate (mm/s)
  REAL    ,INTENT(IN) :: BEXP         !B parameter
  REAL    ,INTENT(IN) :: PSISAT       !saturated soil matric potential
  REAL    ,INTENT(IN), DIMENSION(       1:NSOIL) :: DKSAT        !saturated soil hydraulic conductivity
! input & output (carbon)

  REAL   , INTENT(INOUT), DIMENSION(1:NSOIL)  :: PSI     !suction head [m]
  REAL                           , INTENT(INOUT) :: LFMASS !leaf mass [g/m2]
  REAL,DIMENSION(      1:NSOIL)  , INTENT(INOUT) :: ROOTMS !mass of fine roots [g/m2]
  REAL                           , INTENT(INOUT) :: RTMASS !mass of fine roots [g/m2]
  REAL                           , INTENT(INOUT) :: STMASS !stem mass [g/m2]
  REAL                           , INTENT(INOUT) :: WOOD   !mass of wood (incl. woody roots) [g/m2]
  REAL                           , INTENT(INOUT) :: SOC    !soil organic carbon (g C/m3)
  REAL                           , INTENT(INOUT) :: WDOC   !wet dissolved organic carbon (g C/m3)
  REAL                           , INTENT(INOUT) :: DDOC   !dry dissolved organic carbon (g C/m3)
  REAL                           , INTENT(INOUT) :: MIC    !soil microbial biomass (g C/m3)
  REAL                           , INTENT(INOUT) :: WENZ   !wet soil enzyme (g C/m3)
  REAL                           , INTENT(INOUT) :: DENZ   !dry soil enzyme (g C/m3)
  REAL                           , INTENT(INOUT) :: SO2    !soil o2 (umol/mol)
  REAL                           , INTENT(INOUT) :: MQ     !water stored in living tissues [mm]
  REAL                           , INTENT(INOUT) :: KR     !
  REAL, DIMENSION(       1:NSOIL), INTENT(INOUT) :: SH2O   !soil moisture (liq) at present time
  REAL, DIMENSION(       1:NSOIL), INTENT(OUT)   :: SADR   !root surface area density [m2/m3]

! outputs: (carbon)
  REAL, DIMENSION(      1:NSOIL), INTENT(OUT) :: QROOT  !water uptake [m/s]
  REAL, DIMENSION(      1:NSOIL), INTENT(OUT) :: FROOT  !root fraction
  REAL                          , INTENT(OUT) :: QCO2   !co2 efflux [g C/m2/s]
  REAL                          , INTENT(OUT) :: GPP    !net instantaneous assimilation [g/m2/s C]
  REAL                          , INTENT(OUT) :: NPP    !net primary productivity [g/m2/s C]
  REAL                          , INTENT(OUT) :: NEE    !net ecosystem exchange [g/m2/s C]
  REAL                          , INTENT(OUT) :: AUTORS !net ecosystem respiration [g/m2/s C]
  REAL                          , INTENT(OUT) :: HETERS !organic respiration [g/m2/s C]
  REAL                          , INTENT(OUT) :: TOTSC  !total soil carbon [g/m2 C]
  REAL                          , INTENT(OUT) :: TOTLB  !total living carbon ([g/m2 C]
  REAL                          , INTENT(OUT) :: XLAI   !leaf area index [-]
  REAL                          , INTENT(OUT) :: XSAI   !stem area index [-]
  real                          , INTENT(OUT) :: VMAX   !maximum SOC decomposition rate per
                                                        !unit microbial biomass [g C m-2 [g CMIC m-2]-1 s-1]
  real                          , INTENT(OUT) :: VMAXUP !maximum DOC uptake rate [g CDOC m-2 [g CMIC m-2]-1 s-1]
  real                          , INTENT(OUT) :: KM     !Michaelis-Menten constant [g C m-2] for SOC  decomposition
  real                          , INTENT(OUT) :: KMUP   !Michaelis-Menten constant [g C m-2] for DOC uptake
  real                          , INTENT(OUT) :: EPSLON !carbon use efficiency

! local variables

  INTEGER :: J         !do-loop index
  REAL    :: WROOT     !root zone soil water [-]
  REAL    :: LAPM      !leaf area per unit mass [m2/g]
! ------------------------------------------------------------------------------------------
   IF(VEGTYP == 16) THEN
      PSI   (1:NSOIL) = 0.
   END IF

   IF(VEGTYP == 16 .OR. VEGTYP == 19 .OR. VEGTYP == 24) THEN
      XLAI   = 0.
      XSAI   = 0.
      GPP    = 0.
      NPP    = 0.
      NEE    = 0.
      AUTORS = 0.
      HETERS = 0.
      TOTSC  = 0.
      TOTLB  = 0.
      LFMASS = 0.
      STMASS = 0.
      RTMASS = 0.
      WOOD   = 0.
      SOC    = 0.
      WDOC   = 0.
      DDOC   = 0.
      MIC    = 0.
      WENZ   = 0.
      DENZ   = 0.
      QCO2   = 0.

      MQ     = 0.
      KR     = 0.
      QROOT (1:NROOT) = 0.
      SADR  (1:NROOT) = 0.
      RETURN
   END IF

      LAPM       = SLA(VEGTYP) / 1000.   ! m2/kg -> m2/g
   
      IF(OPT_ROOT == 2) THEN
        KR  = BTRAN
      END IF

      WROOT  = 0.
      DO J=1,NROOT
        WROOT = WROOT + SMC(J)/SMCMAX *  DZSNSO(J) / (-ZSOIL(NROOT))
      ENDDO

      CALL CO2FLUX (NSNOW  ,NSOIL  ,VEGTYP ,IGS    ,DT     , & !in
                    DZSNSO ,STC    ,PSN    ,TROOT  ,TV     , & !in
                    WROOT  ,FOLN   ,LAPM   ,IMONTH , & !in
                    LAT    ,FVEG   ,SMC    ,SH2OOLD,SICEOLD, & !in
                    SMCMAX ,SH2O   ,SICE   ,KR     , & !in
                    ix     ,iy     ,PSISAT ,DKSAT  ,BEXP   ,ETRAN  , & !in
                    ZSOIL  ,PSI    ,NROOT  ,SMCWLT ,SMCREF , & !in
                    XLAI   ,XSAI   ,LFMASS ,ROOTMS ,STMASS , & !inout
                    WOOD   ,SOC    ,WDOC   ,MQ     ,FROOT  , & !inout
                    DDOC   ,MIC    ,WENZ   ,DENZ   ,SO2    , & !inout
                    SADR   ,RTMASS , & !inout
                    GPP    ,NPP    ,NEE    ,AUTORS ,HETERS , & !out
                    VMAX   ,KM     ,VMAXUP ,KMUP   ,EPSLON , & !out
                    TOTSC  ,TOTLB  ,QCO2   ,QROOT  )           !out

  END SUBROUTINE CARBON
! ==================================================================================================
  SUBROUTINE CO2FLUX (NSNOW  ,NSOIL  ,VEGTYP ,IGS    ,DT     , & !in
                      DZSNSO ,STC    ,PSN    ,TROOT  ,TV     , & !in
                      WROOT  ,FOLN   ,LAPM   ,IMONTH , & !in
                      LAT    ,FVEG   ,SMC    ,SH2OOLD,SICEOLD, & !in
                      SMCMAX ,SH2O   ,SICE   ,KR     , & !in
                      ix     ,iy     ,PSISAT ,DKSAT  ,BEXP   ,ETRAN  , & !in
                      ZSOIL  ,PSI    ,NROOT  ,SMCWLT ,SMCREF , & !in
                      XLAI   ,XSAI   ,LFMASS ,ROOTMS ,STMASS , & !inout
                      WOOD   ,SOC    ,WDOC   ,MQ     ,FROOT  , & !inout
                      DDOC   ,MIC    ,WENZ   ,DENZ   ,SO2    , & !inout
                      SADR   ,RTMASS , & !inout
                      GPP    ,NPP    ,NEE    ,AUTORS ,HETERS , & !out
                      VMAX   ,KM     ,VMAXUP ,KMUP   ,EPSLON , & !out
                      TOTSC  ,TOTLB  ,QCO2   ,QROOT  )   !out
! -----------------------------------------------------------------------------------------
! The original code is from RE Dickinson et al.(1998), modifed by Guo-Yue Niu, 2004
! -----------------------------------------------------------------------------------------
! USE module_rootfraction
  USE VEG_PARAMETERS
! -----------------------------------------------------------------------------------------
  IMPLICIT NONE
! -----------------------------------------------------------------------------------------

! input

  INTEGER                        , INTENT(IN) :: ix,iy
  INTEGER                        , INTENT(IN) :: NROOT
  INTEGER                        , INTENT(IN) :: IMONTH !month index
  INTEGER                        , INTENT(IN) :: VEGTYP !vegetation physiology type
  INTEGER                        , INTENT(IN) :: NSNOW  !number of snow layers
  INTEGER                        , INTENT(IN) :: NSOIL  !number of soil layers
  REAL                           , INTENT(IN) :: DT     !time step (s)
  REAL                           , INTENT(IN) :: LAT    !latitude (radians)
  REAL                           , INTENT(IN) :: IGS    !growing season index (0=off, 1=on)
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: DZSNSO !snow/soil layer thickness [m]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN) :: STC    !snow/soil temperature [k]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SMC    !soil moisture (ice + liq.) [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SICE   !soil ice at present time [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SH2OOLD!soil liq at previous time [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: SICEOLD!soil ice at previous time [m3/m3]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: PSI    !suction head [m]
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: ZSOIL  !layer-bottom depth from soil surface [m]
  REAL                           , INTENT(IN) :: SMCMAX !soil porosity (m3/m3)
  REAL                           , INTENT(IN) :: PSN    !total leaf photosynthesis (umolco2/m2/s)
  REAL                           , INTENT(IN) :: TROOT  !root-zone averaged temperature (k)
  REAL                           , INTENT(IN) :: TV     !leaf temperature (k)
  REAL                           , INTENT(IN) :: WROOT  !root zone soil water
  REAL                           , INTENT(IN) :: FOLN   !foliage nitrogen (%)
  REAL                           , INTENT(IN) :: LAPM   !leaf area per unit mass [m2/g]
  REAL                           , INTENT(IN) :: FVEG   !vegetation greenness fraction
  REAL                           , INTENT(IN) :: BEXP   !B parameter
  REAL                           , INTENT(IN) :: PSISAT !saturated soil matric potential
  REAL, DIMENSION(       1:NSOIL), INTENT(IN) :: DKSAT  !saturated soil hydraulic conductivity
  REAL                           , INTENT(IN) :: ETRAN  !transpiration rate at each step [m/s]
  REAL    ,INTENT(IN) :: SMCWLT       !wilting point soil moisture (volumetric)
  REAL    ,INTENT(IN) :: SMCREF       !reference soil moisture (field capacity) (volumetric)

! input and output

  REAL                          , INTENT(INOUT) :: XLAI   !leaf  area index from leaf carbon [-]
  REAL                          , INTENT(INOUT) :: XSAI   !stem area index from leaf carbon [-]
  REAL                          , INTENT(INOUT) :: LFMASS !leaf mass [g/m2]
  REAL,DIMENSION(      1:NSOIL) , INTENT(INOUT) :: ROOTMS !mass of fine roots [g/m2]
  REAL                          , INTENT(INOUT) :: RTMASS !mass of fine roots [g/m2]
  REAL                          , INTENT(INOUT) :: STMASS !stem mass [g/m2]
  REAL                          , INTENT(INOUT) :: WOOD   !mass of wood (incl. woody roots) [g/m2]
  REAL                          , INTENT(INOUT) :: SOC    !soil organic carbon (g C/m2)
  REAL                          , INTENT(INOUT) :: WDOC   !dissolved organic carbon (g C/m2)
  REAL                          , INTENT(INOUT) :: DDOC   !dissolved organic carbon (g C/m2)
  REAL                          , INTENT(INOUT) :: MIC    !microbial biomass (g C/m2)
  REAL                          , INTENT(INOUT) :: WENZ   !soil enzyme (g C/m2)
  REAL                          , INTENT(INOUT) :: DENZ   !soil enzyme (g C/m2) in dry are
  REAL                          , INTENT(INOUT) :: SO2    !o2 (umol/mol)
  REAL, DIMENSION(      1:NSOIL), INTENT(INOUT) :: SH2O   !soil liq at present time [m3/m3]
  REAL                          , INTENT(INOUT) :: KR     !
  REAL                          , INTENT(INOUT) :: MQ     !water stored in living tissues [mm]
  REAL, DIMENSION(      1:NSOIL), INTENT(OUT)   :: SADR   !root surface area density [m2/m3]

! output

  REAL                          , INTENT(OUT) :: GPP    !net instantaneous assimilation [g/m2/s]
  REAL                          , INTENT(OUT) :: NPP    !net primary productivity [g/m2/s]
  REAL                          , INTENT(OUT) :: NEE    !net ecosystem exchange (autors+heters-gpp) [g/m2/s C)
  REAL                          , INTENT(OUT) :: AUTORS !net ecosystem resp. (maintance and growth)
  REAL                          , INTENT(OUT) :: HETERS !organic respiration
  REAL                          , INTENT(OUT) :: TOTSC  !total soil carbon (g/m2)
  REAL                          , INTENT(OUT) :: TOTLB  !total living carbon (g/m2)
  REAL                          , INTENT(OUT) :: QCO2   !co2 efflux ( g C m-2 s-1)
  REAL, DIMENSION(      1:NSOIL), INTENT(OUT) :: QROOT  !water uptake [m/s]
  REAL, DIMENSION(      1:NSOIL), INTENT(OUT) :: FROOT  !root fraction

  real                          , INTENT(OUT) :: VMAX   !maximum SOC decomposition rate per
                                     !unit microbial biomass [g C m-2 [g CMIC m-2]-1 s-1]
  real                          , INTENT(OUT) :: VMAXUP !maximum DOC uptake rate [g CDOC m-2 [g CMIC m-2]-1 s-1]
  real                          , INTENT(OUT) :: KM     !Michaelis-Menten constant [g C m-2] for SOC  decomposition
  real                          , INTENT(OUT) :: KMUP   !Michaelis-Menten constant [g C m-2] for DOC uptake
  real                          , INTENT(OUT) :: EPSLON !carbon use efficiency

! local

  INTEGER                :: IZ

  REAL                   :: LFMSMN   !minimum leaf mass [g/m2]
  REAL                   :: RSWOOD   !wood respiration [g/m2/s]
  REAL                   :: RSLEAF   !leaf maintenance respiration per timestep [g/m2/s]
  REAL                   :: RSROOT   !fine root respiration per time step [g/m2/s]
  REAL                   :: NPPL     !leaf net primary productivity [g/m2/s]
  REAL                   :: NPPR     !root net primary productivity [g/m2/s]
  REAL                   :: NPPW     !wood net primary productivity [g/m2/s]
  REAL                   :: NPPS     !wood net primary productivity [g/m2/s]
  REAL                   :: DIELF    !death of leaf mass per time step [g/m2]

  REAL                   :: CARBFX   !carbon assimilated per model step [g/m2]
  REAL                   :: GRLEAF   !growth respiration rate for leaf [g/m2/s]
  REAL                   :: GRROOT   !growth respiration rate for root [g/m2/s]
  REAL                   :: GRWOOD   !growth respiration rate for wood [g/m2/s]
  REAL                   :: GRSTEM   !growth respiration rate for stem [g/m2/s]
  REAL                   :: LEAFPT   !fraction of carbon allocated to leaves [-]
  REAL                   :: LFTOVR   !stem turnover per time step [g/m2/s]
  REAL                   :: STTOVR   !stem turnover per time step [g/m2/s]
  REAL                   :: WDTOVR   !wood turnover per time step [g/m2/s]
  REAL                   :: RSSOIL   !soil respiration per time step [g/m2/s]
  REAL                   :: RTTOVR   !root carbon loss per time step by turnover [g/m2/s]
  REAL                   :: STABLC   !decay rate of fast carbon to slow carbon [g/m2/s]
  REAL                   :: WOODF    !calculated wood to root ratio [-]
  REAL                   :: NONLEF   !fraction of carbon to root and wood [-]
  REAL                   :: ROOTPT   !fraction of carbon flux to roots [-]
  REAL                   :: WOODPT   !fraction of carbon flux to wood [-]
  REAL                   :: STEMPT   !fraction of carbon flux to stem [-]
  REAL                   :: RESP     !leaf respiration [umol/m2/s]
  REAL                   :: RSSTEM   !stem respiration [g/m2/s]

  REAL                   :: FSW      !soil water factor for microbial respiration
  REAL                   :: FST      !soil temperature factor for microbial respiration
  REAL                   :: FNF      !foliage nitrogen adjustemt to respiration (<= 1)
  REAL                   :: TF       !temperature factor
  REAL                   :: RF       !respiration reduction factor (<= 1)
  REAL                   :: STMSMN
  REAL                   :: SAPM     !stem area per unit mass (m2/g)
  REAL                   :: DIEST
  REAL                   :: RTEXD    !total root carbon exudation rate (g/m2/s)
  REAL                   :: LITC     !carbon content in  litter (g/m2/s)
! -------------------------- constants -------------------------------
  REAL                   :: RSWOODC  !wood respiration coeficient [1/s]
  REAL                   :: STOVRC   !stem turnover coefficient [1/s]
  REAL                   :: RTOVRC   !root turnover coefficient [1/s]
  REAL                   :: WSTRC    !water stress coeficient [-]
  REAL                   :: LAIMIN   !minimum leaf area index [m2/m2]
  REAL                   :: XSAMIN   !minimum leaf area index [m2/m2]
  REAL                   :: SC
  REAL                   :: SD
  REAL                   :: SOILC
  REAL                   :: VEGFRAC
  REAL                   :: CERR     !imbalance of carbon [gC/m2]
  REAL                   :: BEG_C    !imbalance of carbon [gC/m2]
  REAL                   :: DRYC     !dry carbon mass [gC/m2]

  REAL :: LFOLD,STOLD,WDOLD,RTOLD

! Respiration as a function of temperature

  real :: r,x
          r(x) = exp(0.08*(x-298.16))
! ---------------------------------------------------------------------------------
! constants              
    RTOVRC  = 2.0E-8        !original was 2.0e-8
    RSWOODC = 3.0E-10       !
    WSTRC   = 1.0           !0.5
    LAIMIN  = 0.05
    XSAMIN  = 0.01

    SAPM    = 10.*0.001      ! m2/kg -->m2/g
    LFMSMN  = laimin/lapm
    STMSMN  = xsamin/sapm
! ---------------------------------------------------------------------------------

     IF(OPT_ROOT == 1) THEN
        RTMASS  = 0.
        DO IZ = 1, NROOT
          RTMASS = RTMASS + ROOTMS(IZ)    !g/m2
        END DO
     END IF

     TOTSC  = SOC + WDOC + DDOC + MIC + WENZ + DENZ   !g/m2 C
     BEG_C  = LFMASS + RTMASS + WOOD + STMASS + TOTSC                   !g/m2 C

     LFOLD = LFMASS
     STOLD = STMASS
     RTOLD = RTMASS
     WDOLD = WOOD

! autotrophic respiration            

     IF(IGS .EQ. 0.) THEN
       RF = 0.5
     ELSE
       RF = 1.0
     ENDIF

     FNF     = MIN( FOLN/MAX(1.E-06,FOLNMX(VEGTYP)), 1.0 )
     TF      = ARM(VEGTYP)**( (TV-298.16)/10. )
     RESP    = RMF25(VEGTYP) * TF * FNF * XLAI * RF * KR    !(1.-WSTRES) ! umol/m2/s

     RSLEAF  = MIN((LFMASS-LFMSMN)/DT,RESP*12.e-6)                   ! g/m2/s
     RSSTEM  = RMS25(VEGTYP)*((STMASS-STMSMN)*1E-3)*TF *RF* 12.e-6   ! g/m2/s
     RSWOOD  = RSWOODC * R(TV) * WOOD*WDPOOL(VEGTYP)

! carbon assimilation    
! 1 mole -> 12 g carbon or 44 g CO2; 1 umol -> 12.e-6 g carbon;

     CARBFX  = PSN * 12.E-6              ! umol co2 /m2/ s -> g/m2/s carbon

! plants first meet root water uptake

     ROOTPT = MAX(0.01,0.30*(1.-KR))

! fraction of carbon into leaf versus nonleaf


     IF(WOOD .GT. 0 ) THEN
       LEAFPT = (1.0-ROOTPT)*10000. *exp(-2.0*XLAI)/(1.+10000.*exp(-2.0*XLAI))
       NONLEF = (1.0-ROOTPT) - LEAFPT
       STEMPT = NONLEF*0.05
       NONLEF = NONLEF-STEMPT
       WOODPT = NONLEF*WDPOOL(VEGTYP)

     ELSE
       LEAFPT = 1.0-ROOTPT 
       STEMPT = 1.-1500.*exp(-2.2*XLAI)/(1.+1500.*exp(-2.2*XLAI))
       LEAFPT = LEAFPT - STEMPT
       WOODPT = 0.
     END IF

!  fraction of carbon into wood versus root

     !write(*,*) 'LEAFPT,ROOTPT,STEMPT,WOODPT=',LEAFPT,ROOTPT,STEMPT,WOODPT
     !write(*,*) 'LFMASS,RTMASS,WOOD,XLAI =',LFMASS,RTMASS,WOOD,XLAI

     IF(ABS(LEAFPT+STEMPT+ROOTPT+WOODPT-1.0) >= 0.001) THEN
      write(*,*) 'XLAI,(LEAFPT+STEMPT+ROOTPT+WOODPT)=',XLAI,LEAFPT,STEMPT,ROOTPT,WOODPT
      STOP
     END IF


! leaf and root turnover per time step

     LFTOVR = LTOVRC(VEGTYP)*1.E-6*(LFMASS-LFMSMN)
     STTOVR = LTOVRC(VEGTYP)*1.E-6*(STMASS-STMSMN)
     WDTOVR = 9.5E-10*WOOD

! seasonal leaf die rate dependent on temp and water stress
! water stress is set to 1 at permanent wilting point

    !SC  = EXP(-0.3*MAX(0.,TV-TDLEF(VEGTYP))) * (LFMASS/120.)
    !SC  = EXP(-0.1*MAX(0.,TV-TDLEF(VEGTYP))) * (LFMASS/120.)
     SC  = EXP(-SCEXP(VEGTYP)*MAX(0.,TV-TDLEF(VEGTYP))) * (LFMASS/120.)
    !SD  = EXP((WSTRES-1.)*WSTRC)
     SD  = EXP(-KR*WSTRC)
     DIELF = MAX(0.,(LFMASS-LFMSMN)*1.E-6*(DILEFW(VEGTYP)*SD+DILEFC(VEGTYP)*SC))
     DIEST = MAX(0.,(STMASS-STMSMN)*1.E-6*(DILEFW(VEGTYP)*SD+DILEFC(VEGTYP)*SC))

! calculate growth respiration for leaf, rtmass and wood

     GRLEAF = MAX(0.0,FRAGR(VEGTYP)*(LEAFPT*CARBFX - RSLEAF))
     GRSTEM = MAX(0.0,FRAGR(VEGTYP)*(STEMPT*CARBFX - RSSTEM))
     GRWOOD = MAX(0.0,FRAGR(VEGTYP)*(WOODPT*CARBFX - RSWOOD))

! net primary productivities

     NPPL  =     LEAFPT*CARBFX - RSLEAF - GRLEAF
     NPPS  =     STEMPT*CARBFX - RSSTEM - GRSTEM
     NPPW  =     WOODPT*CARBFX - RSWOOD - GRWOOD

! masses of plant components

     LFMASS = LFMASS + (NPPL-(DIELF+LFTOVR))*DT
     STMASS = STMASS + (NPPS-(DIEST+STTOVR))*DT   ! g/m2        
     WOOD   = (WOOD   + (NPPW-WDTOVR)*DT)*WDPOOL(VEGTYP)

! root mass and fraction

     IF(OPT_ROOT == 2) THEN

        RTTOVR = RTOVRC*RTMASS
        RSROOT  = RMR25(VEGTYP)*(RTMASS*1E-3)*TF *RF* 12.e-6 
        GRROOT = MAX(0.0,FRAGR(VEGTYP)*(ROOTPT*CARBFX - RSROOT))
            
        NPPR   = ROOTPT*CARBFX - RSROOT - GRROOT
        RTEXD  = 0.3 * ROOTPT*CARBFX                            !g/m2/s

        RTMASS = RTMASS + (NPPR-RTTOVR-RTEXD)*DT

        IF(RTMASS.LT.0.0) THEN
           RTTOVR = NPPR
           RTMASS = 0.0
        ENDIF

        IF(IX == 196.and. IY == 56) THEN  !grass dry
           write(*,*) 'RTMASS,KR = ',RTMASS,KR
           write(*,*) 'IZ,FROOT(IZ),SH2O(IZ)'
        do IZ = 1 ,nroot
           write(*,'(I10,2F10.6,F10.2,10F12.6)') IZ,FROOT(IZ),SH2O(IZ)
        end do
        END IF
     END IF

     IF(OPT_ROOT == 1) THEN

        DRYC = (LFMASS + RTMASS + STMASS + WOOD*0.02)*1.E-3  !g/m2 -> kg/m2; 2% sapwood can store water

        CALL ROOT(IX     ,IY     ,NSOIL  ,NSNOW  ,NROOT  ,STMASS , &
                  DT     ,ZSOIL  ,ETRAN  ,PSI    ,SH2O   ,STC    , &
                  RF     ,CARBFX ,DRYC   ,SMCMAX ,SICE   ,LFMASS , &
                  DKSAT  ,PSISAT ,BEXP   ,ROOTPT ,VEGTYP ,SMCWLT ,SMCREF , &
                  MQ     ,ROOTMS ,SADR   ,KR     , &
                  FROOT  ,QROOT  ,RTMASS ,RTEXD  ,RTTOVR , &
                  RSROOT ,GRROOT ,NPPR   )
     END IF

! soil carbon budgets

     LITC  = (RTTOVR+LFTOVR+STTOVR+WDTOVR+DIELF+DIEST)*DT   !g/m2

     CALL CO2PRODUCT(NSOIL  ,     DT,    STC,    SMC,   SH2O, &
                        SICE,SH2OOLD,SICEOLD, SMCMAX,    SO2, &
                         SOC,   WDOC,   DDOC, MIC   ,   WENZ, &
                        DENZ,   LITC,  RTEXD, RSSOIL,  NSNOW, &
                        VMAX,     KM, VMAXUP,   KMUP, EPSLON,ix,iy)

!  total carbon flux

     QCO2   = RSSOIL+RSROOT+GRROOT

! for outputs

     GPP    = CARBFX                                             !g/m2/s C
     NPP    = NPPL + NPPW + NPPR + NPPS                          !g/m2/s C
     AUTORS = RSROOT + RSWOOD + RSLEAF + RSSTEM +  &             !g/m2/s C
              GRROOT + GRWOOD + GRLEAF + GRSTEM                  !g/m2/s C
     HETERS = RSSOIL                                             !g/m2/s C
     TOTLB  = LFMASS + RTMASS + WOOD + STMASS                    !g/m2   C
     NEE    = (AUTORS + HETERS - GPP)

! leaf area index and stem area index

     XLAI    = MAX(LFMASS*LAPM,LAIMIN)
     XSAI    = MAX(STMASS*SAPM,XSAMIN)

     TOTSC   = SOC + WDOC + DDOC + MIC + WENZ + DENZ   !g/m2 C
     IF(OPT_ROOT == 2) THEN
        TOTLB   = LFMASS + RTMASS + WOOD + STMASS      !g/m2 C
     END IF

     CERR    = ((TOTSC+TOTLB)-BEG_C) + NEE*DT

     IF(ABS(CERR) .ge. 0.1) THEN
       WRITE(*,*) 'Carbon imbalance, CERR ======================================== ', CERR
       write(*,*) 'ix,iy,VEGTYP,TOTSC,TOTLB,TOTSC+TOTLB,BEG_C,NEE*DT'
       write(*,*) ix,iy,VEGTYP,TOTSC,TOTLB,TOTSC+TOTLB,BEG_C,NEE*DT

      !STOP
     END IF

  END SUBROUTINE CO2FLUX
! ==================================================================================================
! ==================================================================================================
  SUBROUTINE ROOT(IX     ,IY     ,NSOIL  ,NSNOW  ,NROOT  ,STMASS , &
                  DT     ,ZSOIL  ,ETRAN  ,PSI    ,SH2O   ,STC    , &
                  RF     ,CARBFX ,DRYC   ,SMCMAX ,SICE   ,LFMASS , &
                  DKSAT  ,PSISAT ,BEXP   ,ROOTPT ,VEGTYP ,SMCWLT ,SMCREF , &
                  MQ     ,ROOTMS ,SADR   ,KR     , &
                  FROOT  ,QROOT  ,RTMASS ,RTEXD  ,RTTOVR , &
                  RSROOT ,GRROOT ,NPPR   )

   USE VEG_PARAMETERS
   IMPLICIT NONE

! inputs

  INTEGER, INTENT(IN)                             :: IX 
  INTEGER, INTENT(IN)                             :: IY 
  INTEGER, INTENT(IN)                             :: NSNOW  !number of snow layers
  INTEGER, INTENT(IN)                             :: NSOIL  !number of soil layers
  INTEGER, INTENT(IN)                             :: NROOT  !number of root layer
  INTEGER, INTENT(IN)                             :: VEGTYP !vegetation physiology type
  REAL   , INTENT(IN)                             :: DT     !time step [s]
  REAL   , INTENT(IN)                             :: SMCMAX !porosity [m]
  REAL   , INTENT(IN), DIMENSION(       1:NSOIL)                             :: DKSAT  !ksat [m/s]
  REAL   , INTENT(IN)                             :: BEXP   !B parameter
  REAL   , INTENT(IN)                             :: PSISAT !saturated soil matric potential [m]
  REAL   , INTENT(IN)                             :: DRYC   !dry C mass in living plant tissues [kg/m2]
  REAL   , INTENT(IN)                             :: LFMASS !leaf mass [g/m2]
  REAL   , INTENT(IN)                             :: STMASS !stem mass [g/m2]
  REAL   , INTENT(IN)                             :: ETRAN  !transpiration rate at each step [m/s]
  REAL   , INTENT(IN)                             :: ROOTPT
  REAL   , INTENT(IN)                             :: CARBFX
  REAL   , INTENT(IN)                             :: RF     !respiration reduction factor (<= 1)
  REAL   , INTENT(IN), DIMENSION(       1:NSOIL)  :: ZSOIL  !layer-bottom depth from soil surface [m]
  REAL   , INTENT(IN), DIMENSION(       1:NSOIL)  :: PSI    !suction head [m]
  REAL   , INTENT(IN), DIMENSION(       1:NSOIL)  :: SICE   !soil ice content [m3/m3]
  REAL   , INTENT(IN), DIMENSION(-NSNOW+1:NSOIL)  :: STC    !soil temperature [k]
  REAL   , INTENT(IN)                             :: SMCWLT !wilting point soil moisture (volumetric)
  REAL   , INTENT(IN)                             :: SMCREF !reference soil moisture (field capacity) (volumetric)

  REAL  , INTENT(INOUT)                           :: KR     !controls when to grow [-]
  REAL  , INTENT(INOUT)                           :: MQ     !water in plant tissues [kg]
  REAL  , INTENT(INOUT), DIMENSION(1:NSOIL)       :: SH2O   !soil water content [m3/m3]
  REAL  , INTENT(INOUT), DIMENSION(1:NSOIL)       :: ROOTMS       !mass of live fine roots [g C/m2]

  REAL  , INTENT(OUT), DIMENSION(1:NSOIL)         :: SADR   !root surface area density [m2/m3]

! outputs

  REAL   , INTENT(OUT)  , DIMENSION(1:NSOIL)      :: FROOT  !root fraction
  REAL   , INTENT(OUT)  , DIMENSION(1:NSOIL)      :: QROOT  !water uptake [m/s]
  REAL   , INTENT(OUT)                            :: RTMASS !mass of fine roots [g/m2]
  REAL   , INTENT(OUT)                            :: RTEXD  !total root carbon exudation rate (g/m2/s)
  REAL   , INTENT(OUT)                            :: RTTOVR !root carbon loss per time step by turnover [g/m2/s]
  REAL   , INTENT(OUT)                            :: RSROOT !fine root respiration per time step [g/m2/s]
  REAL   , INTENT(OUT)                            :: GRROOT !growth respiration rate for root [g/m2/s]
  REAL   , INTENT(OUT)                            :: NPPR   !root net primary productivity [g/m2/s]

! locals

  INTEGER                  :: IZ           !do-loop index in z-direction 
  INTEGER                  :: ID           !do-loop index in diurnal time steps
  REAL                     :: MDRY         !dry mass in lviing tissue [kg/m2]
  REAL                     :: PB           !tissue balance pressure [bar]
  REAL                     :: SUMQR        !total water uptake per unit ground area [m/s]
  REAL                     :: MQMIN        !daily minimum of water in plant tissues [kg/m2] 
  REAL, DIMENSION(1:NSOIL) :: RTPT         !fine root respiration per time step [g/m2/s]
  REAL, DIMENSION(1:NSOIL) :: ROOTEX       !total root carbon exudation rate (g/m2/s)
  REAL, DIMENSION(1:NSOIL) :: ROOTTO       !root carbon loss per time step by turnover [g/m2/s]
  REAL, DIMENSION(1:NSOIL) :: ROOTRS       !fine root respiration per time step [g/m2/s]
  REAL, DIMENSION(1:NSOIL) :: ROOTGR       !growth respiration rate for root [g/m2/s]
  REAL, DIMENSION(1:NSOIL) :: ROOTNPP      !root net primary productivity [g/m2/s]
  REAL, DIMENSION(1:NSOIL) :: WCND         !hydraulic conductivity [m/s]
  REAL, DIMENSION(1:NSOIL) :: HR           !Root suction head [m]
  REAL, DIMENSION(1:NSOIL) :: OMS          !resistivity to water flow to root surface [s]
  REAL, DIMENSION(1:NSOIL) :: JR           !water uptake per unit root surface area [m/s]
  REAL, DIMENSION(1:NSOIL) :: DZ           !layer thickness [m]
  REAL, DIMENSION(1:NSOIL) :: ZNODE        !depth of the middle of each layer (node depth) [m]
  REAL, DIMENSION(1:NSOIL) :: WEIGHT       !weight of carbon partitioned into soil layers [-]
  REAL, DIMENSION(1:NSOIL) :: GX           !soil moisture factor for carbon partition [-]
  REAL                     :: SUMSADR      !total root surface area density [m2/m3]
  REAL                     :: TRANS_ANA    !transmission of active to non-ative [gC m2/s]

  REAL, PARAMETER          :: C1     = 750.      !empirical constant [bar]
  REAL, PARAMETER          :: C2     = 1.        !empirical constant [bar]

  REAL, PARAMETER          :: PI     = 4*atan(1.0) 
  REAL, PARAMETER          :: CPBM   = 10.2      !elevation head per 1 atm pressure [10.2 m/bar]
  REAL, PARAMETER          :: DENH2O = 1000.     !density of water [kg/m3]
  REAL, PARAMETER          :: PSIWLT = -306.     !suction head at wilting point [m] [~ -30 bar]
  REAL, PARAMETER          :: RM2CM  = 2.5       !2.375 = 1.+(22.*1.+11.*16.)/(12.*12.)  !sugar: C12 H22 O11
                                                 !ratio of total mass to carbon mass
  REAL, PARAMETER          :: RTMIN   =  0.1      !min root mass [g/m3]
  REAL ::  WTDZ(NSOIL)

  REAL ::  TF           ! root respiration Q10 apporach (Q10 =2)
  REAL ::  ST(1:NSOIL)  ! temperature stress
  REAL ::  SD(1:NSOIL)  ! drought stress
  REAL ::  RTM_ERR,RTMOLD,TEST,CARBIN,RTPTT,BAR
  REAL ::  SUMJR,SUMWCND,MQMAX,SUMRF
  REAL ::  RWILT                                 !wilting point (in relative water storage; (1-RWLT) -> maximum raltive water loss)
  REAL ::  PBD                                   !leaf pressure when leaves with no water

  REAL :: RTOMAX (MVT)     != 2.52      !max root turnover rate [g/m2/year]

  IF(OPT_WATRET == 1) THEN
     DATA RTOMAX / 8.00  , 1.50  , 2.00  , 4.00  , 4.20  ,    2.60  , 0.50  , 1.00  , 5.00  , 7.00  , &
                   6.50  ,15.00  ,17.00  ,20.00  ,15.00  ,    0.00  , 5.00  ,20.00  , 0.00  , 5.00  , &
                  20.00  , 7.50  , 1.50  , 1.50  , 1.50  ,    1.50  , 1.50/
  END IF

  IF(OPT_WATRET == 2) THEN
     DATA RTOMAX /12.50  , 4.00  , 4.00  , 4.00  , 4.00  ,    6.00  , 3.50  , 4.00  ,10.00  ,22.00  , &
                  18.00  ,12.50  ,20.00  ,24.00  ,20.00  ,    0.00  , 5.00  ,30.00  , 0.00  , 5.00  , &
                  18.00  , 5.00  , 1.50  , 1.50  , 1.50  ,    1.50  , 1.50/
  END IF

!--------------------------------------------------------------------------------------------------------------    
! for carbon mass balance check

     RTMOLD = RTMASS

! layer thikcness [m] and node (middle) depth in [m]

     DZ(1) = -ZSOIL(1)
     DO IZ = 2, NSOIL
        DZ(IZ)  = (ZSOIL(IZ-1) - ZSOIL(IZ))
     ENDDO

     ZNODE(1) = -ZSOIL(1) * 0.5
     DO IZ = 2, NSOIL
        ZNODE(IZ)  = -ZSOIL(IZ-1) + 0.5 * DZ(IZ)
     ENDDO

! root surface area density or root area index (SAI m2/m2) per unit depth [m2/m3]

     DO IZ = 1, NROOT
       SADR(IZ)  = ROOTMS(IZ)/DZ(IZ)/1000.*SRA(VEGTYP)  !g/m2 C -> kg/m2 C -> m2/m3 active roots
      !SADR(IZ)  = RTMASS/(-ZSOIL(NROOT))/1000.*SRA(VEGTYP)  !g/m2 C -> kg/m2 C -> m2/m3 active roots
     ENDDO

! maximum water storage in plant tissues

     MDRY  = DRYC * RM2CM
     MQMAX = MQX(VEGTYP) * MDRY      !kg/m2
    !MQMAX = MQX(VEGTYP) * (LFMASS+STMASS+RTMASS)*1.E-3 * RM2CM !kg/m2 (WOOD excluded to save time 
                                                        !to reach steady state)
! permanent wilting point (to be consistent with Noah prescribed SMCWLT )

     PBD      = MAX(0., MQMAX*(C1*MDRY/(MDRY+MQMAX)**2+C2/MQMAX))     ! when leaves totally dry

! plant water availability for transpiration (=BTRAN)

    !RWILT = 1.0 - 30./(1.+C1*MQX(VEGTYP)/(1.+MQX(VEGTYP))**2.)  ![30 bar]
     RWILT = 1.0 - 30.*(1.+MQX(VEGTYP))**2./(C1*MQX(VEGTYP))  ![30 bar]
     KR    = MAX(1.E-6,MIN(1.0,(MQ-RWILT*MQMAX)/((1.-RWILT)*MQMAX)))

! plant water potential [bar]

    !PB    = MIN(750.,MAX(0.,(MQMAX-MQ)*(C1*MDRY/(MDRY+MQMAX)**2+C2/MQMAX)))
     PB    = MIN(750.,MAX(0.,(MQMAX-MQ)*(C1*MDRY/(MDRY+MQMAX)**2)))
      
! changes in liquid water in plant tissues in each root layer

    !IF(IX == 196.and. IY == 56) THEN  !grass dry
    !IF(IX == 262.and. IY == 92) THEN  !grass dry
    !     write(*,*) 'MDRY,MQMAX,MQ,PB=',MDRY,MQMAX,MQ,PB
    !     write(*,*) 'QROOT(IZ)*1000.*DT,PSI(IZ),-CPBM*PB'
    !END IF

     SUMQR = 0.0
     DO IZ = 1,NROOT
         HR(IZ)    = -CPBM*PB - ZNODE(IZ) ![m]
        !WCND(IZ)  = DKSAT * MAX(1.0E-3,SH2O(IZ)/SMCMAX) ** (2.0*BEXP + 3.0)
         WCND(IZ)  = DKSAT(IZ) * MAX(1.0E-3,SH2O(IZ)/SMCMAX) ** (2.0*BEXP + 3.0)
         OMS(IZ)   = MIN(1.0E20,1.0/WCND(IZ)*(PI*RROOT(VEGTYP)*1.0E-3/(2.0*SADR(IZ)))**0.5)

         JR(IZ)    = ((PSI(IZ)-ZNODE(IZ))-HR(IZ)) / (OMR(VEGTYP)+OMS(IZ))

         IF(PSI(IZ) <= PSIWLT) JR(IZ) = 0.     ! much < -300 m for some soils

         QROOT(IZ) = MIN((SH2O(IZ)-0.0001)*DZ(IZ)/DT,SADR(IZ)*DZ(IZ)*JR(IZ))
         IF(MQ <=   0.1*MQMAX .and. QROOT(IZ) < 0.0) QROOT(IZ) = 0.0 !in case of frozen soil (liquid water pressure is too low)
        !IF(MQ <= RWILT*MQMAX .and. QROOT(IZ) < 0.0) QROOT(IZ) = 0.0 !in case of frozen soil (liquid water pressure is too low)

         SUMQR     = SUMQR + QROOT(IZ)

    !IF(IX == 196.and. IY == 56) THEN  !grass dry
    !IF(IX == 262.and. IY == 92) THEN  !grass dry
    !       write(*,'(10F15.3)') QROOT(IZ)*1000.*DT,PSI(IZ),STC(IZ),-CPBM*PB
    !END IF
     ENDDO              

     MQ  = MQ + DENH2O*(SUMQR-ETRAN*1.0E-3)*DT                  !no bound for water balance (can be '-')

! C partitioning to layers

     SUMRF = 0.
     DO IZ = 1, NROOT
         WTDZ(IZ)   = EXP(-0.1*ZNODE(IZ))   !to form background root profile (for even soil water)
         GX(IZ)     = SQRT(MAX(1.E-6,MIN(1.0,((SH2O(IZ)-SMCWLT)/(SMCREF-SMCWLT)))))
         WEIGHT(IZ) = GX(IZ)*DZ(IZ)*WTDZ(IZ)
         SUMRF      = SUMRF + WEIGHT(IZ)
     ENDDO

! root carbon dynamics

    DO IZ = 1, NROOT

      RTPT(IZ)    = (ROOTPT*CARBFX) * WEIGHT(IZ)/SUMRF             ! g/m2/s

      TF          = ARM(VEGTYP)**( (STC(IZ)-298.16)/10.)
      ROOTRS(IZ)  = RMR25(VEGTYP)*((ROOTMS(IZ)-RTMIN)*1E-3)*TF*RF*12.E-6    ! g/m2/s

     !ST(IZ)      = 0.4*((STC(IZ)-273.16)-10.)**2 /30**2                    ! fitted curve in Parton (1978)
      ST(IZ)      = 0.005
     !SD(IZ)      = 0.1 * 1.0/(1.0+0.00005*exp(20.0*GX(IZ)))
      SD(IZ)      = 0.1*(1.0-GX(IZ))

      ROOTTO(IZ)  = MAX(0.,(ROOTMS(IZ)-RTMIN))*RTOMAX(VEGTYP)/(86400.*365.)*MAX(SD(IZ),ST(IZ))
      ROOTEX(IZ)  = 0.3 * RTPT(IZ)

      ROOTGR(IZ)  = MAX(0.0, 0.2 * (RTPT(IZ) - ROOTRS(IZ)))
      ROOTNPP(IZ) = RTPT(IZ) - ROOTRS(IZ) - ROOTGR(IZ)

      ROOTMS(IZ)  = ROOTMS (IZ) + (ROOTNPP(IZ)-ROOTTO(IZ)-ROOTEX(IZ))*DT

      IF(ROOTMS(IZ).LT.0.0) THEN
           ROOTTO(IZ) = ROOTNPP(IZ)
           ROOTMS(IZ) = RTMIN
      ENDIF

    END DO

    RTPTT  = 0.
    RTMASS = 0.
    RTEXD  = 0.
    RTTOVR = 0.
    RSROOT = 0.
    GRROOT = 0.
    NPPR   = 0.

    DO IZ = 1, NROOT
      RTPTT  = RTPTT  + RTPT   (IZ)
      RTMASS = RTMASS + ROOTMS (IZ)
      RTEXD  = RTEXD  + ROOTEX (IZ)
      RTTOVR = RTTOVR + ROOTTO (IZ)
      RSROOT = RSROOT + ROOTRS (IZ)
      GRROOT = GRROOT + ROOTGR (IZ)
      NPPR   = NPPR   + ROOTNPP(IZ)
    END DO

    ! carbon balance check

    CARBIN = ROOTPT*CARBFX*DT
    RTM_ERR= (RTMASS-RTMOLD)-(CARBIN-(RTTOVR+RTEXD+RSROOT+GRROOT)*DT)

    IF(ABS(RTM_ERR) >=0.01) THEN
     write(*,*) 'root mass error',RTM_ERR
     write(*,*) 'RTMASS,RTMOLD,CARBFX*ROOTPT*DT,RTPTT*DT,RTTOVR*DT,RTEXD*DT,RSROOT*DT,GRROOT*DT'
     write(*,*)  RTMASS,RTMOLD,CARBFX*ROOTPT*DT,RTPTT*DT,RTTOVR*DT,RTEXD*DT,RSROOT*DT,GRROOT*DT
     DO IZ = 1, NROOT
      write(*,*) RTPT(IZ),WEIGHT(IZ),ROOTPT,CARBFX
     END DO
    
    !STOP 
    END IF

! soil moisture updates

     SUMSADR = 0.
     DO IZ = 1, NROOT
         SUMSADR = SUMSADR+SADR(IZ)*DZ(IZ) !root area index (m2/m2)
     ENDDO

     DO IZ = 1, NROOT
         FROOT(IZ) = (SADR(IZ)*DZ(IZ))/SUMSADR
         SH2O(IZ)  = SH2O(IZ) - QROOT(IZ)*DT/DZ(IZ)      !m/s
     ENDDO

!    IF(IX == 196.and. IY == 56) THEN  !grass dry
!      write(*,*) 'MQ,SUMQR*1000.*DT,ETRAN*DT=',MQ,SUMQR*1000.*DT,ETRAN*DT
!      write(*,*) 'KR,RWILT,SMCWLT,PBD*10.=',KR,RWILT,SMCWLT,VEGTYP,PBD*10.
!      write(*,*) 'IZ,FROOT(IZ),SH2O(IZ),PSI(IZ)/10,WTDZ(IZ)*GX(IZ),JR(IZ),SD(IZ),ROOTMS(IZ)'
!    do IZ = 1 ,nroot
!      write(*,'(I10,2F10.6,F10.2,10F12.6)') IZ,FROOT(IZ),SH2O(IZ),PSI(IZ)/10.2,WTDZ(IZ)*GX(IZ),GX(IZ),SD(IZ),ROOTMS(IZ)
!    end do
!    END IF

     END SUBROUTINE ROOT
! ==================================================================================================
!-------------------------------------------------------------------------------------------------
  SUBROUTINE CO2PRODUCT(NSOIL  ,  DTIME,    STC,    SMC,   SH2O, &
                           SICE,SH2OOLD,SICEOLD,  POROS,  O2AIR, &
                            SOC,   WDOC,   DDOC,    MIC,   WENZ, &
                           DENZ,   LITC,  RTEXD,   RESP,  NSNOW, &
                           VMAX,     KM, VMAXUP,   KMUP, EPSLON,ix,iy)
!-------------------------------------------------------------------------------------------------

  implicit none

  !------------------arguments-----------------------------------------------
  INTEGER                        , INTENT(IN)    :: ix,iy
  INTEGER                        , INTENT(IN)    :: NSNOW  !number of snow layers
  INTEGER                        , INTENT(IN)    :: NSOIL  !number of soil layers
  REAL                           , INTENT(IN)    :: DTIME  !time step [s]
  REAL                           , INTENT(IN)    :: POROS  !soil porosity [m2/m2]
  REAL, DIMENSION(-NSNOW+1:NSOIL), INTENT(IN)    :: STC    !soil temperature [k]
  REAL, DIMENSION(1:NSOIL)       , INTENT(IN)    :: SMC    !moisture (ice + liq.) [m2/m2]
  REAL, DIMENSION(1:NSOIL)       , INTENT(IN)    :: SH2O   !soil liq at present time [m2/m2]
  REAL, DIMENSION(1:NSOIL)       , INTENT(IN)    :: SICE   !soil ice at present time [m2/m2]
  REAL, DIMENSION(1:NSOIL)       , INTENT(IN)    :: SH2OOLD!soil liq at previous time [m2/m2]
  REAL, DIMENSION(1:NSOIL)       , INTENT(IN)    :: SICEOLD!soil ice at previous time [m2/m2]
  REAL                           , INTENT(IN)    :: LITC   !litter pool size [g C m-2]
  REAL                           , INTENT(IN)    :: RTEXD  !root exudatation into DOC [g c/m2/s]
  REAL                           , INTENT(IN)    :: O2AIR  !O2 in the air [g O2 m-3]
  REAL                           , INTENT(INOUT) :: SOC    !soil organic carbon [g C/m2]
  REAL                           , INTENT(INOUT) :: WDOC   !wet dissolved organic carbon [g C/m2]
  REAL                           , INTENT(INOUT) :: DDOC   !dry dissolved organic  [g C/m2]
  REAL                           , INTENT(INOUT) :: MIC    !soil microbial biomass [g C/m2]
  REAL                           , INTENT(INOUT) :: WENZ   !wet soil enzyme [g C/m2]
  REAL                           , INTENT(INOUT) :: DENZ   !dry soil enzyme [g C/m2]
  REAL                           , INTENT(OUT)   :: RESP   !heterotrophic respiration [g C/m2/s]
  real     , INTENT(OUT)   :: VMAX   !maximum SOC decomposition rate per
                                     !unit microbial biomass [g CSOC m-2 [g CMIC m-2]-1 s-1]
  real     , INTENT(OUT)   :: VMAXUP !maximum DOC uptake rate [g CDOC m-2 [g CMIC m-2]-1 s-1] 
  real     , INTENT(OUT)   :: KM     !Michaelis-Menten constant [g C m-2] for SOC  decomposition
  real     , INTENT(OUT)   :: KMUP   !Michaelis-Menten constant [g C m-2] for DOC uptake
  real     , INTENT(OUT)   :: EPSLON !carbon use efficiency
!---------------local variables----------------------------------------------------
  integer  :: i,j                !loop indexes
  real     :: rate_doc           !SOC decomposition rate and add into doc pool [g C m-2 s-1]
  real     :: rate_ndoc          !SOC decomposition rate and add into ndoc pool [g C m-2 s-1]
  real     :: up_rate            !DOC uptake rate [g C m-2 s-1]
  real     :: mic_death          !microbial mass death date [g C m-2 s-1]
  real     :: enz_death          !soil enzyme turnover date  [g C m-2 s-1]
  real     :: nenz_death         !soil enzyme turnover date in dry area  [g C m-2 s-1]
  real     :: enz_product        !soil enzyme production date [g C m-2 s-1]
  real     :: vmax0              !a pre-exponential coefficient of vmax as an Arrhenius function
                                 !of temperatuer [g CSOC m-2 [g CMIC m-2]-1 s-1]
  real     :: energy             !activation energy for the enzymatic reaction with SOC [J mol-1]
  real     :: kmslope            !slope of km as linear function of temperature [g C m-2 C-1]
  real     :: km0                !intercept of  km as linear function of temperature [g C m-2]
  real     :: vmaxup0            !a pre-exponential coefficient of vmaxup as an Arrhenius function
                                 !of temperature[g CSOC m-2 [g CMIC m-2]-1 s-1]
  real     :: energyup           !activation energy for the enzymatic reaction with DOC uptake [J mol-1]
  real     :: kmupslope          !slope of kmup as linear function of temperature [g C m-2 C-1]
  real     :: kmup0              !intercept of  kmup as linear function of temperature [g C m-2]
  real     :: kmupo2             !Michaelis-Menten constant for O2 uptake [g O2 m-2 air]
  real     :: mic_tover          !the microbial biomass death rate constant [s-1]
  real     :: enz_tover          !soil enzye turnover rate constant in wet zone [s-1]
  real     :: nenz_tover         !soil enzye turnover rate constant in dry zone [s-1]
  real     :: enz_ke             !soil enzye production rate constant [s-1]
  real     :: delta              !the fraction of dead microbial biomass into SOC [-]
  real     :: ep_slope           !slope of epson as linear function of temperature [C-1]
  real     :: epslon0            !intercept of epslon as linear function of temperature
  real     :: lit                !the fraction of litter into DOC
  real     :: soil_h2o           !soil liq saturation
  real     :: soil_ice           !soil ice saturation
  real     :: beta               !enzyme effiecency in the dry zone
  real     :: so2                !soil o2 concentration [g/m2]
  real     :: tsoil

  real     :: FTRAN
  real     :: SMOLD
  real     :: SM
  real     :: TOTSC_BEG
  real     :: TOTSC_END
  real     :: TOTSC_ERR
!--------------end varialbes list----------------------------------------------------

      TOTSC_BEG   = SOC + WDOC + DDOC + MIC + WENZ + DENZ   !g/m2 C
      !write(*,*) TOTSC_BEG,SOC , WDOC , DDOC , MIC , WENZ , DENZ   !g/m2 C

      vmax0      = 2.8e04
      energy     = 4.7e04  !4.7e04 
      kmslope    = 5e03
      km0        = 5e05
      vmaxup0    = 2.8e04
      energyup   = 4.7e04  ! 4.7e04
      kmupslope  = 10
      kmup0      = 100
      kmupo2     = 0.121     !(m2 O2 m-2 air)

      mic_tover  = 1.0*5.56e-8 !5.56e-8 
      enz_tover  = 1.0*2.78e-7 !0.3*2.78e-7 !2.78e-7
      nenz_tover = 0.05*2.78e-7 !0.2*2.78e-7 !        ***
      enz_ke     = 20.*1.39e-9 !20.*1.39e-9 !        ***

      delta      = 0.5
      lit        = 0.3

      epslon0    = 0.63
      ep_slope   = -1.6e-2
      beta       = 0.75  !1.0

      !SM    = (SH2O   (1) + SH2O   (2))*0.5
      !SMOLD = (SH2OOLD(1) + SH2OOLD(2))*0.5
      SM    = (SH2O   (1) )*0.1 + (SH2O   (2) )*0.3 + (SH2O   (3) )*0.6
      SMOLD = (SH2OOLD(1) )*0.1 + (SH2OOLD(2) )*0.3 + (SH2OOLD(3) )*0.6
      tsoil = STC(1)*0.1 + STC(2)*0.3 + STC(3)*0.6

      soil_h2o = (SH2O(1)*0.1+SH2O(2)*0.3+SH2O(3)*0.6)/poros/1.0
      soil_ice = (SICE(1)*0.1+SICE(2)*0.3+SICE(3)*0.6)/poros/1.0
      so2      = max(0.0, o2air * (1.0-soil_h2o-soil_ice))

!      if(ix == 290 .and. iy == 60) then
!        write(*,*) 'wdoc,MAX(0.01,MIN(1.0,(SM - SMOLD)/(poros-SMOLD))),(SMOLD-SM)/SMOLD,SM,SMOLD'
!        write(*,*) wdoc,MAX(0.01,MIN(1.0,(SM - SMOLD)/(poros-SMOLD))),(SMOLD-SM)/SMOLD,SM,SMOLD
!      end if

      IF(OPT_SCM == 3) THEN
        if(SM > SMOLD) then
          FTRAN = MAX(0.01,MIN(1.0,(SM - SMOLD)/(poros-SMOLD)))

          wdoc = wdoc + ddoc*FTRAN
          ddoc = ddoc - ddoc*FTRAN

          wenz = wenz + denz*FTRAN
          denz = denz - denz*FTRAN

        else
          FTRAN = (SMOLD - SM) / SMOLD

          ddoc = ddoc + wdoc*FTRAN
          wdoc = wdoc - wdoc*FTRAN

          denz = denz + wenz*FTRAN
          wenz = wenz - wenz*FTRAN
        endif
      END IF

!SOC decomposition
      vmax   = vmax0 * exp(-energy/(8.31*tsoil))
      !km     = max(0.0, km0 + kmslope*(tsoil-tfrz))
      km     = max(0.0, km0 + kmslope*max(0.0,tsoil-tfrz))

!*(soil_mc(i)+soil_mcold(i))/2/poros

      rate_doc  = vmax * wenz*soc/(km+soc)*   soil_h2o
      rate_ndoc = vmax * denz*soc/(km+soc)*(1-soil_h2o)*beta

!DOC uptake rate

      vmaxup  = vmaxup0 * exp(-energyup/(8.31*tsoil))
      !kmup    = max(0.0, kmup0 + kmupslope*(tsoil-tfrz))
      kmup    = max(0.0, kmup0 + kmupslope*max(0.0,tsoil-tfrz))

      up_rate = vmaxup*mic * wdoc/(kmup+wdoc) * so2/(kmupo2+so2) * soil_h2o

      !up_rate = min(wdoc/dtime,up_rate)
      up_rate = max(0.,min(wdoc/dtime,up_rate))
      !epslon =  max(0.,epslon0+ep_slope*(tsoil-tfrz))
      epslon =  max(0.,epslon0+ep_slope*max(0.,tsoil-tfrz))

!respiration rate

      resp = up_rate*(1.-epslon)

!microbial mass death rate

      mic_death  = min(mic/dtime,mic*mic_tover)
      mic  = mic - mic_death*dtime + up_rate*dtime*epslon

!enzyme production rate
      enz_product= enz_ke*mic
      mic  = max(0.0,mic - enz_product*dtime)

!enzyme turnover rate

      enz_death  = min(wenz/dtime, wenz*enz_tover )
      nenz_death = min(denz/dtime, denz*nenz_tover)

!mass balance

     soc  = soc - (rate_doc+rate_ndoc)*dtime + mic_death*delta*dtime&
                   + litc*(1.-lit)

     wdoc = wdoc + rate_doc*dtime + mic_death*(1-delta)*dtime&
             + enz_death*dtime + litc*lit + rtexd*dtime - up_rate*dtime

     IF(OPT_SCM == 3) ddoc = ddoc + rate_ndoc*dtime + nenz_death*dtime
     IF(OPT_SCM == 2) ddoc = 0.

     wenz = wenz + (enz_product - enz_death)*dtime

     IF(OPT_SCM == 3) denz = denz - nenz_death*dtime
     IF(OPT_SCM == 2) denz = 0.

!Mass balance check

      TOTSC_END   = SOC + WDOC + DDOC + MIC + WENZ + DENZ   !g/m2 C

      TOTSC_ERR  = (TOTSC_END - TOTSC_BEG) - LITC - RTEXD*DTIME + RESP*DTIME

      IF(ABS(TOTSC_ERR) > 0.1) THEN
        write(*,*) 'TOTSC_ERR=',TOTSC_ERR
        write(*,*) 'TOTSC_END,TOTSC_BEG,LITC,RTEXD*DTIME,RESP*DTIME,up_rate,epslon,wdoc'
        write(*,*) TOTSC_END,TOTSC_BEG,LITC,RTEXD*DTIME,RESP*DTIME,up_rate,epslon,wdoc
        write(*,*) vmaxup,mic, wdoc,kmup,so2,kmupo2,soil_h2o
        !stop
      END IF
     
      if(soc<0. .or. ddoc<0. .or. wdoc<0. .or. mic<0. .or. wenz<0. .or. denz<0.) then
        write(*,*)'ix,iy,SOC,WDOC,DDOC,MIC,WENZ,DENZ,TSOIL,SMC(1)'   !g/m2 C
        write(*,*)ix,iy,SOC,WDOC,DDOC,MIC,WENZ,DENZ,TSOIL,SMC(1)   !g/m2 C
        !STOP
      end if

 END SUBROUTINE CO2PRODUCT
! ==================================================================================================

! ------------------------------------------------------------------------------------------
  SUBROUTINE BVOCFLUX(VOCFLX,  VEGTYP,  VEGFRAC,  APAR,   TV )
! ------------------------------------------------------------------------------------------

! ------------------------------------------------------------------------------------------
      implicit none
! ------------------------------------------------------------------------------------------

! ------------------------ code history ---------------------------
! source file:       BVOC
! purpose:           BVOC emissions
! DESCRIPTION:
! Volatile organic compound emission 
! This code simulates volatile organic compound emissions
! following the algorithm presented in Guenther, A., 1999: Modeling
! Biogenic Volatile Organic Compound Emissions to the Atmosphere. In
! Reactive Hydrocarbons in the Atmosphere, Ch. 3
! This model relies on the assumption that 90% of isoprene and monoterpene
! emissions originate from canopy foliage:
!    E = epsilon * gamma * density * delta
! The factor delta (longterm activity factor) applies to isoprene emission
! from deciduous plants only. We neglect this factor at the present time.
! This factor is discussed in Guenther (1997).
! Subroutine written to operate at the patch level.
! IN FINAL IMPLEMENTATION, REMEMBER:
! 1. may wish to call this routine only as freq. as rad. calculations
! 2. may wish to place epsilon values directly in pft-physiology file
! ------------------------ input/output variables -----------------
! input
  integer                     ,INTENT(IN) :: vegtyp  !vegetation type 
  real                        ,INTENT(IN) :: vegfrac !green vegetation fraction [0.0-1.0]
  real                        ,INTENT(IN) :: apar    !photosynthesis active energy by canopy (w/m2)
  real                        ,INTENT(IN) :: tv      !vegetation canopy temperature (k)

! output
  real                        ,INTENT(OUT) :: vocflx(5) ! voc fluxes [ug C m-2 h-1]

! Local Variables

  real, parameter :: R      = 8.314    ! univ. gas constant [J K-1 mol-1]
  real, parameter :: alpha  = 0.0027   ! empirical coefficient
  real, parameter :: cl1    = 1.066    ! empirical coefficient
  real, parameter :: ct1    = 95000.0  ! empirical coefficient [J mol-1]
  real, parameter :: ct2    = 230000.0 ! empirical coefficient [J mol-1]
  real, parameter :: ct3    = 0.961    ! empirical coefficient
  real, parameter :: tm     = 314.0    ! empirical coefficient [K]
  real, parameter :: tstd   = 303.0    ! std temperature [K]
  real, parameter :: bet    = 0.09     ! beta empirical coefficient [K-1]

  integer ivoc        ! do-loop index
  integer ityp        ! do-loop index
  real epsilon(5)
  real gamma(5)
  real density
  real elai
  real slarea(27)
  real eps(27,5)

    real par,cl,reciprod,ct

    data (slarea(ityp),ityp=1,27) &
                /0.0228,0.0200,0.0200,0.0295,0.0223,0.0277,0.0060,0.0227,0.0188, &
                 0.0236,0.0258,0.0200,0.0200,0.0090,0.0223,0.0422,0.0390,10*0.02/ !??? Lindsey
    data (eps(ityp,1),ityp=1,27) &
                /41.87, 0.00, 0.00, 2.52, 0.04,17.11, 0.02,21.62, 0.11, &
                 22.80,46.86, 0.00, 0.00, 0.46,30.98, 2.31, 1.63, 10*0.0/  ! isoprene  24.0
    data (eps(ityp,2),ityp=1,27) &
                / 0.98, 0.00, 0.00, 0.16, 0.09, 0.28, 0.05, 0.92, 0.22, &
                  0.59, 0.38, 0.00, 0.00, 3.34, 0.96, 1.47, 1.07, 10*0.0/  ! monoterpenes 0.8
    data (eps(ityp,3),ityp=1,27) &
                / 1.82, 0.00, 0.00, 0.23, 0.05, 0.81, 0.03, 1.73, 1.26, &
                  1.37, 1.84, 0.00, 0.00, 1.85, 1.84, 1.70, 1.21, 10*0.0/  ! OVOC 1.0
    data (eps(ityp,4),ityp=1,27) /27*0.0/  ! ORVOC 1.0
    data (eps(ityp,5),ityp=1,27) /27*0.0/  ! CO    0.3

! epsilon :

    do ivoc = 1, 5
    epsilon(ivoc) = eps(VEGTYP,ivoc)
    end do

! gamma : Activity factor. Units [dimensionless]

      reciprod = 1. / (R * tv * tstd)
      ct = exp(ct1 * (tv - tstd) * reciprod) / &
           (ct3 + exp(ct2 * (tv - tm) * reciprod))

      par = apar * 4.6 ! (multiply w/m2 by 4.6 to get umol/m2/s)
      cl  = alpha * cl1 * par * (1. + alpha * alpha * par * par)**(-0.5)

   gamma(1) = cl * ct ! for isoprenes

   do ivoc = 2, 5
   gamma(ivoc) = exp(bet * (tv - tstd))
   end do

! Foliage density

! transform vegfrac to lai      

   elai    = max(0.0,-6.5/2.5*alog((1.-vegfrac)))
   density = elai / (slarea(VEGTYP) * 0.5)

! calculate the voc flux

   do ivoc = 1, 5
   vocflx(ivoc) = epsilon(ivoc) * gamma(ivoc) * density
   end do

   end subroutine bvocflux
! ==================================================================================================
! ********************************* end of carbon subroutines *****************************
! ==================================================================================================
  SUBROUTINE REDPRM (VEGTYP,SOILTYP,SLOPETYP,SLDPTH,ZSOIL,NSOIL,   &! in
                     BEXP  ,DWSAT  ,DKSAT   ,F1    ,PSISAT,QUARTZ, &! out
                     VGM   ,SMCR   ,VGPSAT  ,                      &! out 
                     SMCDRY,SMCMAX ,SMCREF  ,SMCWLT,HS    ,RGL   , &! out
                     RSMIN ,NROOT  ,SLOPE   ,KDT   ,FRZX  )

    use module_sf_noahlsm_param_init

    IMPLICIT NONE
! ----------------------------------------------------------------------
! Internally set (default valuess)
! all soil and vegetation parameters required for the execusion oF
! the Noah lsm are defined in VEGPARM.TBL, SOILPARM.TB, and GENPARM.TBL.
! ----------------------------------------------------------------------
!     Vegetation parameters:
!             CMXTBL: MAX CNPY Capacity
!              NROOT: Rooting depth
!
! ----------------------------------------------------------------------
!      Soil parameters:
!       SSATPSI: SAT (saturation) soil potential
!        SSATDW: SAT soil diffusivity
!           F1: Soil thermal diffusivity/conductivity coef.
!        QUARTZ: Soil quartz content
!  Modified by F. Chen (12/22/97)  to use the STATSGO soil map
!  Modified By F. Chen (01/22/00)  to include PLaya, Lava, and White San
!  Modified By F. Chen (08/05/02)  to include additional parameters for the Noah
! NOTE: SATDW = BB*SATDK*(SATPSI/MAXSMC)
!         F11 = ALOG10(SATPSI) + BB*ALOG10(MAXSMC) + 2.0
!       REFSMC1=MAXSMC*(5.79E-9/SATDK)**(1/(2*BB+3)) 5.79E-9 m/s= 0.5 mm
!       REFSMC=REFSMC1+1./3.(MAXSMC-REFSMC1)
!       WLTSMC1=MAXSMC*(200./SATPSI)**(-1./BB)    (Wetzel and Chang, 198
!       WLTSMC=WLTSMC1-0.5*WLTSMC1
! Note: the values for playa is set for it to have a thermal conductivit
! as sand and to have a hydrulic conductivity as clay
!
! ----------------------------------------------------------------------
! BLANK        OCEAN/SEA
!       CSOIL_DATA: soil heat capacity [J M-3 K-1]
!       ZBOT_DATA: depth[M] of lower boundary soil temperature
!       CZIL_DATA: calculate roughness length of heat
!       SMLOW_DATA and MHIGH_DATA: two soil moisture wilt, soil moisture referen
!                 parameters
! Set maximum number of soil- and veg- in data statement.
! ----------------------------------------------------------------------
    INTEGER, PARAMETER     :: MAX_SOILTYP=30,MAX_VEGTYP=30

! Veg parameters
    INTEGER, INTENT(IN)    :: VEGTYP
! Soil parameters
    INTEGER, INTENT(IN)    :: SOILTYP
! General parameters
    INTEGER, INTENT(IN)    :: SLOPETYP
! General parameters
    INTEGER, INTENT(IN)    :: NSOIL
! Layer parameters
  REAL,DIMENSION(NSOIL),INTENT(IN) :: SLDPTH
  REAL,DIMENSION(NSOIL),INTENT(IN) :: ZSOIL

  INTEGER ,INTENT(OUT) :: NROOT        !rooting depth [as number of layers]
  REAL    ,INTENT(OUT) :: RGL          !parameter used in radiation stress function
  REAL    ,INTENT(OUT) :: RSMIN        !minimum canopy Resistance [s/m]
  REAL    ,INTENT(OUT) :: HS           !parameter used in vapor pressure deficit function
  REAL    ,INTENT(OUT) :: BEXP         !B parameter
  REAL    ,INTENT(OUT) :: SMCDRY       !soil moisture where direct evap from top layer ends [m3/m3]
  REAL    ,INTENT(OUT) :: F1           !soil thermal diffusivity/conductivity coef
  REAL    ,INTENT(OUT) :: SMCMAX       !porosity, saturated value of soil moisture (volumetric)
  REAL    ,INTENT(OUT) :: SMCREF       !reference soil moisture (field capacity) (volumetric)
  REAL    ,INTENT(OUT) :: PSISAT       !saturated soil matric potential
  REAL ,DIMENSION(NSOIL) ,INTENT(OUT) :: DKSAT        !saturated soil hydraulic conductivity
  REAL    ,INTENT(OUT) :: DWSAT        !saturated soil hydraulic diffusivity
  REAL    ,INTENT(OUT) :: SMCWLT       !wilting point soil moisture (volumetric)
  REAL    ,INTENT(OUT) :: QUARTZ       !soil quartz content
  REAL    ,INTENT(OUT) :: SLOPE        !slope index (0 - 1)
  REAL    ,INTENT(OUT) :: KDT          !
  REAL    ,INTENT(OUT) :: FRZX         !
  REAL    ,INTENT(OUT) :: VGM          !1.-1./n, van Genuchten n
  REAL    ,INTENT(OUT) :: VGPSAT       !van Genuchten PSAT
  REAL    ,INTENT(OUT) :: SMCR         !residual moisture [m3/m3]

  REAL                  :: FRZFACT
  REAL,DIMENSION(NSOIL) :: DZ,ZNODE
  INTEGER               :: I,IZ
! ----------------------------------------------------------------------
!
    IF (SOILTYP .gt. SLCATS) THEN
       WRITE (*,*) 'Warning: too many input soil types'
       print*, 'SOILTYP must be less than SLCATS:'
       print*, "    SOILTYP = ", SOILTYP
       print*, "    SLCATS  = ", SLCATS
       STOP 333
    END IF
    IF (VEGTYP .gt. LUCATS) THEN
       WRITE (*,*) 'Warning: too many input landuse types'
       STOP 333
    END IF

! ----------------------------------------------------------------------
!  SET-UP SOIL PARAMETERS
! ----------------------------------------------------------------------
! layer thikcness [m] and node (middle) depth in [m]

    DZ(1) = -ZSOIL(1)
     DO IZ = 2, NSOIL
        DZ(IZ)  = (ZSOIL(IZ-1) - ZSOIL(IZ))
    ENDDO

    ZNODE(1) = -ZSOIL(1) * 0.5
    DO IZ = 2, NSOIL
        ZNODE(IZ)  = -ZSOIL(IZ-1) + 0.5 * DZ(IZ)
    ENDDO

    BEXP   = BB     (SOILTYP)
    DO IZ = 1, NSOIL
     !DKSAT(IZ)  = MAX(SATDK(SOILTYP),SATDK(SOILTYP)*EXP(1.0*3.0)*EXP(-3.0*ZNODE(IZ)))   !
      DKSAT(IZ)  = SATDK  (SOILTYP)
    END DO

    DWSAT  = SATDW  (SOILTYP)
    F1     = F11    (SOILTYP)
    PSISAT = SATPSI (SOILTYP)
    QUARTZ = QTZ    (SOILTYP)
    SMCDRY = DRYSMC (SOILTYP)
    SMCMAX = MAXSMC (SOILTYP)
    SMCREF = REFSMC (SOILTYP)
    SMCWLT = WLTSMC (SOILTYP)

    SMCR   = RSMC   (SOILTYP)
    VGM    = 1. - 1./VGN(SOILTYP)
    VGPSAT = VGSATP (SOILTYP)

! ----------------------------------------------------------------------
! Set-up universal parameters (not dependent on SOILTYP, VEGTYP)
! ----------------------------------------------------------------------
    CSOIL  = CSOIL_DATA
    ZBOT   = ZBOT_DATA
    CZIL   = CZIL_DATA

    FRZK   = FRZK_DATA
    REFDK  = REFDK_DATA
    REFKDT = REFKDT_DATA
   !KDT    = REFKDT * DKSAT / REFDK
    KDT    = REFKDT * DKSAT(1) / REFDK
    SLOPE  = SLOPE_DATA (SLOPETYP)

! adjust FRZK parameter to actual soil type: FRZK * FRZFACT

    if(SOILTYP /= 14) then
      FRZFACT = (SMCMAX / SMCREF) * (0.412 / 0.468)
      FRZX = FRZK * FRZFACT
    end if

!    write(*,*) FRZK, FRZX, KDT, SLOPE, SLOPETYP
! ----------------------------------------------------------------------
! SET-UP VEGETATION PARAMETERS
! ----------------------------------------------------------------------
    ! Six redprm_canres variables:
    TOPT  = TOPT_DATA
    RSMAX = RSMAX_DATA
    HS    = HSTBL  (VEGTYP)
    RGL   = RGLTBL (VEGTYP)
    RSMIN = RSTBL  (VEGTYP)
!niu    NROOT = NROTBL (VEGTYP)
    NROOT = NSOIL

    IF (NROOT .gt. NSOIL) THEN
       WRITE (*,*) 'Warning: too many root layers'
       write (*,*) 'NROOT = ', nroot
       write (*,*) 'NSOIL = ', nsoil
       STOP 333
    END IF

! ----------------------------------------------------------------------

  END  SUBROUTINE REDPRM
! ==================================================================================================
  SUBROUTINE LSMZEN (CALDAY, LOND, LATD, COSZ)

! cosine solar zenith angle from:
!    o day (1.x to 365.x), where x=0 (e.g. 213.0) denotes 00:00 at greenwich
!    o latitude,  where SH = - and NH = +
!    o longitude, where WH = - and EH = +
! the solar declination must match that used in the atmospheric model.
! -----------------------------------------------------------------
! input
      REAL, INTENT(IN) :: CALDAY  !calendar day + fraction (1.xx -> 365.xx)
      REAL, INTENT(IN) :: LATD    !latitude  (degree): + = NH ( -90 ->  90)
      REAL, INTENT(IN) :: LOND    !longitude (degree): + = EH (-180 -> 180)

! output
      REAL,INTENT(OUT) :: COSZ    !cosine zenith angle

! local
      REAL :: DAYSPY              !days per year
      REAL :: PI                  !pi
      REAL :: THETA               !earth orbit seasonal angle in radians
      REAL :: DELTA               !solar declination angle  in radians
      REAL :: SIND                !sine   of declination
      REAL :: COSD                !cosine of declination
      REAL :: PHI                 !greenwich calendar day + longitude offset
      REAL :: LOCTIM              !local time (hour)
      REAL :: HRANG               !solar hour angle, 24 hour periodicity (radians)
      REAL :: LAT                 !latitude  (radians): + = NH
      REAL :: LON                 !longitude (radians): + = EH

      INTEGER MCSEC            !current seconds in day (0, ..., 86400)
! -----------------------------------------------------------------

      DAYSPY = 365.
      PI = 4.*ATAN(1.)

      LAT = LATD * PI/180.
      LON = LOND * PI/180

! solar declination: 

      THETA = (2.*PI*CALDAY)/DAYSPY
      DELTA = .006918 - .399912*COS(   THETA) + .070257*SIN(   THETA) &
                      - .006758*COS(2.*THETA) + .000907*SIN(2.*THETA) &
                      - .002697*COS(3.*THETA) + .001480*SIN(3.*THETA)
      SIND = SIN(DELTA)
      COSD = COS(DELTA)

! local time

         MCSEC = (CALDAY - INT(CALDAY)) * 86400.
         PHI = CALDAY + LON/(2.*PI)
         LOCTIM = (MCSEC + (PHI-CALDAY)*86400.) / 3600.

! hour angle

         HRANG = 360./24. * (LOCTIM-12.) * PI/180.

! cosine solar zenith angle. reset points with sun slightly below horizon
! to slightly above horizon, as discussed in notes.

         COSZ = SIN(LAT)*SIND + COS(LAT)*COSD*COS(HRANG)
         IF (COSZ .GE. -0.001 .AND. COSZ.LE. 0.) COSZ = 0.001

  END SUBROUTINE LSMZEN 
! ==================================================================================================
  SUBROUTINE CALENDR(ISTEP   ,DTIME   ,IMONTH, IDAY, ITIME, CALDAY)

! ------------------------------------------------------------------------
! input

  INTEGER, INTENT(IN) :: ISTEP
  INTEGER, INTENT(IN) :: IMONTH
  INTEGER, INTENT(IN) :: IDAY
  INTEGER, INTENT(IN) :: ITIME
  REAL,    INTENT(IN) :: DTIME

! output

  REAL,   INTENT(OUT) :: CALDAY

! local
  INTEGER :: NDAY(12)    ! number of days per month
  INTEGER :: JDAY(12)    ! convert month index to julian day

   DATA NDAY/31,28,31,30,31,30,31,31,30,31,30,31/
   DATA JDAY/0,31,59,90,120,151,181,212,243,273,304,334/
! ------------------------------------------------------------------------

    CALDAY = JDAY(IMONTH) + IDAY + ITIME/24.
! ------------------------------------------------------------------------
  END SUBROUTINE CALENDR
! ==================================================================================================
END MODULE NOAHLSM_ROUTINES
! ==================================================================================================

MODULE MODULE_SF_NOAHLSM

  USE NOAHLSM_ROUTINES
  USE NOAHLSM_GLOBALS

END MODULE MODULE_SF_NOAHLSM
